// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.1
// Source: dg.proto

package deviceauth

import (
	"context"

	"gitee.com/unitedrhino/things/service/dgsvr/internal/svc"
	"gitee.com/unitedrhino/things/service/dgsvr/pb/dg"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AccessAuthReq      = dg.AccessAuthReq
	DeviceRegisterReq  = dg.DeviceRegisterReq
	DeviceRegisterResp = dg.DeviceRegisterResp
	LoginAuthReq       = dg.LoginAuthReq
	Request            = dg.Request
	Response           = dg.Response

	DeviceAuth interface {
		// 设备登录认证
		LoginAuth(ctx context.Context, in *LoginAuthReq, opts ...grpc.CallOption) (*Response, error)
		// 设备操作认证
		AccessAuth(ctx context.Context, in *AccessAuthReq, opts ...grpc.CallOption) (*Response, error)
		// 设备动态注册
		DeviceRegister(ctx context.Context, in *DeviceRegisterReq, opts ...grpc.CallOption) (*DeviceRegisterResp, error)
	}

	defaultDeviceAuth struct {
		cli zrpc.Client
	}

	directDeviceAuth struct {
		svcCtx *svc.ServiceContext
		svr    dg.DeviceAuthServer
	}
)

func NewDeviceAuth(cli zrpc.Client) DeviceAuth {
	return &defaultDeviceAuth{
		cli: cli,
	}
}

func NewDirectDeviceAuth(svcCtx *svc.ServiceContext, svr dg.DeviceAuthServer) DeviceAuth {
	return &directDeviceAuth{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 设备登录认证
func (m *defaultDeviceAuth) LoginAuth(ctx context.Context, in *LoginAuthReq, opts ...grpc.CallOption) (*Response, error) {
	client := dg.NewDeviceAuthClient(m.cli.Conn())
	return client.LoginAuth(ctx, in, opts...)
}

// 设备登录认证
func (d *directDeviceAuth) LoginAuth(ctx context.Context, in *LoginAuthReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.LoginAuth(ctx, in)
}

// 设备操作认证
func (m *defaultDeviceAuth) AccessAuth(ctx context.Context, in *AccessAuthReq, opts ...grpc.CallOption) (*Response, error) {
	client := dg.NewDeviceAuthClient(m.cli.Conn())
	return client.AccessAuth(ctx, in, opts...)
}

// 设备操作认证
func (d *directDeviceAuth) AccessAuth(ctx context.Context, in *AccessAuthReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.AccessAuth(ctx, in)
}

// 设备动态注册
func (m *defaultDeviceAuth) DeviceRegister(ctx context.Context, in *DeviceRegisterReq, opts ...grpc.CallOption) (*DeviceRegisterResp, error) {
	client := dg.NewDeviceAuthClient(m.cli.Conn())
	return client.DeviceRegister(ctx, in, opts...)
}

// 设备动态注册
func (d *directDeviceAuth) DeviceRegister(ctx context.Context, in *DeviceRegisterReq, opts ...grpc.CallOption) (*DeviceRegisterResp, error) {
	return d.svr.DeviceRegister(ctx, in)
}
