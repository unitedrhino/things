// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: proto/dm.proto

//import "proto/schemaInfo.proto";

package dm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{0}
}

type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{1}
}

func (x *TimeRange) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TimeRange) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 排序信息
	Orders []*PageInfo_OrderBy `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{2}
}

func (x *PageInfo) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PageInfo) GetOrders() []*PageInfo_OrderBy {
	if x != nil {
		return x.Orders
	}
	return nil
}

type CompareString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmpType string `protobuf:"bytes,1,opt,name=CmpType,proto3" json:"CmpType,omitempty"` //"=":相等 "!=":不相等 ">":大于">=":大于等于"<":小于"<=":小于等于 "like":模糊查询
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`     //值
}

func (x *CompareString) Reset() {
	*x = CompareString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareString) ProtoMessage() {}

func (x *CompareString) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareString.ProtoReflect.Descriptor instead.
func (*CompareString) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{3}
}

func (x *CompareString) GetCmpType() string {
	if x != nil {
		return x.CmpType
	}
	return ""
}

func (x *CompareString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CompareInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmpType string `protobuf:"bytes,1,opt,name=CmpType,proto3" json:"CmpType,omitempty"` //"=":相等 "!=":不相等 ">":大于">=":大于等于"<":小于"<=":小于等于 "like":模糊查询
	Value   int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`    //值
}

func (x *CompareInt64) Reset() {
	*x = CompareInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareInt64) ProtoMessage() {}

func (x *CompareInt64) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareInt64.ProtoReflect.Descriptor instead.
func (*CompareInt64) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{4}
}

func (x *CompareInt64) GetCmpType() string {
	if x != nil {
		return x.CmpType
	}
	return ""
}

func (x *CompareInt64) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FileCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`          //文件的路径
	IsUpdate bool   `protobuf:"varint,2,opt,name=isUpdate,proto3" json:"isUpdate,omitempty"` //如果要更新该文件,则需要将该参数置为true
}

func (x *FileCore) Reset() {
	*x = FileCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCore) ProtoMessage() {}

func (x *FileCore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCore.ProtoReflect.Descriptor instead.
func (*FileCore) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{5}
}

func (x *FileCore) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileCore) GetIsUpdate() bool {
	if x != nil {
		return x.IsUpdate
	}
	return false
}

type SendOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutToFail  int64 `protobuf:"varint,1,opt,name=timeoutToFail,proto3" json:"timeoutToFail,omitempty"`   //超时失败时间
	RequestTimeout int64 `protobuf:"varint,2,opt,name=requestTimeout,proto3" json:"requestTimeout,omitempty"` //请求超时,超时后会进行重试
	RetryInterval  int64 `protobuf:"varint,3,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`   //重试间隔
}

func (x *SendOption) Reset() {
	*x = SendOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOption) ProtoMessage() {}

func (x *SendOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOption.ProtoReflect.Descriptor instead.
func (*SendOption) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{6}
}

func (x *SendOption) GetTimeoutToFail() int64 {
	if x != nil {
		return x.TimeoutToFail
	}
	return 0
}

func (x *SendOption) GetRequestTimeout() int64 {
	if x != nil {
		return x.RequestTimeout
	}
	return 0
}

func (x *SendOption) GetRetryInterval() int64 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

type WithIDCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *WithIDCode) Reset() {
	*x = WithIDCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithIDCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithIDCode) ProtoMessage() {}

func (x *WithIDCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithIDCode.ProtoReflect.Descriptor instead.
func (*WithIDCode) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{7}
}

func (x *WithIDCode) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WithIDCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type WithID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WithID) Reset() {
	*x = WithID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithID) ProtoMessage() {}

func (x *WithID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithID.ProtoReflect.Descriptor instead.
func (*WithID) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{8}
}

func (x *WithID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WithIDChildren struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id
	WithChildren bool  `protobuf:"varint,2,opt,name=withChildren,proto3" json:"withChildren,omitempty"`
}

func (x *WithIDChildren) Reset() {
	*x = WithIDChildren{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithIDChildren) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithIDChildren) ProtoMessage() {}

func (x *WithIDChildren) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithIDChildren.ProtoReflect.Descriptor instead.
func (*WithIDChildren) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{9}
}

func (x *WithIDChildren) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WithIDChildren) GetWithChildren() bool {
	if x != nil {
		return x.WithChildren
	}
	return false
}

type IDPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IdPath     string `protobuf:"bytes,2,opt,name=idPath,proto3" json:"idPath,omitempty"`
	NoParentID int64  `protobuf:"varint,3,opt,name=noParentID,proto3" json:"noParentID,omitempty"`
}

func (x *IDPath) Reset() {
	*x = IDPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPath) ProtoMessage() {}

func (x *IDPath) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPath.ProtoReflect.Descriptor instead.
func (*IDPath) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{10}
}

func (x *IDPath) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IDPath) GetIdPath() string {
	if x != nil {
		return x.IdPath
	}
	return ""
}

func (x *IDPath) GetNoParentID() int64 {
	if x != nil {
		return x.NoParentID
	}
	return 0
}

type IDsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids     []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	IdPaths []string `protobuf:"bytes,2,rep,name=idPaths,proto3" json:"idPaths,omitempty"`
}

func (x *IDsInfo) Reset() {
	*x = IDsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsInfo) ProtoMessage() {}

func (x *IDsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsInfo.ProtoReflect.Descriptor instead.
func (*IDsInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{11}
}

func (x *IDsInfo) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *IDsInfo) GetIdPaths() []string {
	if x != nil {
		return x.IdPaths
	}
	return nil
}

type IDPathWithUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IdPath      string `protobuf:"bytes,2,opt,name=idPath,proto3" json:"idPath,omitempty"`
	UpdatedTime int64  `protobuf:"varint,3,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
}

func (x *IDPathWithUpdate) Reset() {
	*x = IDPathWithUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPathWithUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPathWithUpdate) ProtoMessage() {}

func (x *IDPathWithUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPathWithUpdate.ProtoReflect.Descriptor instead.
func (*IDPathWithUpdate) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{12}
}

func (x *IDPathWithUpdate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IDPathWithUpdate) GetIdPath() string {
	if x != nil {
		return x.IdPath
	}
	return ""
}

func (x *IDPathWithUpdate) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

type PublishMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle       string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"` //对应 mqtt topic的第一个 thing ota config 等等
	Type         string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`     //操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
	Payload      []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Timestamp    int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //毫秒时间戳
	ProductID    string `protobuf:"bytes,5,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName   string `protobuf:"bytes,6,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Explain      string `protobuf:"bytes,7,opt,name=explain,proto3" json:"explain,omitempty"`           //内部使用的拓展字段
	ProtocolCode string `protobuf:"bytes,8,opt,name=protocolCode,proto3" json:"protocolCode,omitempty"` //如果有该字段则回复的时候也会带上该字段
}

func (x *PublishMsg) Reset() {
	*x = PublishMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMsg) ProtoMessage() {}

func (x *PublishMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMsg.ProtoReflect.Descriptor instead.
func (*PublishMsg) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{13}
}

func (x *PublishMsg) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *PublishMsg) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublishMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PublishMsg) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PublishMsg) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PublishMsg) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PublishMsg) GetExplain() string {
	if x != nil {
		return x.Explain
	}
	return ""
}

func (x *PublishMsg) GetProtocolCode() string {
	if x != nil {
		return x.ProtocolCode
	}
	return ""
}

type OtaModuleInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProductID string    `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *OtaModuleInfoIndexReq) Reset() {
	*x = OtaModuleInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaModuleInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaModuleInfoIndexReq) ProtoMessage() {}

func (x *OtaModuleInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaModuleInfoIndexReq.ProtoReflect.Descriptor instead.
func (*OtaModuleInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{14}
}

func (x *OtaModuleInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *OtaModuleInfoIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaModuleInfoIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type OtaModuleInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*OtaModuleInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *OtaModuleInfoIndexResp) Reset() {
	*x = OtaModuleInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaModuleInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaModuleInfoIndexResp) ProtoMessage() {}

func (x *OtaModuleInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaModuleInfoIndexResp.ProtoReflect.Descriptor instead.
func (*OtaModuleInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{15}
}

func (x *OtaModuleInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OtaModuleInfoIndexResp) GetList() []*OtaModuleInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type OtaModuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Desc        string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	ProductID   string `protobuf:"bytes,5,opt,name=productID,proto3" json:"productID,omitempty"`
	CreatedTime int64  `protobuf:"varint,6,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
}

func (x *OtaModuleInfo) Reset() {
	*x = OtaModuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaModuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaModuleInfo) ProtoMessage() {}

func (x *OtaModuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaModuleInfo.ProtoReflect.Descriptor instead.
func (*OtaModuleInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{16}
}

func (x *OtaModuleInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OtaModuleInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OtaModuleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaModuleInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OtaModuleInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaModuleInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type ProductInitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repeated string initType =1;//thing:物模型
	ProductIDs []string `protobuf:"bytes,2,rep,name=productIDs,proto3" json:"productIDs,omitempty"` //产品id,不填初始化所有产品
}

func (x *ProductInitReq) Reset() {
	*x = ProductInitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInitReq) ProtoMessage() {}

func (x *ProductInitReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInitReq.ProtoReflect.Descriptor instead.
func (*ProductInitReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{17}
}

func (x *ProductInitReq) GetProductIDs() []string {
	if x != nil {
		return x.ProductIDs
	}
	return nil
}

type DeviceModuleVersionReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //填id或者以下三个参数
	ProductID  string `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ModuleCode string `protobuf:"bytes,4,opt,name=moduleCode,proto3" json:"moduleCode,omitempty"`
}

func (x *DeviceModuleVersionReadReq) Reset() {
	*x = DeviceModuleVersionReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModuleVersionReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModuleVersionReadReq) ProtoMessage() {}

func (x *DeviceModuleVersionReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModuleVersionReadReq.ProtoReflect.Descriptor instead.
func (*DeviceModuleVersionReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceModuleVersionReadReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceModuleVersionReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceModuleVersionReadReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceModuleVersionReadReq) GetModuleCode() string {
	if x != nil {
		return x.ModuleCode
	}
	return ""
}

type DeviceModuleVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductID  string `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ModuleCode string `protobuf:"bytes,4,opt,name=moduleCode,proto3" json:"moduleCode,omitempty"`
	Version    string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeviceModuleVersion) Reset() {
	*x = DeviceModuleVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModuleVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModuleVersion) ProtoMessage() {}

func (x *DeviceModuleVersion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModuleVersion.ProtoReflect.Descriptor instead.
func (*DeviceModuleVersion) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{19}
}

func (x *DeviceModuleVersion) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceModuleVersion) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceModuleVersion) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceModuleVersion) GetModuleCode() string {
	if x != nil {
		return x.ModuleCode
	}
	return ""
}

func (x *DeviceModuleVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DeviceModuleVersionIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	ProductID  string    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string    `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ModuleCode string    `protobuf:"bytes,4,opt,name=moduleCode,proto3" json:"moduleCode,omitempty"`
}

func (x *DeviceModuleVersionIndexReq) Reset() {
	*x = DeviceModuleVersionIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModuleVersionIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModuleVersionIndexReq) ProtoMessage() {}

func (x *DeviceModuleVersionIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModuleVersionIndexReq.ProtoReflect.Descriptor instead.
func (*DeviceModuleVersionIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{20}
}

func (x *DeviceModuleVersionIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DeviceModuleVersionIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceModuleVersionIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceModuleVersionIndexReq) GetModuleCode() string {
	if x != nil {
		return x.ModuleCode
	}
	return ""
}

type DeviceModuleVersionIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*DeviceModuleVersion `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceModuleVersionIndexResp) Reset() {
	*x = DeviceModuleVersionIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModuleVersionIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModuleVersionIndexResp) ProtoMessage() {}

func (x *DeviceModuleVersionIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModuleVersionIndexResp.ProtoReflect.Descriptor instead.
func (*DeviceModuleVersionIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{21}
}

func (x *DeviceModuleVersionIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DeviceModuleVersionIndexResp) GetList() []*DeviceModuleVersion {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceMoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old        *DeviceCore `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`               //需要转移的设备
	New        *DeviceCore `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`               //转移的对象
	WithTarget []string    `protobuf:"bytes,3,rep,name=withTarget,proto3" json:"withTarget,omitempty"` //设备配置-profile,schemaAlias:profile
}

func (x *DeviceMoveReq) Reset() {
	*x = DeviceMoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMoveReq) ProtoMessage() {}

func (x *DeviceMoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMoveReq.ProtoReflect.Descriptor instead.
func (*DeviceMoveReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{22}
}

func (x *DeviceMoveReq) GetOld() *DeviceCore {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *DeviceMoveReq) GetNew() *DeviceCore {
	if x != nil {
		return x.New
	}
	return nil
}

func (x *DeviceMoveReq) GetWithTarget() []string {
	if x != nil {
		return x.WithTarget
	}
	return nil
}

type DeviceResetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device       *DeviceCore `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`              //设备信息
	Log          bool        `protobuf:"varint,2,opt,name=log,proto3" json:"log,omitempty"`                   //日志清除
	DeviceSchema bool        `protobuf:"varint,3,opt,name=deviceSchema,proto3" json:"deviceSchema,omitempty"` //设备物模型定义清除
	Bind         bool        `protobuf:"varint,4,opt,name=bind,proto3" json:"bind,omitempty"`                 //绑定关系解绑
	Info         bool        `protobuf:"varint,5,opt,name=info,proto3" json:"info,omitempty"`                 //设备信息恢复出厂设置,包含过期时间,名称,设备配置等
}

func (x *DeviceResetReq) Reset() {
	*x = DeviceResetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceResetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceResetReq) ProtoMessage() {}

func (x *DeviceResetReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceResetReq.ProtoReflect.Descriptor instead.
func (*DeviceResetReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{23}
}

func (x *DeviceResetReq) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceResetReq) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

func (x *DeviceResetReq) GetDeviceSchema() bool {
	if x != nil {
		return x.DeviceSchema
	}
	return false
}

func (x *DeviceResetReq) GetBind() bool {
	if x != nil {
		return x.Bind
	}
	return false
}

func (x *DeviceResetReq) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeviceTransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device       *DeviceCore   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`              //设备信息
	Devices      []*DeviceCore `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`            //设备信息
	SrcProjectID int64         `protobuf:"varint,3,opt,name=srcProjectID,proto3" json:"srcProjectID,omitempty"` //指定原来的项目ID,不写使用头
	TransferTo   int64         `protobuf:"varint,4,opt,name=transferTo,proto3" json:"transferTo,omitempty"`     //转让给: 1: 某个人 2: 自己的某个项目
	UserID       int64         `protobuf:"varint,5,opt,name=userID,proto3" json:"userID,omitempty"`             //用户id
	ProjectID    int64         `protobuf:"varint,6,opt,name=projectID,proto3" json:"projectID,omitempty"`       //项目id
	AreaID       int64         `protobuf:"varint,7,opt,name=areaID,proto3" json:"areaID,omitempty"`             //转移到项目时指定区域ID
	IsCleanData  int64         `protobuf:"varint,8,opt,name=isCleanData,proto3" json:"isCleanData,omitempty"`   //是否清除数据:1是 2否
}

func (x *DeviceTransferReq) Reset() {
	*x = DeviceTransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTransferReq) ProtoMessage() {}

func (x *DeviceTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTransferReq.ProtoReflect.Descriptor instead.
func (*DeviceTransferReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{24}
}

func (x *DeviceTransferReq) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceTransferReq) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *DeviceTransferReq) GetSrcProjectID() int64 {
	if x != nil {
		return x.SrcProjectID
	}
	return 0
}

func (x *DeviceTransferReq) GetTransferTo() int64 {
	if x != nil {
		return x.TransferTo
	}
	return 0
}

func (x *DeviceTransferReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *DeviceTransferReq) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *DeviceTransferReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *DeviceTransferReq) GetIsCleanData() int64 {
	if x != nil {
		return x.IsCleanData
	}
	return 0
}

type UserDeviceShareReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Device *DeviceCore `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"` //设备信息
}

func (x *UserDeviceShareReadReq) Reset() {
	*x = UserDeviceShareReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareReadReq) ProtoMessage() {}

func (x *UserDeviceShareReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareReadReq.ProtoReflect.Descriptor instead.
func (*UserDeviceShareReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{25}
}

func (x *UserDeviceShareReadReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserDeviceShareReadReq) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

type UserDeviceShareIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   *PageInfo   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Device *DeviceCore `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"` //设备信息
}

func (x *UserDeviceShareIndexReq) Reset() {
	*x = UserDeviceShareIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareIndexReq) ProtoMessage() {}

func (x *UserDeviceShareIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareIndexReq.ProtoReflect.Descriptor instead.
func (*UserDeviceShareIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{26}
}

func (x *UserDeviceShareIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UserDeviceShareIndexReq) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

type UserDeviceShareIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*UserDeviceShareInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *UserDeviceShareIndexResp) Reset() {
	*x = UserDeviceShareIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareIndexResp) ProtoMessage() {}

func (x *UserDeviceShareIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareIndexResp.ProtoReflect.Descriptor instead.
func (*UserDeviceShareIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{27}
}

func (x *UserDeviceShareIndexResp) GetList() []*UserDeviceShareInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *UserDeviceShareIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UserDeviceShareMultiDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	ProjectID int64   `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"` //指定项目的情况下删除分享的所有设备
}

func (x *UserDeviceShareMultiDeleteReq) Reset() {
	*x = UserDeviceShareMultiDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareMultiDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareMultiDeleteReq) ProtoMessage() {}

func (x *UserDeviceShareMultiDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareMultiDeleteReq.ProtoReflect.Descriptor instead.
func (*UserDeviceShareMultiDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{28}
}

func (x *UserDeviceShareMultiDeleteReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UserDeviceShareMultiDeleteReq) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type UserDeviceShareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Device            *DeviceCore            `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`                                                                                                 //设备信息
	SharedUserID      int64                  `protobuf:"varint,3,opt,name=sharedUserID,proto3" json:"sharedUserID,omitempty"`                                                                                    //分享的对象
	SharedUserAccount string                 `protobuf:"bytes,7,opt,name=sharedUserAccount,proto3" json:"sharedUserAccount,omitempty"`                                                                           //分享的账号(只读)
	SchemaPerm        map[string]*SharePerm  `protobuf:"bytes,4,rep,name=schemaPerm,proto3" json:"schemaPerm,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //物模型权限,只需要填写需要授权并授权的物模型id
	AccessPerm        map[string]*SharePerm  `protobuf:"bytes,5,rep,name=accessPerm,proto3" json:"accessPerm,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //操作权限 hubLog:设备消息记录,ota:ota升级权限,deviceTiming:设备定时
	AuthType          int64                  `protobuf:"varint,9,opt,name=authType,proto3" json:"authType,omitempty"`                                                                                            //授权类型:1:全部授权 2:部分授权
	ProjectID         int64                  `protobuf:"varint,6,opt,name=projectID,proto3" json:"projectID,omitempty"`                                                                                          //设备归属的项目
	ExpTime           *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=expTime,proto3" json:"expTime,omitempty"`                                                                                              //到期时间,如果为0,则不限制
	CreatedTime       int64                  `protobuf:"varint,8,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
}

func (x *UserDeviceShareInfo) Reset() {
	*x = UserDeviceShareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareInfo) ProtoMessage() {}

func (x *UserDeviceShareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareInfo.ProtoReflect.Descriptor instead.
func (*UserDeviceShareInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{29}
}

func (x *UserDeviceShareInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserDeviceShareInfo) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UserDeviceShareInfo) GetSharedUserID() int64 {
	if x != nil {
		return x.SharedUserID
	}
	return 0
}

func (x *UserDeviceShareInfo) GetSharedUserAccount() string {
	if x != nil {
		return x.SharedUserAccount
	}
	return ""
}

func (x *UserDeviceShareInfo) GetSchemaPerm() map[string]*SharePerm {
	if x != nil {
		return x.SchemaPerm
	}
	return nil
}

func (x *UserDeviceShareInfo) GetAccessPerm() map[string]*SharePerm {
	if x != nil {
		return x.AccessPerm
	}
	return nil
}

func (x *UserDeviceShareInfo) GetAuthType() int64 {
	if x != nil {
		return x.AuthType
	}
	return 0
}

func (x *UserDeviceShareInfo) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *UserDeviceShareInfo) GetExpTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExpTime
	}
	return nil
}

func (x *UserDeviceShareInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type SharePerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perm int64 `protobuf:"varint,1,opt,name=perm,proto3" json:"perm,omitempty"` //1:r(只读) 3(默认):rw(可读可写)
}

func (x *SharePerm) Reset() {
	*x = SharePerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharePerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharePerm) ProtoMessage() {}

func (x *SharePerm) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharePerm.ProtoReflect.Descriptor instead.
func (*SharePerm) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{30}
}

func (x *SharePerm) GetPerm() int64 {
	if x != nil {
		return x.Perm
	}
	return 0
}

type DeviceShareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID   string                  `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id
	ProductName string                  `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"` //产品名称 只读
	DeviceName  string                  `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`   //设备名称
	ProductImg  string                  `protobuf:"bytes,3,opt,name=productImg,proto3" json:"productImg,omitempty"`   //产品图片
	DeviceAlias *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=deviceAlias,proto3" json:"deviceAlias,omitempty"` //设备别名 读写
}

func (x *DeviceShareInfo) Reset() {
	*x = DeviceShareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceShareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceShareInfo) ProtoMessage() {}

func (x *DeviceShareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceShareInfo.ProtoReflect.Descriptor instead.
func (*DeviceShareInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{31}
}

func (x *DeviceShareInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceShareInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *DeviceShareInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceShareInfo) GetProductImg() string {
	if x != nil {
		return x.ProductImg
	}
	return ""
}

func (x *DeviceShareInfo) GetDeviceAlias() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceAlias
	}
	return nil
}

type UserDeviceShareMultiInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices     []*DeviceShareInfo    `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`                                                                                               //设备信息
	SchemaPerm  map[string]*SharePerm `protobuf:"bytes,2,rep,name=schemaPerm,proto3" json:"schemaPerm,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //物模型权限,只需要填写需要授权并授权的物模型id
	AccessPerm  map[string]*SharePerm `protobuf:"bytes,3,rep,name=accessPerm,proto3" json:"accessPerm,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //操作权限 hubLog:设备消息记录,ota:ota升级权限,deviceTiming:设备定时
	AuthType    int64                 `protobuf:"varint,4,opt,name=authType,proto3" json:"authType,omitempty"`                                                                                            //授权类型:1:全部授权 2:部分授权
	ProjectID   int64                 `protobuf:"varint,5,opt,name=projectID,proto3" json:"projectID,omitempty"`                                                                                          //设备归属的项目
	ExpTime     int64                 `protobuf:"varint,6,opt,name=expTime,proto3" json:"expTime,omitempty"`                                                                                              //有效期,如果为0,则不限制
	CreatedTime int64                 `protobuf:"varint,7,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UserID      int64                 `protobuf:"varint,8,opt,name=userID,proto3" json:"userID,omitempty"` //生成分享的人id
}

func (x *UserDeviceShareMultiInfo) Reset() {
	*x = UserDeviceShareMultiInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareMultiInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareMultiInfo) ProtoMessage() {}

func (x *UserDeviceShareMultiInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareMultiInfo.ProtoReflect.Descriptor instead.
func (*UserDeviceShareMultiInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{32}
}

func (x *UserDeviceShareMultiInfo) GetDevices() []*DeviceShareInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *UserDeviceShareMultiInfo) GetSchemaPerm() map[string]*SharePerm {
	if x != nil {
		return x.SchemaPerm
	}
	return nil
}

func (x *UserDeviceShareMultiInfo) GetAccessPerm() map[string]*SharePerm {
	if x != nil {
		return x.AccessPerm
	}
	return nil
}

func (x *UserDeviceShareMultiInfo) GetAuthType() int64 {
	if x != nil {
		return x.AuthType
	}
	return 0
}

func (x *UserDeviceShareMultiInfo) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *UserDeviceShareMultiInfo) GetExpTime() int64 {
	if x != nil {
		return x.ExpTime
	}
	return 0
}

func (x *UserDeviceShareMultiInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *UserDeviceShareMultiInfo) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type UserDeviceShareMultiToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareToken string `protobuf:"bytes,1,opt,name=shareToken,proto3" json:"shareToken,omitempty"`
}

func (x *UserDeviceShareMultiToken) Reset() {
	*x = UserDeviceShareMultiToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareMultiToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareMultiToken) ProtoMessage() {}

func (x *UserDeviceShareMultiToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareMultiToken.ProtoReflect.Descriptor instead.
func (*UserDeviceShareMultiToken) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{33}
}

func (x *UserDeviceShareMultiToken) GetShareToken() string {
	if x != nil {
		return x.ShareToken
	}
	return ""
}

type UserDeviceShareMultiAcceptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShareToken        string        `protobuf:"bytes,1,opt,name=shareToken,proto3" json:"shareToken,omitempty"`
	SharedUserID      int64         `protobuf:"varint,3,opt,name=sharedUserID,proto3" json:"sharedUserID,omitempty"`          //分享的对象
	SharedUserAccount string        `protobuf:"bytes,2,opt,name=sharedUserAccount,proto3" json:"sharedUserAccount,omitempty"` //分享的账号(只读)
	Devices           []*DeviceCore `protobuf:"bytes,4,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *UserDeviceShareMultiAcceptReq) Reset() {
	*x = UserDeviceShareMultiAcceptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareMultiAcceptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareMultiAcceptReq) ProtoMessage() {}

func (x *UserDeviceShareMultiAcceptReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareMultiAcceptReq.ProtoReflect.Descriptor instead.
func (*UserDeviceShareMultiAcceptReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{34}
}

func (x *UserDeviceShareMultiAcceptReq) GetShareToken() string {
	if x != nil {
		return x.ShareToken
	}
	return ""
}

func (x *UserDeviceShareMultiAcceptReq) GetSharedUserID() int64 {
	if x != nil {
		return x.SharedUserID
	}
	return 0
}

func (x *UserDeviceShareMultiAcceptReq) GetSharedUserAccount() string {
	if x != nil {
		return x.SharedUserAccount
	}
	return ""
}

func (x *UserDeviceShareMultiAcceptReq) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

type UserDeviceCollectSave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DeviceCore `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *UserDeviceCollectSave) Reset() {
	*x = UserDeviceCollectSave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceCollectSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceCollectSave) ProtoMessage() {}

func (x *UserDeviceCollectSave) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceCollectSave.ProtoReflect.Descriptor instead.
func (*UserDeviceCollectSave) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{35}
}

func (x *UserDeviceCollectSave) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

type ProductCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentID        int64                   `protobuf:"varint,2,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Name            string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	HeadImg         string                  `protobuf:"bytes,4,opt,name=headImg,proto3" json:"headImg,omitempty"`
	IsUpdateHeadImg bool                    `protobuf:"varint,5,opt,name=isUpdateHeadImg,proto3" json:"isUpdateHeadImg,omitempty"` //只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
	Desc            *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	IdPath          []int64                 `protobuf:"varint,9,rep,packed,name=idPath,proto3" json:"idPath,omitempty"`
	IsLeaf          int64                   `protobuf:"varint,10,opt,name=isLeaf,proto3" json:"isLeaf,omitempty"`
	DeviceCount     int64                   `protobuf:"varint,11,opt,name=deviceCount,proto3" json:"deviceCount,omitempty"`
	Children        []*ProductCategory      `protobuf:"bytes,7,rep,name=children,proto3" json:"children,omitempty"` //子节点
}

func (x *ProductCategory) Reset() {
	*x = ProductCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategory) ProtoMessage() {}

func (x *ProductCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategory.ProtoReflect.Descriptor instead.
func (*ProductCategory) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{36}
}

func (x *ProductCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductCategory) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *ProductCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCategory) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *ProductCategory) GetIsUpdateHeadImg() bool {
	if x != nil {
		return x.IsUpdateHeadImg
	}
	return false
}

func (x *ProductCategory) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *ProductCategory) GetIdPath() []int64 {
	if x != nil {
		return x.IdPath
	}
	return nil
}

func (x *ProductCategory) GetIsLeaf() int64 {
	if x != nil {
		return x.IsLeaf
	}
	return 0
}

func (x *ProductCategory) GetDeviceCount() int64 {
	if x != nil {
		return x.DeviceCount
	}
	return 0
}

func (x *ProductCategory) GetChildren() []*ProductCategory {
	if x != nil {
		return x.Children
	}
	return nil
}

type ProductCategorySchemaIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifiers []string `protobuf:"bytes,5,rep,name=identifiers,proto3" json:"identifiers,omitempty"` //过滤标识符列表
}

func (x *ProductCategorySchemaIndexResp) Reset() {
	*x = ProductCategorySchemaIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategorySchemaIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategorySchemaIndexResp) ProtoMessage() {}

func (x *ProductCategorySchemaIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategorySchemaIndexResp.ProtoReflect.Descriptor instead.
func (*ProductCategorySchemaIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{37}
}

func (x *ProductCategorySchemaIndexResp) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

type ProductCategorySchemaIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCategoryID int64 `protobuf:"varint,1,opt,name=productCategoryID,proto3" json:"productCategoryID,omitempty"`
	WithFather        bool  `protobuf:"varint,8,opt,name=withFather,proto3" json:"withFather,omitempty"` //同时返回父节点的物模型
}

func (x *ProductCategorySchemaIndexReq) Reset() {
	*x = ProductCategorySchemaIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategorySchemaIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategorySchemaIndexReq) ProtoMessage() {}

func (x *ProductCategorySchemaIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategorySchemaIndexReq.ProtoReflect.Descriptor instead.
func (*ProductCategorySchemaIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{38}
}

func (x *ProductCategorySchemaIndexReq) GetProductCategoryID() int64 {
	if x != nil {
		return x.ProductCategoryID
	}
	return 0
}

func (x *ProductCategorySchemaIndexReq) GetWithFather() bool {
	if x != nil {
		return x.WithFather
	}
	return false
}

type ProductCategorySchemaMultiSaveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCategoryID int64    `protobuf:"varint,1,opt,name=productCategoryID,proto3" json:"productCategoryID,omitempty"`
	Identifiers       []string `protobuf:"bytes,5,rep,name=identifiers,proto3" json:"identifiers,omitempty"` //过滤标识符列表
}

func (x *ProductCategorySchemaMultiSaveReq) Reset() {
	*x = ProductCategorySchemaMultiSaveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategorySchemaMultiSaveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategorySchemaMultiSaveReq) ProtoMessage() {}

func (x *ProductCategorySchemaMultiSaveReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategorySchemaMultiSaveReq.ProtoReflect.Descriptor instead.
func (*ProductCategorySchemaMultiSaveReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{39}
}

func (x *ProductCategorySchemaMultiSaveReq) GetProductCategoryID() int64 {
	if x != nil {
		return x.ProductCategoryID
	}
	return 0
}

func (x *ProductCategorySchemaMultiSaveReq) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

type ProductCategoryIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"` //分页信息 只获取一个则不填
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` //过滤名字
	ParentID  int64     `protobuf:"varint,3,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Ids       []int64   `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	ProjectID int64     `protobuf:"varint,5,opt,name=projectID,proto3" json:"projectID,omitempty"` //项目id,只获取项目下有设备的
}

func (x *ProductCategoryIndexReq) Reset() {
	*x = ProductCategoryIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategoryIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryIndexReq) ProtoMessage() {}

func (x *ProductCategoryIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryIndexReq.ProtoReflect.Descriptor instead.
func (*ProductCategoryIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{40}
}

func (x *ProductCategoryIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProductCategoryIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCategoryIndexReq) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *ProductCategoryIndexReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ProductCategoryIndexReq) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

type ProductCategoryIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProductCategory `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //产品信息
	Total int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *ProductCategoryIndexResp) Reset() {
	*x = ProductCategoryIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategoryIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryIndexResp) ProtoMessage() {}

func (x *ProductCategoryIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryIndexResp.ProtoReflect.Descriptor instead.
func (*ProductCategoryIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{41}
}

func (x *ProductCategoryIndexResp) GetList() []*ProductCategory {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProductCategoryIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProtocolScriptDebugReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerDir   int64       `protobuf:"varint,2,opt,name=triggerDir,proto3" json:"triggerDir,omitempty"`     //1:up 2:down
	TriggerTimer int64       `protobuf:"varint,3,opt,name=triggerTimer,proto3" json:"triggerTimer,omitempty"` //收到前处理1:before 2:after
	Script       string      `protobuf:"bytes,6,opt,name=script,proto3" json:"script,omitempty"`              //脚本内容
	Req          *PublishMsg `protobuf:"bytes,8,opt,name=req,proto3" json:"req,omitempty"`                    //请求
	Resp         *PublishMsg `protobuf:"bytes,9,opt,name=resp,proto3" json:"resp,omitempty"`                  //回复
}

func (x *ProtocolScriptDebugReq) Reset() {
	*x = ProtocolScriptDebugReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolScriptDebugReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolScriptDebugReq) ProtoMessage() {}

func (x *ProtocolScriptDebugReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolScriptDebugReq.ProtoReflect.Descriptor instead.
func (*ProtocolScriptDebugReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{42}
}

func (x *ProtocolScriptDebugReq) GetTriggerDir() int64 {
	if x != nil {
		return x.TriggerDir
	}
	return 0
}

func (x *ProtocolScriptDebugReq) GetTriggerTimer() int64 {
	if x != nil {
		return x.TriggerTimer
	}
	return 0
}

func (x *ProtocolScriptDebugReq) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ProtocolScriptDebugReq) GetReq() *PublishMsg {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *ProtocolScriptDebugReq) GetResp() *PublishMsg {
	if x != nil {
		return x.Resp
	}
	return nil
}

type ProtocolScriptDebugResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Out  *PublishMsg `protobuf:"bytes,1,opt,name=out,proto3" json:"out,omitempty"`
	Logs []string    `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *ProtocolScriptDebugResp) Reset() {
	*x = ProtocolScriptDebugResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolScriptDebugResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolScriptDebugResp) ProtoMessage() {}

func (x *ProtocolScriptDebugResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolScriptDebugResp.ProtoReflect.Descriptor instead.
func (*ProtocolScriptDebugResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{43}
}

func (x *ProtocolScriptDebugResp) GetOut() *PublishMsg {
	if x != nil {
		return x.Out
	}
	return nil
}

func (x *ProtocolScriptDebugResp) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

type ProtocolScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                   //名称
	TriggerDir    int64                   `protobuf:"varint,3,opt,name=triggerDir,proto3" json:"triggerDir,omitempty"`      //1:up 2:down
	TriggerTimer  int64                   `protobuf:"varint,4,opt,name=triggerTimer,proto3" json:"triggerTimer,omitempty"`  //收到前处理1:before 2:after
	TriggerHandle string                  `protobuf:"bytes,5,opt,name=triggerHandle,proto3" json:"triggerHandle,omitempty"` //对应 mqtt topic的第一个 thing ota config 等等
	TriggerType   string                  `protobuf:"bytes,6,opt,name=triggerType,proto3" json:"triggerType,omitempty"`     // 操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
	Desc          *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=desc,proto3" json:"desc,omitempty"`                   //描述
	Script        string                  `protobuf:"bytes,8,opt,name=script,proto3" json:"script,omitempty"`               //脚本内容
	Status        int64                   `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`              //状态:是否启用
	CreatedTime   int64                   `protobuf:"varint,10,opt,name=createdTime,proto3" json:"createdTime,omitempty"`   //创建时间
}

func (x *ProtocolScript) Reset() {
	*x = ProtocolScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolScript) ProtoMessage() {}

func (x *ProtocolScript) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolScript.ProtoReflect.Descriptor instead.
func (*ProtocolScript) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{44}
}

func (x *ProtocolScript) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtocolScript) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtocolScript) GetTriggerDir() int64 {
	if x != nil {
		return x.TriggerDir
	}
	return 0
}

func (x *ProtocolScript) GetTriggerTimer() int64 {
	if x != nil {
		return x.TriggerTimer
	}
	return 0
}

func (x *ProtocolScript) GetTriggerHandle() string {
	if x != nil {
		return x.TriggerHandle
	}
	return ""
}

func (x *ProtocolScript) GetTriggerType() string {
	if x != nil {
		return x.TriggerType
	}
	return ""
}

func (x *ProtocolScript) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *ProtocolScript) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *ProtocolScript) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProtocolScript) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type ProtocolScriptIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Name          string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TriggerDir    int64     `protobuf:"varint,3,opt,name=triggerDir,proto3" json:"triggerDir,omitempty"`     //1:up 2:down
	TriggerTimer  int64     `protobuf:"varint,4,opt,name=triggerTimer,proto3" json:"triggerTimer,omitempty"` //收到前处理1:before 2:after
	TriggerHandle string    `protobuf:"bytes,5,opt,name=triggerHandle,proto3" json:"triggerHandle,omitempty"`
	TriggerType   string    `protobuf:"bytes,6,opt,name=triggerType,proto3" json:"triggerType,omitempty"`
	Status        int64     `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"` //状态:是否启用
}

func (x *ProtocolScriptIndexReq) Reset() {
	*x = ProtocolScriptIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolScriptIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolScriptIndexReq) ProtoMessage() {}

func (x *ProtocolScriptIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolScriptIndexReq.ProtoReflect.Descriptor instead.
func (*ProtocolScriptIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{45}
}

func (x *ProtocolScriptIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProtocolScriptIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtocolScriptIndexReq) GetTriggerDir() int64 {
	if x != nil {
		return x.TriggerDir
	}
	return 0
}

func (x *ProtocolScriptIndexReq) GetTriggerTimer() int64 {
	if x != nil {
		return x.TriggerTimer
	}
	return 0
}

func (x *ProtocolScriptIndexReq) GetTriggerHandle() string {
	if x != nil {
		return x.TriggerHandle
	}
	return ""
}

func (x *ProtocolScriptIndexReq) GetTriggerType() string {
	if x != nil {
		return x.TriggerType
	}
	return ""
}

func (x *ProtocolScriptIndexReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ProtocolScriptIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProtocolScript `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ProtocolScriptIndexResp) Reset() {
	*x = ProtocolScriptIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolScriptIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolScriptIndexResp) ProtoMessage() {}

func (x *ProtocolScriptIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolScriptIndexResp.ProtoReflect.Descriptor instead.
func (*ProtocolScriptIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{46}
}

func (x *ProtocolScriptIndexResp) GetList() []*ProtocolScript {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProtocolScriptIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProtocolScriptDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TriggerSrc  int64           `protobuf:"varint,2,opt,name=triggerSrc,proto3" json:"triggerSrc,omitempty"` //产品:1 设备:2
	ProductID   string          `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName  string          `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ScriptID    int64           `protobuf:"varint,5,opt,name=scriptID,proto3" json:"scriptID,omitempty"`       //脚本对应的ID
	Priority    int64           `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`       //执行优先级 大于0
	Status      int64           `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`           //状态:是否启用
	CreatedTime int64           `protobuf:"varint,8,opt,name=createdTime,proto3" json:"createdTime,omitempty"` //创建时间
	Script      *ProtocolScript `protobuf:"bytes,9,opt,name=script,proto3" json:"script,omitempty"`            //脚本信息
	Product     *ProductInfo    `protobuf:"bytes,10,opt,name=product,proto3" json:"product,omitempty"`         //withDevice时,绑定的是产品返回
	Device      *DeviceInfo     `protobuf:"bytes,11,opt,name=device,proto3" json:"device,omitempty"`           //withDevice时,绑定的是设备返回
}

func (x *ProtocolScriptDevice) Reset() {
	*x = ProtocolScriptDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolScriptDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolScriptDevice) ProtoMessage() {}

func (x *ProtocolScriptDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolScriptDevice.ProtoReflect.Descriptor instead.
func (*ProtocolScriptDevice) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{47}
}

func (x *ProtocolScriptDevice) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtocolScriptDevice) GetTriggerSrc() int64 {
	if x != nil {
		return x.TriggerSrc
	}
	return 0
}

func (x *ProtocolScriptDevice) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProtocolScriptDevice) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *ProtocolScriptDevice) GetScriptID() int64 {
	if x != nil {
		return x.ScriptID
	}
	return 0
}

func (x *ProtocolScriptDevice) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ProtocolScriptDevice) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProtocolScriptDevice) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *ProtocolScriptDevice) GetScript() *ProtocolScript {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *ProtocolScriptDevice) GetProduct() *ProductInfo {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ProtocolScriptDevice) GetDevice() *DeviceInfo {
	if x != nil {
		return x.Device
	}
	return nil
}

type ProtocolScriptDeviceIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	TriggerSrc int64     `protobuf:"varint,2,opt,name=triggerSrc,proto3" json:"triggerSrc,omitempty"` //product:1 device:2
	ProductID  string    `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`    //
	DeviceName string    `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`  //
	Status     int64     `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`         //状态:是否启用
	ScriptID   int64     `protobuf:"varint,6,opt,name=scriptID,proto3" json:"scriptID,omitempty"`     //脚本对应的ID
	WithDevice bool      `protobuf:"varint,7,opt,name=withDevice,proto3" json:"withDevice,omitempty"` //同时返回产品或设备信息
	WithScript bool      `protobuf:"varint,8,opt,name=withScript,proto3" json:"withScript,omitempty"` // 同时返回脚本信息
}

func (x *ProtocolScriptDeviceIndexReq) Reset() {
	*x = ProtocolScriptDeviceIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolScriptDeviceIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolScriptDeviceIndexReq) ProtoMessage() {}

func (x *ProtocolScriptDeviceIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolScriptDeviceIndexReq.ProtoReflect.Descriptor instead.
func (*ProtocolScriptDeviceIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{48}
}

func (x *ProtocolScriptDeviceIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProtocolScriptDeviceIndexReq) GetTriggerSrc() int64 {
	if x != nil {
		return x.TriggerSrc
	}
	return 0
}

func (x *ProtocolScriptDeviceIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProtocolScriptDeviceIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *ProtocolScriptDeviceIndexReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProtocolScriptDeviceIndexReq) GetScriptID() int64 {
	if x != nil {
		return x.ScriptID
	}
	return 0
}

func (x *ProtocolScriptDeviceIndexReq) GetWithDevice() bool {
	if x != nil {
		return x.WithDevice
	}
	return false
}

func (x *ProtocolScriptDeviceIndexReq) GetWithScript() bool {
	if x != nil {
		return x.WithScript
	}
	return false
}

type ProtocolScriptDeviceIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProtocolScriptDevice `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ProtocolScriptDeviceIndexResp) Reset() {
	*x = ProtocolScriptDeviceIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolScriptDeviceIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolScriptDeviceIndexResp) ProtoMessage() {}

func (x *ProtocolScriptDeviceIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolScriptDeviceIndexResp.ProtoReflect.Descriptor instead.
func (*ProtocolScriptDeviceIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{49}
}

func (x *ProtocolScriptDeviceIndexResp) GetList() []*ProtocolScriptDevice {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProtocolScriptDeviceIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProtocolInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Name          string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code          string    `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                   //  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
	Type          string    `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                   //协议类型
	TransProtocol string    `protobuf:"bytes,5,opt,name=transProtocol,proto3" json:"transProtocol,omitempty"` // 传输协议: mqtt,tcp,udp
	NotCodes      []string  `protobuf:"bytes,6,rep,name=notCodes,proto3" json:"notCodes,omitempty"`           //排除的协议包
	Codes         []string  `protobuf:"bytes,7,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *ProtocolInfoIndexReq) Reset() {
	*x = ProtocolInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolInfoIndexReq) ProtoMessage() {}

func (x *ProtocolInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolInfoIndexReq.ProtoReflect.Descriptor instead.
func (*ProtocolInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{50}
}

func (x *ProtocolInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProtocolInfoIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtocolInfoIndexReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProtocolInfoIndexReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProtocolInfoIndexReq) GetTransProtocol() string {
	if x != nil {
		return x.TransProtocol
	}
	return ""
}

func (x *ProtocolInfoIndexReq) GetNotCodes() []string {
	if x != nil {
		return x.NotCodes
	}
	return nil
}

func (x *ProtocolInfoIndexReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type ProtocolInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProtocolInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ProtocolInfoIndexResp) Reset() {
	*x = ProtocolInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolInfoIndexResp) ProtoMessage() {}

func (x *ProtocolInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolInfoIndexResp.ProtoReflect.Descriptor instead.
func (*ProtocolInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{51}
}

func (x *ProtocolInfoIndexResp) GetList() []*ProtocolInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProtocolInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProtocolServiceIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Code string    `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"` //  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
}

func (x *ProtocolServiceIndexReq) Reset() {
	*x = ProtocolServiceIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolServiceIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolServiceIndexReq) ProtoMessage() {}

func (x *ProtocolServiceIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolServiceIndexReq.ProtoReflect.Descriptor instead.
func (*ProtocolServiceIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{52}
}

func (x *ProtocolServiceIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProtocolServiceIndexReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ProtocolServiceIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProtocolService `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ProtocolServiceIndexResp) Reset() {
	*x = ProtocolServiceIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolServiceIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolServiceIndexResp) ProtoMessage() {}

func (x *ProtocolServiceIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolServiceIndexResp.ProtoReflect.Descriptor instead.
func (*ProtocolServiceIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{53}
}

func (x *ProtocolServiceIndexResp) GetList() []*ProtocolService {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProtocolServiceIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProtocolService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`                //协议code
	Ip          string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`                    // 协议服务的ip地址
	Port        int64  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`               //监听的端口,如果没有填0即可
	Status      int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`           //服务状态
	UpdatedTime int64  `protobuf:"varint,6,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"` //更新时间
	CreatedTime int64  `protobuf:"varint,7,opt,name=createdTime,proto3" json:"createdTime,omitempty"` //首次加入时间
}

func (x *ProtocolService) Reset() {
	*x = ProtocolService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolService) ProtoMessage() {}

func (x *ProtocolService) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolService.ProtoReflect.Descriptor instead.
func (*ProtocolService) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{54}
}

func (x *ProtocolService) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtocolService) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProtocolService) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ProtocolService) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ProtocolService) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProtocolService) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *ProtocolService) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type ProtocolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code                string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                   //  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
	Type                string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                   //协议类型: 普通设备(默认):normal  音视频:media
	TransProtocol       string                 `protobuf:"bytes,5,opt,name=transProtocol,proto3" json:"transProtocol,omitempty"` // 传输协议: mqtt,tcp,udp
	Desc                string                 `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Endpoints           []string               `protobuf:"bytes,7,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	EtcdKey             string                 `protobuf:"bytes,8,opt,name=etcdKey,proto3" json:"etcdKey,omitempty"`
	IsEnableSyncProduct int64                  `protobuf:"varint,13,opt,name=isEnableSyncProduct,proto3" json:"isEnableSyncProduct,omitempty"` //是否支持主动同步产品信息
	IsEnableSyncDevice  int64                  `protobuf:"varint,14,opt,name=isEnableSyncDevice,proto3" json:"isEnableSyncDevice,omitempty"`   //是否支持主动同步设备信息
	ConfigFields        []*ProtocolConfigField `protobuf:"bytes,9,rep,name=configFields,proto3" json:"configFields,omitempty"`                 //配置字段列表,没有可以不传
	ConfigInfos         []*ProtocolConfigInfo  `protobuf:"bytes,10,rep,name=configInfos,proto3" json:"configInfos,omitempty"`                  //配置列表
	ProductFields       []*ProtocolConfigField `protobuf:"bytes,11,rep,name=productFields,proto3" json:"productFields,omitempty"`              //产品需要的配置字段列表
	DeviceFields        []*ProtocolConfigField `protobuf:"bytes,12,rep,name=deviceFields,proto3" json:"deviceFields,omitempty"`                //设备需要的配置字段列表
}

func (x *ProtocolInfo) Reset() {
	*x = ProtocolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolInfo) ProtoMessage() {}

func (x *ProtocolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolInfo.ProtoReflect.Descriptor instead.
func (*ProtocolInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{55}
}

func (x *ProtocolInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtocolInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtocolInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProtocolInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProtocolInfo) GetTransProtocol() string {
	if x != nil {
		return x.TransProtocol
	}
	return ""
}

func (x *ProtocolInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ProtocolInfo) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *ProtocolInfo) GetEtcdKey() string {
	if x != nil {
		return x.EtcdKey
	}
	return ""
}

func (x *ProtocolInfo) GetIsEnableSyncProduct() int64 {
	if x != nil {
		return x.IsEnableSyncProduct
	}
	return 0
}

func (x *ProtocolInfo) GetIsEnableSyncDevice() int64 {
	if x != nil {
		return x.IsEnableSyncDevice
	}
	return 0
}

func (x *ProtocolInfo) GetConfigFields() []*ProtocolConfigField {
	if x != nil {
		return x.ConfigFields
	}
	return nil
}

func (x *ProtocolInfo) GetConfigInfos() []*ProtocolConfigInfo {
	if x != nil {
		return x.ConfigInfos
	}
	return nil
}

func (x *ProtocolInfo) GetProductFields() []*ProtocolConfigField {
	if x != nil {
		return x.ProductFields
	}
	return nil
}

func (x *ProtocolInfo) GetDeviceFields() []*ProtocolConfigField {
	if x != nil {
		return x.DeviceFields
	}
	return nil
}

type ProtocolConfigField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Group      string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Key        string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Label      string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	IsRequired bool   `protobuf:"varint,5,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	Sort       int64  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ProtocolConfigField) Reset() {
	*x = ProtocolConfigField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolConfigField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolConfigField) ProtoMessage() {}

func (x *ProtocolConfigField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolConfigField.ProtoReflect.Descriptor instead.
func (*ProtocolConfigField) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{56}
}

func (x *ProtocolConfigField) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtocolConfigField) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ProtocolConfigField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ProtocolConfigField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ProtocolConfigField) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *ProtocolConfigField) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type ProtocolConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Config map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Desc   string            `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ProtocolConfigInfo) Reset() {
	*x = ProtocolConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolConfigInfo) ProtoMessage() {}

func (x *ProtocolConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolConfigInfo.ProtoReflect.Descriptor instead.
func (*ProtocolConfigInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{57}
}

func (x *ProtocolConfigInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtocolConfigInfo) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ProtocolConfigInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type ShadowIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ShadowIndex `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ShadowIndexResp) Reset() {
	*x = ShadowIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShadowIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowIndexResp) ProtoMessage() {}

func (x *ShadowIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowIndexResp.ProtoReflect.Descriptor instead.
func (*ShadowIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{58}
}

func (x *ShadowIndexResp) GetList() []*ShadowIndex {
	if x != nil {
		return x.List
	}
	return nil
}

// 设备的日志数据
type ShadowIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataID            string `protobuf:"bytes,1,opt,name=dataID,proto3" json:"dataID,omitempty"`                        //属性id
	Value             string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                          //获取到的值
	UpdatedDeviceTime int64  `protobuf:"varint,3,opt,name=updatedDeviceTime,proto3" json:"updatedDeviceTime,omitempty"` //更新到设备的时间
}

func (x *ShadowIndex) Reset() {
	*x = ShadowIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShadowIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowIndex) ProtoMessage() {}

func (x *ShadowIndex) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowIndex.ProtoReflect.Descriptor instead.
func (*ShadowIndex) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{59}
}

func (x *ShadowIndex) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *ShadowIndex) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ShadowIndex) GetUpdatedDeviceTime() int64 {
	if x != nil {
		return x.UpdatedDeviceTime
	}
	return 0
}

type PropertyGetReportSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string   `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id (必填)
	DeviceName string   `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名(必填)
	DataIDs    []string `protobuf:"bytes,3,rep,name=dataIDs,proto3" json:"dataIDs,omitempty"`       //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
}

func (x *PropertyGetReportSendReq) Reset() {
	*x = PropertyGetReportSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyGetReportSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyGetReportSendReq) ProtoMessage() {}

func (x *PropertyGetReportSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyGetReportSendReq.ProtoReflect.Descriptor instead.
func (*PropertyGetReportSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{60}
}

func (x *PropertyGetReportSendReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyGetReportSendReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyGetReportSendReq) GetDataIDs() []string {
	if x != nil {
		return x.DataIDs
	}
	return nil
}

type PropertyGetReportSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`           //设备返回状态码
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`              //返回状态
	MsgToken  string `protobuf:"bytes,3,opt,name=msgToken,proto3" json:"msgToken,omitempty"`    //调用id
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //上报时间戳(毫秒时间戳)
	Params    string `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`        //获取到的值
}

func (x *PropertyGetReportSendResp) Reset() {
	*x = PropertyGetReportSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyGetReportSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyGetReportSendResp) ProtoMessage() {}

func (x *PropertyGetReportSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyGetReportSendResp.ProtoReflect.Descriptor instead.
func (*PropertyGetReportSendResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{61}
}

func (x *PropertyGetReportSendResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PropertyGetReportSendResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PropertyGetReportSendResp) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

func (x *PropertyGetReportSendResp) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PropertyGetReportSendResp) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

type PropertyGetReportSendMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`            //设备返回状态码
	Msg        string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`               //返回状态
	MsgToken   string `protobuf:"bytes,3,opt,name=msgToken,proto3" json:"msgToken,omitempty"`     //调用id
	Timestamp  int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //上报时间戳(毫秒时间戳)
	Params     string `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`         //获取到的值
	ProductID  string `protobuf:"bytes,6,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id (必填)
	DeviceName string `protobuf:"bytes,7,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名(必填)
	SysMsg     string `protobuf:"bytes,8,opt,name=sysMsg,proto3" json:"sysMsg,omitempty"`         //系统错误信息
	SysCode    int64  `protobuf:"varint,9,opt,name=sysCode,proto3" json:"sysCode,omitempty"`      //系统错误码
}

func (x *PropertyGetReportSendMsg) Reset() {
	*x = PropertyGetReportSendMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyGetReportSendMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyGetReportSendMsg) ProtoMessage() {}

func (x *PropertyGetReportSendMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyGetReportSendMsg.ProtoReflect.Descriptor instead.
func (*PropertyGetReportSendMsg) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{62}
}

func (x *PropertyGetReportSendMsg) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PropertyGetReportSendMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PropertyGetReportSendMsg) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

func (x *PropertyGetReportSendMsg) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PropertyGetReportSendMsg) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *PropertyGetReportSendMsg) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyGetReportSendMsg) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyGetReportSendMsg) GetSysMsg() string {
	if x != nil {
		return x.SysMsg
	}
	return ""
}

func (x *PropertyGetReportSendMsg) GetSysCode() int64 {
	if x != nil {
		return x.SysCode
	}
	return 0
}

type PropertyGetReportMultiSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataIDs     []string      `protobuf:"bytes,1,rep,name=dataIDs,proto3" json:"dataIDs,omitempty"`         //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
	ProductID   string        `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id
	DeviceNames []string      `protobuf:"bytes,3,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"` //设备名
	Devices     []*DeviceCore `protobuf:"bytes,4,rep,name=devices,proto3" json:"devices,omitempty"`         //如果是不同的产品,则传这个字段,上面两个参数填了优先使用
	AreaID      int64         `protobuf:"varint,5,opt,name=areaID,proto3" json:"areaID,omitempty"`          //控制一个区域的设备
	AreaIDPath  string        `protobuf:"bytes,6,opt,name=areaIDPath,proto3" json:"areaIDPath,omitempty"`   //根据区域路径控制设备
	GroupID     int64         `protobuf:"varint,7,opt,name=groupID,proto3" json:"groupID,omitempty"`        //控制一个组的设备
}

func (x *PropertyGetReportMultiSendReq) Reset() {
	*x = PropertyGetReportMultiSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyGetReportMultiSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyGetReportMultiSendReq) ProtoMessage() {}

func (x *PropertyGetReportMultiSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyGetReportMultiSendReq.ProtoReflect.Descriptor instead.
func (*PropertyGetReportMultiSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{63}
}

func (x *PropertyGetReportMultiSendReq) GetDataIDs() []string {
	if x != nil {
		return x.DataIDs
	}
	return nil
}

func (x *PropertyGetReportMultiSendReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyGetReportMultiSendReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *PropertyGetReportMultiSendReq) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *PropertyGetReportMultiSendReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *PropertyGetReportMultiSendReq) GetAreaIDPath() string {
	if x != nil {
		return x.AreaIDPath
	}
	return ""
}

func (x *PropertyGetReportMultiSendReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

type PropertyGetReportMultiSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PropertyGetReportSendMsg `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` //批量设备返回结果列表
}

func (x *PropertyGetReportMultiSendResp) Reset() {
	*x = PropertyGetReportMultiSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyGetReportMultiSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyGetReportMultiSendResp) ProtoMessage() {}

func (x *PropertyGetReportMultiSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyGetReportMultiSendResp.ProtoReflect.Descriptor instead.
func (*PropertyGetReportMultiSendResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{64}
}

func (x *PropertyGetReportMultiSendResp) GetList() []*PropertyGetReportSendMsg {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取对应日志信息
type PropertyLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page              *PageInfo           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`                                                                                                        //使用了聚合函数及间隔的时候无效
	TenantCode        string              `protobuf:"bytes,21,opt,name=tenantCode,proto3" json:"tenantCode,omitempty"`                                                                                           //租户号,只有管理员有权限
	ProjectID         int64               `protobuf:"varint,20,opt,name=projectID,proto3" json:"projectID,omitempty"`                                                                                            //只有管理员有权限
	AreaID            int64               `protobuf:"varint,14,opt,name=areaID,proto3" json:"areaID,omitempty"`                                                                                                  //只有管理员有权限
	AreaIDPath        string              `protobuf:"bytes,15,opt,name=areaIDPath,proto3" json:"areaIDPath,omitempty"`                                                                                           //只有管理员有权限
	AreaIDs           []int64             `protobuf:"varint,16,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"`                                                                                         //只有管理员有权限
	ProductCategoryID int64               `protobuf:"varint,17,opt,name=productCategoryID,proto3" json:"productCategoryID,omitempty"`                                                                            //产品品类id
	BelongGroup       map[string]*IDsInfo `protobuf:"bytes,18,rep,name=BelongGroup,proto3" json:"BelongGroup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key是group的purpose, value是里面包含的分组id
	DeviceName        string              `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`                                                                                            //设备ID
	DeviceNames       []string            `protobuf:"bytes,3,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"`
	ProductID         string              `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`        //产品id (必填)
	DataID            string              `protobuf:"bytes,5,opt,name=dataID,proto3" json:"dataID,omitempty"`              //获取的具体标识符的数据(必填)
	TimeStart         int64               `protobuf:"varint,6,opt,name=timeStart,proto3" json:"timeStart,omitempty"`       //获取时间的开始(毫秒时间戳)
	TimeEnd           int64               `protobuf:"varint,7,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`           //时间的结束(毫秒时间戳)
	Interval          int64               `protobuf:"varint,8,opt,name=interval,proto3" json:"interval,omitempty"`         //间隔 如果这个值不为零值 则时间的开始和结束必须有效及聚合函数不应该为空
	IntervalUnit      string              `protobuf:"bytes,12,opt,name=intervalUnit,proto3" json:"intervalUnit,omitempty"` //间隔单位 a (毫秒,默认), d (天), h (小时), m (分钟), n (月), s (秒), u (微秒), w (周), y (年)
	ArgFunc           string              `protobuf:"bytes,9,opt,name=argFunc,proto3" json:"argFunc,omitempty"`            //聚合函数 avg:平均值 first:第一个参数 last:最后一个参数 count:总数 twa: 时间加权平均函数 参考:https://docs.taosdata.com/reference/taos-sql/function
	// /*
	// FILL 语句指定某一窗口区间数据缺失的情况下的填充模式。填充模式包括以下几种：
	//
	//	不进行填充：NONE（默认填充模式）。
	//	VALUE 填充：固定值填充，此时需要指定填充的数值。例如：FILL(VALUE, 1.23)。
	//	PREV 填充：使用前一个非 NULL 值填充数据。例如：FILL(PREV)。
	//	NULL 填充：使用 NULL 填充数据。例如：FILL(NULL)。
	//	LINEAR 填充：根据前后距离最近的非 NULL 值做线性插值填充。例如：FILL(LINEAR)。
	//	NEXT 填充：使用下一个非 NULL 值填充数据。例如：FILL(NEXT)。
	//
	// */
	Fill        string `protobuf:"bytes,10,opt,name=fill,proto3" json:"fill,omitempty"`               //填充模式 参考:https://docs.taosdata.com/reference/taos-sql/distinguished/#fill-%E5%AD%90%E5%8F%A5
	Order       int64  `protobuf:"varint,11,opt,name=order,proto3" json:"order,omitempty"`            //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
	PartitionBy string `protobuf:"bytes,13,opt,name=partitionBy,proto3" json:"partitionBy,omitempty"` //切分数据,可以填写deviceName
}

func (x *PropertyLogIndexReq) Reset() {
	*x = PropertyLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyLogIndexReq) ProtoMessage() {}

func (x *PropertyLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyLogIndexReq.ProtoReflect.Descriptor instead.
func (*PropertyLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{65}
}

func (x *PropertyLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PropertyLogIndexReq) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *PropertyLogIndexReq) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *PropertyLogIndexReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *PropertyLogIndexReq) GetAreaIDPath() string {
	if x != nil {
		return x.AreaIDPath
	}
	return ""
}

func (x *PropertyLogIndexReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *PropertyLogIndexReq) GetProductCategoryID() int64 {
	if x != nil {
		return x.ProductCategoryID
	}
	return 0
}

func (x *PropertyLogIndexReq) GetBelongGroup() map[string]*IDsInfo {
	if x != nil {
		return x.BelongGroup
	}
	return nil
}

func (x *PropertyLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyLogIndexReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *PropertyLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyLogIndexReq) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *PropertyLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *PropertyLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *PropertyLogIndexReq) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PropertyLogIndexReq) GetIntervalUnit() string {
	if x != nil {
		return x.IntervalUnit
	}
	return ""
}

func (x *PropertyLogIndexReq) GetArgFunc() string {
	if x != nil {
		return x.ArgFunc
	}
	return ""
}

func (x *PropertyLogIndexReq) GetFill() string {
	if x != nil {
		return x.Fill
	}
	return ""
}

func (x *PropertyLogIndexReq) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *PropertyLogIndexReq) GetPartitionBy() string {
	if x != nil {
		return x.PartitionBy
	}
	return ""
}

// 获取对应日志信息
type PropertyLogLatestIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string   `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id (必填)
	DeviceName string   `protobuf:"bytes,1,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名(必填)
	DataIDs    []string `protobuf:"bytes,3,rep,name=dataIDs,proto3" json:"dataIDs,omitempty"`       //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

func (x *PropertyLogLatestIndexReq) Reset() {
	*x = PropertyLogLatestIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyLogLatestIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyLogLatestIndexReq) ProtoMessage() {}

func (x *PropertyLogLatestIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyLogLatestIndexReq.ProtoReflect.Descriptor instead.
func (*PropertyLogLatestIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{66}
}

func (x *PropertyLogLatestIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyLogLatestIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyLogLatestIndexReq) GetDataIDs() []string {
	if x != nil {
		return x.DataIDs
	}
	return nil
}

type PropertyLogLatestIndex2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DeviceData `protobuf:"bytes,4,rep,name=devices,proto3" json:"devices,omitempty"` //
}

func (x *PropertyLogLatestIndex2Req) Reset() {
	*x = PropertyLogLatestIndex2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyLogLatestIndex2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyLogLatestIndex2Req) ProtoMessage() {}

func (x *PropertyLogLatestIndex2Req) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyLogLatestIndex2Req.ProtoReflect.Descriptor instead.
func (*PropertyLogLatestIndex2Req) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{67}
}

func (x *PropertyLogLatestIndex2Req) GetDevices() []*DeviceData {
	if x != nil {
		return x.Devices
	}
	return nil
}

// 设备的日志数据
type PropertyLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   int64               `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                                             //发生时间戳(毫秒时间戳)
	ProductID   string              `protobuf:"bytes,5,opt,name=productID,proto3" json:"productID,omitempty"`                                                                                              //产品名称
	DeviceName  string              `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`                                                                                            //设备名称
	DataID      string              `protobuf:"bytes,3,opt,name=dataID,proto3" json:"dataID,omitempty"`                                                                                                    //属性id
	Value       string              `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                                                                                      //获取到的值
	DataName    string              `protobuf:"bytes,6,opt,name=dataName,proto3" json:"dataName,omitempty"`                                                                                                //属性名称
	TenantCode  string              `protobuf:"bytes,7,opt,name=tenantCode,proto3" json:"tenantCode,omitempty"`                                                                                            //租户号,只有partitionBy 传该参数的时候才会返回
	ProjectID   int64               `protobuf:"varint,8,opt,name=projectID,proto3" json:"projectID,omitempty"`                                                                                             //租户号,只有partitionBy 传该参数的时候才会返回
	AreaID      int64               `protobuf:"varint,9,opt,name=areaID,proto3" json:"areaID,omitempty"`                                                                                                   //租户号,只有partitionBy 传该参数的时候才会返回
	AreaIDPath  string              `protobuf:"bytes,10,opt,name=areaIDPath,proto3" json:"areaIDPath,omitempty"`                                                                                           //租户号,只有partitionBy 传该参数的时候才会返回
	BelongGroup map[string]*IDsInfo `protobuf:"bytes,18,rep,name=BelongGroup,proto3" json:"BelongGroup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key是group的purpose, value是里面包含的分组id 只有partitionBy 传该参数的时候才会返回
}

func (x *PropertyLogInfo) Reset() {
	*x = PropertyLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyLogInfo) ProtoMessage() {}

func (x *PropertyLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyLogInfo.ProtoReflect.Descriptor instead.
func (*PropertyLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{68}
}

func (x *PropertyLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PropertyLogInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyLogInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyLogInfo) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *PropertyLogInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PropertyLogInfo) GetDataName() string {
	if x != nil {
		return x.DataName
	}
	return ""
}

func (x *PropertyLogInfo) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *PropertyLogInfo) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *PropertyLogInfo) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *PropertyLogInfo) GetAreaIDPath() string {
	if x != nil {
		return x.AreaIDPath
	}
	return ""
}

func (x *PropertyLogInfo) GetBelongGroup() map[string]*IDsInfo {
	if x != nil {
		return x.BelongGroup
	}
	return nil
}

// 获取对应日志信息
type PropertyLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*PropertyLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PropertyLogIndexResp) Reset() {
	*x = PropertyLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyLogIndexResp) ProtoMessage() {}

func (x *PropertyLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyLogIndexResp.ProtoReflect.Descriptor instead.
func (*PropertyLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{69}
}

func (x *PropertyLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PropertyLogIndexResp) GetList() []*PropertyLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取对应日志信息
type EventLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`               //使用了聚合函数及间隔的时候无效
	ProductID   string    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id (必填)
	DeviceName  string    `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`   //设备名(不填获取产品下所有设备)
	DeviceNames []string  `protobuf:"bytes,8,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"` //废弃
	DataID      string    `protobuf:"bytes,4,opt,name=dataID,proto3" json:"dataID,omitempty"`           //获取的具体标识符的数据(必填)
	TimeStart   int64     `protobuf:"varint,5,opt,name=timeStart,proto3" json:"timeStart,omitempty"`    //获取时间的开始(毫秒时间戳)
	TimeEnd     int64     `protobuf:"varint,6,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`        //时间的结束(毫秒时间戳)
	Types       []string  `protobuf:"bytes,7,rep,name=types,proto3" json:"types,omitempty"`             //类型 事件类型: 信息:info  告警alert  故障:fault
}

func (x *EventLogIndexReq) Reset() {
	*x = EventLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLogIndexReq) ProtoMessage() {}

func (x *EventLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLogIndexReq.ProtoReflect.Descriptor instead.
func (*EventLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{70}
}

func (x *EventLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *EventLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *EventLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *EventLogIndexReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *EventLogIndexReq) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *EventLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *EventLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *EventLogIndexReq) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

// 设备的日志数据
type EventLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //发生时间戳(毫秒时间戳)
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`             // 事件类型: 信息:info  告警alert  故障:fault
	DataID     string `protobuf:"bytes,3,opt,name=dataID,proto3" json:"dataID,omitempty"`         //属性id
	Params     string `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`         //获取到的值
	DeviceName string `protobuf:"bytes,5,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名(不填获取产品下所有设备)
}

func (x *EventLogInfo) Reset() {
	*x = EventLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLogInfo) ProtoMessage() {}

func (x *EventLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLogInfo.ProtoReflect.Descriptor instead.
func (*EventLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{71}
}

func (x *EventLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EventLogInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventLogInfo) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *EventLogInfo) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *EventLogInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

// 获取对应日志信息
type EventLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*EventLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *EventLogIndexResp) Reset() {
	*x = EventLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLogIndexResp) ProtoMessage() {}

func (x *EventLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLogIndexResp.ProtoReflect.Descriptor instead.
func (*EventLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{72}
}

func (x *EventLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *EventLogIndexResp) GetList() []*EventLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 实时获取对应信息
type HubLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string    `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string    `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
	TimeStart  int64     `protobuf:"varint,3,opt,name=timeStart,proto3" json:"timeStart,omitempty"`  //获取时间的开始(毫秒时间戳)
	TimeEnd    int64     `protobuf:"varint,4,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`      //时间的结束(毫秒时间戳)
	Page       *PageInfo `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`             //分页信息
	Actions    []string  `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`       //过滤操作类型 connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
	Topics     []string  `protobuf:"bytes,7,rep,name=topics,proto3" json:"topics,omitempty"`         //过滤主题
	Content    string    `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`       //过滤内容
	RequestID  string    `protobuf:"bytes,9,opt,name=requestID,proto3" json:"requestID,omitempty"`   //过滤请求ID
}

func (x *HubLogIndexReq) Reset() {
	*x = HubLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HubLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubLogIndexReq) ProtoMessage() {}

func (x *HubLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubLogIndexReq.ProtoReflect.Descriptor instead.
func (*HubLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{73}
}

func (x *HubLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *HubLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HubLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *HubLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *HubLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *HubLogIndexReq) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *HubLogIndexReq) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *HubLogIndexReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HubLogIndexReq) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

// 实时获取对应信息
type HubLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*HubLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HubLogIndexResp) Reset() {
	*x = HubLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HubLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubLogIndexResp) ProtoMessage() {}

func (x *HubLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubLogIndexResp.ProtoReflect.Descriptor instead.
func (*HubLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{74}
}

func (x *HubLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *HubLogIndexResp) GetList() []*HubLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 设备的日志数据
type HubLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`    //发生时间戳(毫秒时间戳)
	Action      string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`           //操作类型;connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
	RequestID   string `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`     //请求ID
	TraceID     string `protobuf:"bytes,4,opt,name=traceID,proto3" json:"traceID,omitempty"`         //服务器端事务id
	Topic       string `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`             //主题
	Content     string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`         //具体内容
	ResultCode  int64  `protobuf:"varint,7,opt,name=resultCode,proto3" json:"resultCode,omitempty"`  //请求结果状态
	RespPayload string `protobuf:"bytes,8,opt,name=respPayload,proto3" json:"respPayload,omitempty"` //返回的内容
}

func (x *HubLogInfo) Reset() {
	*x = HubLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HubLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubLogInfo) ProtoMessage() {}

func (x *HubLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubLogInfo.ProtoReflect.Descriptor instead.
func (*HubLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{75}
}

func (x *HubLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HubLogInfo) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *HubLogInfo) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *HubLogInfo) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *HubLogInfo) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *HubLogInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HubLogInfo) GetResultCode() int64 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *HubLogInfo) GetRespPayload() string {
	if x != nil {
		return x.RespPayload
	}
	return ""
}

// 实时获取对应信息
type StatusLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string    `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string    `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
	TimeStart  int64     `protobuf:"varint,3,opt,name=timeStart,proto3" json:"timeStart,omitempty"`  //获取时间的开始(毫秒时间戳)
	TimeEnd    int64     `protobuf:"varint,4,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`      //时间的结束(毫秒时间戳)
	Page       *PageInfo `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`             //分页信息
	Status     int64     `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`        //在线状态
}

func (x *StatusLogIndexReq) Reset() {
	*x = StatusLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusLogIndexReq) ProtoMessage() {}

func (x *StatusLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusLogIndexReq.ProtoReflect.Descriptor instead.
func (*StatusLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{76}
}

func (x *StatusLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *StatusLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *StatusLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *StatusLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *StatusLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *StatusLogIndexReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 实时获取对应信息
type StatusLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*StatusLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StatusLogIndexResp) Reset() {
	*x = StatusLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusLogIndexResp) ProtoMessage() {}

func (x *StatusLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusLogIndexResp.ProtoReflect.Descriptor instead.
func (*StatusLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{77}
}

func (x *StatusLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *StatusLogIndexResp) GetList() []*StatusLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 设备的日志数据
type StatusLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //发生时间戳(毫秒时间戳)
	Status     int64  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`        //设备状态
	ProductID  string `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
}

func (x *StatusLogInfo) Reset() {
	*x = StatusLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusLogInfo) ProtoMessage() {}

func (x *StatusLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusLogInfo.ProtoReflect.Descriptor instead.
func (*StatusLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{78}
}

func (x *StatusLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StatusLogInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *StatusLogInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *StatusLogInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

// 实时获取对应信息
type SendLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID         int64               `protobuf:"varint,13,opt,name=projectID,proto3" json:"projectID,omitempty"`                                                                                            //只有管理员有权限
	AreaID            int64               `protobuf:"varint,14,opt,name=areaID,proto3" json:"areaID,omitempty"`                                                                                                  //只有管理员有权限
	AreaIDPath        string              `protobuf:"bytes,15,opt,name=areaIDPath,proto3" json:"areaIDPath,omitempty"`                                                                                           //只有管理员有权限
	AreaIDs           []int64             `protobuf:"varint,16,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"`                                                                                         //只有管理员有权限
	BelongGroup       map[string]*IDsInfo `protobuf:"bytes,17,rep,name=BelongGroup,proto3" json:"BelongGroup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key是group的purpose, value是里面包含的分组id
	ProductCategoryID int64               `protobuf:"varint,11,opt,name=productCategoryID,proto3" json:"productCategoryID,omitempty"`                                                                            //产品品类id
	ProductID         string              `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`                                                                                              //产品id
	DeviceName        string              `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`                                                                                            //设备名
	TimeStart         int64               `protobuf:"varint,3,opt,name=timeStart,proto3" json:"timeStart,omitempty"`                                                                                             //获取时间的开始(毫秒时间戳)
	TimeEnd           int64               `protobuf:"varint,4,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`                                                                                                 //时间的结束(毫秒时间戳)
	Page              *PageInfo           `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`                                                                                                        //分页信息
	UserID            int64               `protobuf:"varint,9,opt,name=userID,proto3" json:"userID,omitempty"`
	Actions           []string            `protobuf:"bytes,10,rep,name=actions,proto3" json:"actions,omitempty"`
	ResultCode        int64               `protobuf:"varint,12,opt,name=resultCode,proto3" json:"resultCode,omitempty"` //请求结果状态,200为成功
	DataID            string              `protobuf:"bytes,8,opt,name=dataID,proto3" json:"dataID,omitempty"`           //identify
	DataIDs           []string            `protobuf:"bytes,7,rep,name=dataIDs,proto3" json:"dataIDs,omitempty"`
}

func (x *SendLogIndexReq) Reset() {
	*x = SendLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLogIndexReq) ProtoMessage() {}

func (x *SendLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLogIndexReq.ProtoReflect.Descriptor instead.
func (*SendLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{79}
}

func (x *SendLogIndexReq) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *SendLogIndexReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *SendLogIndexReq) GetAreaIDPath() string {
	if x != nil {
		return x.AreaIDPath
	}
	return ""
}

func (x *SendLogIndexReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *SendLogIndexReq) GetBelongGroup() map[string]*IDsInfo {
	if x != nil {
		return x.BelongGroup
	}
	return nil
}

func (x *SendLogIndexReq) GetProductCategoryID() int64 {
	if x != nil {
		return x.ProductCategoryID
	}
	return 0
}

func (x *SendLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *SendLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SendLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *SendLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *SendLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SendLogIndexReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SendLogIndexReq) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *SendLogIndexReq) GetResultCode() int64 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

func (x *SendLogIndexReq) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *SendLogIndexReq) GetDataIDs() []string {
	if x != nil {
		return x.DataIDs
	}
	return nil
}

// 实时获取对应信息
type SendLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*SendLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SendLogIndexResp) Reset() {
	*x = SendLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLogIndexResp) ProtoMessage() {}

func (x *SendLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLogIndexResp.ProtoReflect.Descriptor instead.
func (*SendLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{80}
}

func (x *SendLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SendLogIndexResp) GetList() []*SendLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 设备的日志数据
type SendLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`    //发生时间戳(毫秒时间戳)
	Account    string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`         //账号
	UserID     int64  `protobuf:"varint,4,opt,name=userID,proto3" json:"userID,omitempty"`          //
	ProductID  string `protobuf:"bytes,5,opt,name=productID,proto3" json:"productID,omitempty"`     //
	DeviceName string `protobuf:"bytes,6,opt,name=deviceName,proto3" json:"deviceName,omitempty"`   //
	Action     string `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`           //操作类型 propertySend:属性控制 actionSend:操作控制 propertyGetReportSend:获取最新属性请求
	DataID     string `protobuf:"bytes,8,opt,name=dataID,proto3" json:"dataID,omitempty"`           //identify
	TraceID    string `protobuf:"bytes,9,opt,name=traceID,proto3" json:"traceID,omitempty"`         //服务器端事务id
	Content    string `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`        //操作的内容
	ResultCode int64  `protobuf:"varint,11,opt,name=resultCode,proto3" json:"resultCode,omitempty"` //请求结果状态,200为成功
}

func (x *SendLogInfo) Reset() {
	*x = SendLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLogInfo) ProtoMessage() {}

func (x *SendLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLogInfo.ProtoReflect.Descriptor instead.
func (*SendLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{81}
}

func (x *SendLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SendLogInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SendLogInfo) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SendLogInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *SendLogInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SendLogInfo) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SendLogInfo) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *SendLogInfo) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *SendLogInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendLogInfo) GetResultCode() int64 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

// 实时获取对应信息
type AbnormalLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID         int64               `protobuf:"varint,13,opt,name=projectID,proto3" json:"projectID,omitempty"`                                                                                            //只有管理员有权限
	AreaID            int64               `protobuf:"varint,14,opt,name=areaID,proto3" json:"areaID,omitempty"`                                                                                                  //只有管理员有权限
	AreaIDPath        string              `protobuf:"bytes,15,opt,name=areaIDPath,proto3" json:"areaIDPath,omitempty"`                                                                                           //只有管理员有权限
	AreaIDs           []int64             `protobuf:"varint,16,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"`                                                                                         //只有管理员有权限
	ProductCategoryID int64               `protobuf:"varint,17,opt,name=productCategoryID,proto3" json:"productCategoryID,omitempty"`                                                                            //产品品类id
	BelongGroup       map[string]*IDsInfo `protobuf:"bytes,18,rep,name=BelongGroup,proto3" json:"BelongGroup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key是group的purpose, value是里面包含的分组id
	ProductID         string              `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`                                                                                              //产品id
	DeviceName        string              `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`                                                                                            //设备名
	TimeStart         int64               `protobuf:"varint,3,opt,name=timeStart,proto3" json:"timeStart,omitempty"`                                                                                             //获取时间的开始(毫秒时间戳)
	TimeEnd           int64               `protobuf:"varint,4,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`                                                                                                 //时间的结束(毫秒时间戳)
	Page              *PageInfo           `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`                                                                                                        //分页信息
	UserID            int64               `protobuf:"varint,9,opt,name=userID,proto3" json:"userID,omitempty"`
	Action            int64               `protobuf:"varint,10,opt,name=action,proto3" json:"action,omitempty"`
	Type              string              `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`              //异常类型
	ResultCode        int64               `protobuf:"varint,12,opt,name=resultCode,proto3" json:"resultCode,omitempty"` //请求结果状态,200为成功
}

func (x *AbnormalLogIndexReq) Reset() {
	*x = AbnormalLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbnormalLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbnormalLogIndexReq) ProtoMessage() {}

func (x *AbnormalLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbnormalLogIndexReq.ProtoReflect.Descriptor instead.
func (*AbnormalLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{82}
}

func (x *AbnormalLogIndexReq) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *AbnormalLogIndexReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *AbnormalLogIndexReq) GetAreaIDPath() string {
	if x != nil {
		return x.AreaIDPath
	}
	return ""
}

func (x *AbnormalLogIndexReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *AbnormalLogIndexReq) GetProductCategoryID() int64 {
	if x != nil {
		return x.ProductCategoryID
	}
	return 0
}

func (x *AbnormalLogIndexReq) GetBelongGroup() map[string]*IDsInfo {
	if x != nil {
		return x.BelongGroup
	}
	return nil
}

func (x *AbnormalLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *AbnormalLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *AbnormalLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *AbnormalLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *AbnormalLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *AbnormalLogIndexReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *AbnormalLogIndexReq) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *AbnormalLogIndexReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AbnormalLogIndexReq) GetResultCode() int64 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

// 实时获取对应信息
type AbnormalLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*AbnormalLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AbnormalLogIndexResp) Reset() {
	*x = AbnormalLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbnormalLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbnormalLogIndexResp) ProtoMessage() {}

func (x *AbnormalLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbnormalLogIndexResp.ProtoReflect.Descriptor instead.
func (*AbnormalLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{83}
}

func (x *AbnormalLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AbnormalLogIndexResp) GetList() []*AbnormalLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 设备的日志数据
type AbnormalLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //发生时间戳(毫秒时间戳)
	Action     int64  `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`        //触发1还是解除2
	Type       string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`             //异常类型
	ProductID  string `protobuf:"bytes,5,opt,name=productID,proto3" json:"productID,omitempty"`   //
	DeviceName string `protobuf:"bytes,6,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //
	Reason     string `protobuf:"bytes,7,opt,name=Reason,proto3" json:"Reason,omitempty"`         //原因
	TraceID    string `protobuf:"bytes,9,opt,name=traceID,proto3" json:"traceID,omitempty"`       //服务器端事务id
}

func (x *AbnormalLogInfo) Reset() {
	*x = AbnormalLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbnormalLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbnormalLogInfo) ProtoMessage() {}

func (x *AbnormalLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbnormalLogInfo.ProtoReflect.Descriptor instead.
func (*AbnormalLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{84}
}

func (x *AbnormalLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AbnormalLogInfo) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *AbnormalLogInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AbnormalLogInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *AbnormalLogInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *AbnormalLogInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AbnormalLogInfo) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

// 获取sdk调试日志信息
type SdkLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string    `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string    `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
	TimeStart  int64     `protobuf:"varint,3,opt,name=timeStart,proto3" json:"timeStart,omitempty"`  //获取时间的开始
	TimeEnd    int64     `protobuf:"varint,4,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`      //时间的结束
	LogLevel   int64     `protobuf:"varint,5,opt,name=logLevel,proto3" json:"logLevel,omitempty"`    //日志等级
	Page       *PageInfo `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`             //分页信息 只获取一个则不填
}

func (x *SdkLogIndexReq) Reset() {
	*x = SdkLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkLogIndexReq) ProtoMessage() {}

func (x *SdkLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkLogIndexReq.ProtoReflect.Descriptor instead.
func (*SdkLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{85}
}

func (x *SdkLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *SdkLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SdkLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *SdkLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *SdkLogIndexReq) GetLogLevel() int64 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

func (x *SdkLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

// sdk调试日志信息
type SdkLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*SdkLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SdkLogIndexResp) Reset() {
	*x = SdkLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkLogIndexResp) ProtoMessage() {}

func (x *SdkLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkLogIndexResp.ProtoReflect.Descriptor instead.
func (*SdkLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{86}
}

func (x *SdkLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SdkLogIndexResp) GetList() []*SdkLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type SdkLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //发生时间戳(毫秒时间戳)
	Loglevel  int64  `protobuf:"varint,2,opt,name=loglevel,proto3" json:"loglevel,omitempty"`   //操作类型;显示相应的操作名称、API名称、服务的method
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`      //具体内容
}

func (x *SdkLogInfo) Reset() {
	*x = SdkLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkLogInfo) ProtoMessage() {}

func (x *SdkLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkLogInfo.ProtoReflect.Descriptor instead.
func (*SdkLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{87}
}

func (x *SdkLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SdkLogInfo) GetLoglevel() int64 {
	if x != nil {
		return x.Loglevel
	}
	return 0
}

func (x *SdkLogInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ActionSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID   string      `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id 获取产品id下的所有设备信息
	DeviceName  string      `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`   //设备名
	ActionID    string      `protobuf:"bytes,3,opt,name=actionID,proto3" json:"actionID,omitempty"`       //产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
	InputParams string      `protobuf:"bytes,4,opt,name=inputParams,proto3" json:"inputParams,omitempty"` //输入参数
	IsAsync     bool        `protobuf:"varint,5,opt,name=isAsync,proto3" json:"isAsync,omitempty"`        //是否异步获取
	Option      *SendOption `protobuf:"bytes,6,opt,name=option,proto3" json:"option,omitempty"`           //异步选项
}

func (x *ActionSendReq) Reset() {
	*x = ActionSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSendReq) ProtoMessage() {}

func (x *ActionSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSendReq.ProtoReflect.Descriptor instead.
func (*ActionSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{88}
}

func (x *ActionSendReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ActionSendReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *ActionSendReq) GetActionID() string {
	if x != nil {
		return x.ActionID
	}
	return ""
}

func (x *ActionSendReq) GetInputParams() string {
	if x != nil {
		return x.InputParams
	}
	return ""
}

func (x *ActionSendReq) GetIsAsync() bool {
	if x != nil {
		return x.IsAsync
	}
	return false
}

func (x *ActionSendReq) GetOption() *SendOption {
	if x != nil {
		return x.Option
	}
	return nil
}

type ActionSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgToken     string `protobuf:"bytes,1,opt,name=msgToken,proto3" json:"msgToken,omitempty"`         //调用id
	OutputParams string `protobuf:"bytes,2,opt,name=outputParams,proto3" json:"outputParams,omitempty"` //输出参数 注意：此字段可能返回 null，表示取不到有效值。
	Msg          string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`                   //返回状态
	Code         int64  `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`                //设备返回状态码
}

func (x *ActionSendResp) Reset() {
	*x = ActionSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSendResp) ProtoMessage() {}

func (x *ActionSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSendResp.ProtoReflect.Descriptor instead.
func (*ActionSendResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{89}
}

func (x *ActionSendResp) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

func (x *ActionSendResp) GetOutputParams() string {
	if x != nil {
		return x.OutputParams
	}
	return ""
}

func (x *ActionSendResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ActionSendResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 获取异步消息的请求
type RespReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
	MsgToken   string `protobuf:"bytes,3,opt,name=msgToken,proto3" json:"msgToken,omitempty"`     //调用id
}

func (x *RespReadReq) Reset() {
	*x = RespReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespReadReq) ProtoMessage() {}

func (x *RespReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespReadReq.ProtoReflect.Descriptor instead.
func (*RespReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{90}
}

func (x *RespReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *RespReadReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *RespReadReq) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

type PropertyControlSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
	Data       string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`             //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
	// 设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错
	// 2:如果有设备影子只修改影子,没有的也不下发 3: 只修改云端的值,不下发设备
	ShadowControl int64        `protobuf:"varint,4,opt,name=shadowControl,proto3" json:"shadowControl,omitempty"`
	IsAsync       bool         `protobuf:"varint,6,opt,name=isAsync,proto3" json:"isAsync,omitempty"` //是否异步操作 异步情况通过获取接口来获取
	WithProfile   *WithProfile `protobuf:"bytes,7,opt,name=withProfile,proto3" json:"withProfile,omitempty"`
	SyncTimeout   int64        `protobuf:"varint,8,opt,name=syncTimeout,proto3" json:"syncTimeout,omitempty"` //同步超时时间(单位:秒)
}

func (x *PropertyControlSendReq) Reset() {
	*x = PropertyControlSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyControlSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyControlSendReq) ProtoMessage() {}

func (x *PropertyControlSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyControlSendReq.ProtoReflect.Descriptor instead.
func (*PropertyControlSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{91}
}

func (x *PropertyControlSendReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyControlSendReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyControlSendReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *PropertyControlSendReq) GetShadowControl() int64 {
	if x != nil {
		return x.ShadowControl
	}
	return 0
}

func (x *PropertyControlSendReq) GetIsAsync() bool {
	if x != nil {
		return x.IsAsync
	}
	return false
}

func (x *PropertyControlSendReq) GetWithProfile() *WithProfile {
	if x != nil {
		return x.WithProfile
	}
	return nil
}

func (x *PropertyControlSendReq) GetSyncTimeout() int64 {
	if x != nil {
		return x.SyncTimeout
	}
	return 0
}

type WithProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Params string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *WithProfile) Reset() {
	*x = WithProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithProfile) ProtoMessage() {}

func (x *WithProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithProfile.ProtoReflect.Descriptor instead.
func (*WithProfile) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{92}
}

func (x *WithProfile) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WithProfile) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

type ActionRespReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID    string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`       //产品id 获取产品id下的所有设备信息
	DeviceName   string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`     //设备名
	MsgToken     string `protobuf:"bytes,3,opt,name=msgToken,proto3" json:"msgToken,omitempty"`         //调用id
	OutputParams string `protobuf:"bytes,4,opt,name=outputParams,proto3" json:"outputParams,omitempty"` //输出参数 注意：此字段可能返回 null，表示取不到有效值。
	Msg          string `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`                   //返回状态
	Code         int64  `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty"`                //设备返回状态码
}

func (x *ActionRespReq) Reset() {
	*x = ActionRespReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRespReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRespReq) ProtoMessage() {}

func (x *ActionRespReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRespReq.ProtoReflect.Descriptor instead.
func (*ActionRespReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{93}
}

func (x *ActionRespReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ActionRespReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *ActionRespReq) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

func (x *ActionRespReq) GetOutputParams() string {
	if x != nil {
		return x.OutputParams
	}
	return ""
}

func (x *ActionRespReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ActionRespReq) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

type PropertyControlSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`        //设备返回状态码
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`           //返回状态
	MsgToken string `protobuf:"bytes,3,opt,name=msgToken,proto3" json:"msgToken,omitempty"` //调用id
}

func (x *PropertyControlSendResp) Reset() {
	*x = PropertyControlSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyControlSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyControlSendResp) ProtoMessage() {}

func (x *PropertyControlSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyControlSendResp.ProtoReflect.Descriptor instead.
func (*PropertyControlSendResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{94}
}

func (x *PropertyControlSendResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PropertyControlSendResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PropertyControlSendResp) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

type GatewayGetFoundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
}

func (x *GatewayGetFoundReq) Reset() {
	*x = GatewayGetFoundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayGetFoundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayGetFoundReq) ProtoMessage() {}

func (x *GatewayGetFoundReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayGetFoundReq.ProtoReflect.Descriptor instead.
func (*GatewayGetFoundReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{95}
}

func (x *GatewayGetFoundReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *GatewayGetFoundReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type EdgeSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle     string `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"` //对应 mqtt topic的第一个 thing ota config 等等
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`     //操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
	Payload    []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	ProductID  string `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string `protobuf:"bytes,5,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *EdgeSendReq) Reset() {
	*x = EdgeSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeSendReq) ProtoMessage() {}

func (x *EdgeSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeSendReq.ProtoReflect.Descriptor instead.
func (*EdgeSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{96}
}

func (x *EdgeSendReq) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *EdgeSendReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EdgeSendReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EdgeSendReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *EdgeSendReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type EdgeSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *EdgeSendResp) Reset() {
	*x = EdgeSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeSendResp) ProtoMessage() {}

func (x *EdgeSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeSendResp.ProtoReflect.Descriptor instead.
func (*EdgeSendResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{97}
}

func (x *EdgeSendResp) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GatewayNotifyBindSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway    *DeviceCore   `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	SubDevices []*DeviceCore `protobuf:"bytes,2,rep,name=subDevices,proto3" json:"subDevices,omitempty"`
}

func (x *GatewayNotifyBindSendReq) Reset() {
	*x = GatewayNotifyBindSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayNotifyBindSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayNotifyBindSendReq) ProtoMessage() {}

func (x *GatewayNotifyBindSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayNotifyBindSendReq.ProtoReflect.Descriptor instead.
func (*GatewayNotifyBindSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{98}
}

func (x *GatewayNotifyBindSendReq) GetGateway() *DeviceCore {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *GatewayNotifyBindSendReq) GetSubDevices() []*DeviceCore {
	if x != nil {
		return x.SubDevices
	}
	return nil
}

type SendMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`     //发送的topic
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"` //发送的数据
}

func (x *SendMsgReq) Reset() {
	*x = SendMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgReq) ProtoMessage() {}

func (x *SendMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgReq.ProtoReflect.Descriptor instead.
func (*SendMsgReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{99}
}

func (x *SendMsgReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SendMsgReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SendMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendMsgResp) Reset() {
	*x = SendMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgResp) ProtoMessage() {}

func (x *SendMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgResp.ProtoReflect.Descriptor instead.
func (*SendMsgResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{100}
}

type PropertyControlMultiSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID     string        `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`          //产品id
	DeviceNames   []string      `protobuf:"bytes,2,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"`      //设备名
	Devices       []*DeviceCore `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices,omitempty"`              //如果是不同的产品,则传这个字段,上面两个参数填了优先使用
	ShadowControl int64         `protobuf:"varint,4,opt,name=shadowControl,proto3" json:"shadowControl,omitempty"` //设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
	Data          string        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                    //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
	IsAsync       bool          `protobuf:"varint,6,opt,name=isAsync,proto3" json:"isAsync,omitempty"`             //是否异步操作 异步情况通过获取接口来获取
	AreaID        int64         `protobuf:"varint,7,opt,name=areaID,proto3" json:"areaID,omitempty"`               //控制一个区域的设备
	AreaIDPath    string        `protobuf:"bytes,10,opt,name=areaIDPath,proto3" json:"areaIDPath,omitempty"`       //根据区域路径控制设备
	GroupID       int64         `protobuf:"varint,8,opt,name=groupID,proto3" json:"groupID,omitempty"`             //控制一个组的设备
	SyncTimeout   int64         `protobuf:"varint,9,opt,name=syncTimeout,proto3" json:"syncTimeout,omitempty"`     //同步超时时间(单位:秒,不填默认3秒)
}

func (x *PropertyControlMultiSendReq) Reset() {
	*x = PropertyControlMultiSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyControlMultiSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyControlMultiSendReq) ProtoMessage() {}

func (x *PropertyControlMultiSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyControlMultiSendReq.ProtoReflect.Descriptor instead.
func (*PropertyControlMultiSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{101}
}

func (x *PropertyControlMultiSendReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyControlMultiSendReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *PropertyControlMultiSendReq) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *PropertyControlMultiSendReq) GetShadowControl() int64 {
	if x != nil {
		return x.ShadowControl
	}
	return 0
}

func (x *PropertyControlMultiSendReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *PropertyControlMultiSendReq) GetIsAsync() bool {
	if x != nil {
		return x.IsAsync
	}
	return false
}

func (x *PropertyControlMultiSendReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *PropertyControlMultiSendReq) GetAreaIDPath() string {
	if x != nil {
		return x.AreaIDPath
	}
	return ""
}

func (x *PropertyControlMultiSendReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *PropertyControlMultiSendReq) GetSyncTimeout() int64 {
	if x != nil {
		return x.SyncTimeout
	}
	return 0
}

type PropertyControlSendMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
	Code       int64  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`            //设备返回状态码
	Msg        string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`               //返回状态
	MsgToken   string `protobuf:"bytes,5,opt,name=msgToken,proto3" json:"msgToken,omitempty"`     //调用id
	SysMsg     string `protobuf:"bytes,6,opt,name=sysMsg,proto3" json:"sysMsg,omitempty"`         //系统错误信息
	SysCode    int64  `protobuf:"varint,7,opt,name=sysCode,proto3" json:"sysCode,omitempty"`      //系统错误码
}

func (x *PropertyControlSendMsg) Reset() {
	*x = PropertyControlSendMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyControlSendMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyControlSendMsg) ProtoMessage() {}

func (x *PropertyControlSendMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyControlSendMsg.ProtoReflect.Descriptor instead.
func (*PropertyControlSendMsg) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{102}
}

func (x *PropertyControlSendMsg) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyControlSendMsg) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyControlSendMsg) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PropertyControlSendMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PropertyControlSendMsg) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

func (x *PropertyControlSendMsg) GetSysMsg() string {
	if x != nil {
		return x.SysMsg
	}
	return ""
}

func (x *PropertyControlSendMsg) GetSysCode() int64 {
	if x != nil {
		return x.SysCode
	}
	return 0
}

type PropertyControlMultiSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PropertyControlSendMsg `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` //批量设备返回结果列表
}

func (x *PropertyControlMultiSendResp) Reset() {
	*x = PropertyControlMultiSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyControlMultiSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyControlMultiSendResp) ProtoMessage() {}

func (x *PropertyControlMultiSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyControlMultiSendResp.ProtoReflect.Descriptor instead.
func (*PropertyControlMultiSendResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{103}
}

func (x *PropertyControlMultiSendResp) GetList() []*PropertyControlSendMsg {
	if x != nil {
		return x.List
	}
	return nil
}

type ProductRemoteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductID   string `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
	Content     string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	CreatedTime int64  `protobuf:"varint,4,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
}

func (x *ProductRemoteConfig) Reset() {
	*x = ProductRemoteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRemoteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRemoteConfig) ProtoMessage() {}

func (x *ProductRemoteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRemoteConfig.ProtoReflect.Descriptor instead.
func (*ProductRemoteConfig) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{104}
}

func (x *ProductRemoteConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductRemoteConfig) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductRemoteConfig) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ProductRemoteConfig) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type RemoteConfigCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *RemoteConfigCreateReq) Reset() {
	*x = RemoteConfigCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigCreateReq) ProtoMessage() {}

func (x *RemoteConfigCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigCreateReq.ProtoReflect.Descriptor instead.
func (*RemoteConfigCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{105}
}

func (x *RemoteConfigCreateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *RemoteConfigCreateReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type RemoteConfigIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	ProductID string    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *RemoteConfigIndexReq) Reset() {
	*x = RemoteConfigIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigIndexReq) ProtoMessage() {}

func (x *RemoteConfigIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigIndexReq.ProtoReflect.Descriptor instead.
func (*RemoteConfigIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{106}
}

func (x *RemoteConfigIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *RemoteConfigIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type RemoteConfigIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProductRemoteConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RemoteConfigIndexResp) Reset() {
	*x = RemoteConfigIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigIndexResp) ProtoMessage() {}

func (x *RemoteConfigIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigIndexResp.ProtoReflect.Descriptor instead.
func (*RemoteConfigIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{107}
}

func (x *RemoteConfigIndexResp) GetList() []*ProductRemoteConfig {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RemoteConfigIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type RemoteConfigPushAllReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *RemoteConfigPushAllReq) Reset() {
	*x = RemoteConfigPushAllReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigPushAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigPushAllReq) ProtoMessage() {}

func (x *RemoteConfigPushAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigPushAllReq.ProtoReflect.Descriptor instead.
func (*RemoteConfigPushAllReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{108}
}

func (x *RemoteConfigPushAllReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type RemoteConfigLastReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *RemoteConfigLastReadReq) Reset() {
	*x = RemoteConfigLastReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigLastReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigLastReadReq) ProtoMessage() {}

func (x *RemoteConfigLastReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigLastReadReq.ProtoReflect.Descriptor instead.
func (*RemoteConfigLastReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{109}
}

func (x *RemoteConfigLastReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type RemoteConfigLastReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ProductRemoteConfig `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RemoteConfigLastReadResp) Reset() {
	*x = RemoteConfigLastReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigLastReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigLastReadResp) ProtoMessage() {}

func (x *RemoteConfigLastReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigLastReadResp.ProtoReflect.Descriptor instead.
func (*RemoteConfigLastReadResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{110}
}

func (x *RemoteConfigLastReadResp) GetInfo() *ProductRemoteConfig {
	if x != nil {
		return x.Info
	}
	return nil
}

type ProductCustomReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *ProductCustomReadReq) Reset() {
	*x = ProductCustomReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCustomReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCustomReadReq) ProtoMessage() {}

func (x *ProductCustomReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCustomReadReq.ProtoReflect.Descriptor instead.
func (*ProductCustomReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{111}
}

func (x *ProductCustomReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type ProductCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID       string                  `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	ScriptLang      int64                   `protobuf:"varint,3,opt,name=scriptLang,proto3" json:"scriptLang,omitempty"`          //脚本语言类型（默认JavaScript） 1:JavaScript 2:lua 3:python
	TransformScript *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=transformScript,proto3" json:"transformScript,omitempty"` //协议转换脚本
	LoginAuthScript *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=loginAuthScript,proto3" json:"loginAuthScript,omitempty"` //登录认证脚本
	CustomTopics    []*CustomTopic          `protobuf:"bytes,4,rep,name=customTopics,proto3" json:"customTopics,omitempty"`       //自定义topic信息 只有mqtt协议有用
}

func (x *ProductCustom) Reset() {
	*x = ProductCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCustom) ProtoMessage() {}

func (x *ProductCustom) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCustom.ProtoReflect.Descriptor instead.
func (*ProductCustom) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{112}
}

func (x *ProductCustom) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductCustom) GetScriptLang() int64 {
	if x != nil {
		return x.ScriptLang
	}
	return 0
}

func (x *ProductCustom) GetTransformScript() *wrapperspb.StringValue {
	if x != nil {
		return x.TransformScript
	}
	return nil
}

func (x *ProductCustom) GetLoginAuthScript() *wrapperspb.StringValue {
	if x != nil {
		return x.LoginAuthScript
	}
	return nil
}

func (x *ProductCustom) GetCustomTopics() []*CustomTopic {
	if x != nil {
		return x.CustomTopics
	}
	return nil
}

type CustomTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`          //自定义主题需要以$custom 并包含设备名称{deviceName}及产品名称{productID}
	Direction int64  `protobuf:"varint,2,opt,name=direction,proto3" json:"direction,omitempty"` //1:上行 2:下行 3:双向
}

func (x *CustomTopic) Reset() {
	*x = CustomTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTopic) ProtoMessage() {}

func (x *CustomTopic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTopic.ProtoReflect.Descriptor instead.
func (*CustomTopic) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{113}
}

func (x *CustomTopic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CustomTopic) GetDirection() int64 {
	if x != nil {
		return x.Direction
	}
	return 0
}

type DeviceGatewayBindDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID   string             `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id
	DeviceName  string             `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`   //设备id
	DeviceAlias string             `protobuf:"bytes,4,opt,name=deviceAlias,proto3" json:"deviceAlias,omitempty"` //设备名称,如果填写了则会更新设备的名称
	Sign        *DeviceGatewaySign `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`               //签名
}

func (x *DeviceGatewayBindDevice) Reset() {
	*x = DeviceGatewayBindDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayBindDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayBindDevice) ProtoMessage() {}

func (x *DeviceGatewayBindDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayBindDevice.ProtoReflect.Descriptor instead.
func (*DeviceGatewayBindDevice) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{114}
}

func (x *DeviceGatewayBindDevice) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceGatewayBindDevice) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceGatewayBindDevice) GetDeviceAlias() string {
	if x != nil {
		return x.DeviceAlias
	}
	return ""
}

func (x *DeviceGatewayBindDevice) GetSign() *DeviceGatewaySign {
	if x != nil {
		return x.Sign
	}
	return nil
}

type DeviceGatewaySign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 子设备绑定签名串。 签名算法：
	// 1. 签名原串，将产品 ID 设备名称，随机数，时间戳拼接：text=${product_id}${device_name};${random};${expiration_time}
	// 2. 使用设备 Psk 密钥，或者证书的 Sha1 摘要，进行签名：hmac_sha1(device_secret, text)
	Signature  string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Random     int64  `protobuf:"varint,4,opt,name=random,proto3" json:"random,omitempty"`        //随机数。
	Timestamp  int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //时间戳，单位：秒。
	SignMethod string `protobuf:"bytes,6,opt,name=signMethod,proto3" json:"signMethod,omitempty"` //签名算法。支持 hmacsha1、hmacsha256
}

func (x *DeviceGatewaySign) Reset() {
	*x = DeviceGatewaySign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewaySign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewaySign) ProtoMessage() {}

func (x *DeviceGatewaySign) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewaySign.ProtoReflect.Descriptor instead.
func (*DeviceGatewaySign) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{115}
}

func (x *DeviceGatewaySign) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *DeviceGatewaySign) GetRandom() int64 {
	if x != nil {
		return x.Random
	}
	return 0
}

func (x *DeviceGatewaySign) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DeviceGatewaySign) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

type DeviceGatewayMultiCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway     *DeviceCore                `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`          //
	IsNotNotify bool                       `protobuf:"varint,2,opt,name=isNotNotify,proto3" json:"isNotNotify,omitempty"` //不通知网关设备状态做了调整
	IsAuthSign  bool                       `protobuf:"varint,3,opt,name=isAuthSign,proto3" json:"isAuthSign,omitempty"`   //是否校验设备签名
	List        []*DeviceGatewayBindDevice `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceGatewayMultiCreateReq) Reset() {
	*x = DeviceGatewayMultiCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayMultiCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayMultiCreateReq) ProtoMessage() {}

func (x *DeviceGatewayMultiCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayMultiCreateReq.ProtoReflect.Descriptor instead.
func (*DeviceGatewayMultiCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{116}
}

func (x *DeviceGatewayMultiCreateReq) GetGateway() *DeviceCore {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *DeviceGatewayMultiCreateReq) GetIsNotNotify() bool {
	if x != nil {
		return x.IsNotNotify
	}
	return false
}

func (x *DeviceGatewayMultiCreateReq) GetIsAuthSign() bool {
	if x != nil {
		return x.IsAuthSign
	}
	return false
}

func (x *DeviceGatewayMultiCreateReq) GetList() []*DeviceGatewayBindDevice {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceGatewayIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageInfo   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Gateway   *DeviceCore `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`     //获取网关下子设备列表
	SubDevice *DeviceCore `protobuf:"bytes,3,opt,name=subDevice,proto3" json:"subDevice,omitempty"` //获取子设备绑定的网关列表
}

func (x *DeviceGatewayIndexReq) Reset() {
	*x = DeviceGatewayIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayIndexReq) ProtoMessage() {}

func (x *DeviceGatewayIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayIndexReq.ProtoReflect.Descriptor instead.
func (*DeviceGatewayIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{117}
}

func (x *DeviceGatewayIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DeviceGatewayIndexReq) GetGateway() *DeviceCore {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *DeviceGatewayIndexReq) GetSubDevice() *DeviceCore {
	if x != nil {
		return x.SubDevice
	}
	return nil
}

type DeviceGatewayIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*DeviceCore `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DeviceGatewayIndexResp) Reset() {
	*x = DeviceGatewayIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayIndexResp) ProtoMessage() {}

func (x *DeviceGatewayIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayIndexResp.ProtoReflect.Descriptor instead.
func (*DeviceGatewayIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{118}
}

func (x *DeviceGatewayIndexResp) GetList() []*DeviceCore {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *DeviceGatewayIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeviceGatewayMultiSaveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway     *DeviceCore   `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	IsNotNotify bool          `protobuf:"varint,2,opt,name=isNotNotify,proto3" json:"isNotNotify,omitempty"` //不通知网关设备状态做了调整
	List        []*DeviceCore `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceGatewayMultiSaveReq) Reset() {
	*x = DeviceGatewayMultiSaveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayMultiSaveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayMultiSaveReq) ProtoMessage() {}

func (x *DeviceGatewayMultiSaveReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayMultiSaveReq.ProtoReflect.Descriptor instead.
func (*DeviceGatewayMultiSaveReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{119}
}

func (x *DeviceGatewayMultiSaveReq) GetGateway() *DeviceCore {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *DeviceGatewayMultiSaveReq) GetIsNotNotify() bool {
	if x != nil {
		return x.IsNotNotify
	}
	return false
}

func (x *DeviceGatewayMultiSaveReq) GetList() []*DeviceCore {
	if x != nil {
		return x.List
	}
	return nil
}

type GatewayCanBindIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway *DeviceCore `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *GatewayCanBindIndexReq) Reset() {
	*x = GatewayCanBindIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayCanBindIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayCanBindIndexReq) ProtoMessage() {}

func (x *GatewayCanBindIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayCanBindIndexReq.ProtoReflect.Descriptor instead.
func (*GatewayCanBindIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{120}
}

func (x *GatewayCanBindIndexReq) GetGateway() *DeviceCore {
	if x != nil {
		return x.Gateway
	}
	return nil
}

type GatewayCanBindIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubDevices  []*DeviceCore `protobuf:"bytes,1,rep,name=subDevices,proto3" json:"subDevices,omitempty"`
	UpdatedTime int64         `protobuf:"varint,2,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"` //更新时间
}

func (x *GatewayCanBindIndexResp) Reset() {
	*x = GatewayCanBindIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayCanBindIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayCanBindIndexResp) ProtoMessage() {}

func (x *GatewayCanBindIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayCanBindIndexResp.ProtoReflect.Descriptor instead.
func (*GatewayCanBindIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{121}
}

func (x *GatewayCanBindIndexResp) GetSubDevices() []*DeviceCore {
	if x != nil {
		return x.SubDevices
	}
	return nil
}

func (x *GatewayCanBindIndexResp) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

type GroupInfoMultiCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*GroupInfo `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GroupInfoMultiCreateReq) Reset() {
	*x = GroupInfoMultiCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoMultiCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoMultiCreateReq) ProtoMessage() {}

func (x *GroupInfoMultiCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoMultiCreateReq.ProtoReflect.Descriptor instead.
func (*GroupInfoMultiCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{122}
}

func (x *GroupInfoMultiCreateReq) GetGroups() []*GroupInfo {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Purpose     string            `protobuf:"bytes,15,opt,name=purpose,proto3" json:"purpose,omitempty"` //用途 不填默认为default
	AreaID      int64             `protobuf:"varint,10,opt,name=areaID,proto3" json:"areaID,omitempty"`  //分组可以属于某个区域下
	ProjectID   int64             `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Id          int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentID    int64             `protobuf:"varint,2,opt,name=parentID,proto3" json:"parentID,omitempty"`
	IdPath      string            `protobuf:"bytes,17,opt,name=idPath,proto3" json:"idPath,omitempty"`
	Name        string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Desc        string            `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	CreatedTime int64             `protobuf:"varint,6,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	Tags        map[string]string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProductID   string            `protobuf:"bytes,8,opt,name=productID,proto3" json:"productID,omitempty"`
	ProductName string            `protobuf:"bytes,9,opt,name=productName,proto3" json:"productName,omitempty"`
	Devices     []*DeviceCore     `protobuf:"bytes,11,rep,name=devices,proto3" json:"devices,omitempty"`
	DeviceCount int64             `protobuf:"varint,12,opt,name=deviceCount,proto3" json:"deviceCount,omitempty"`
	IsLeaf      int64             `protobuf:"varint,13,opt,name=isLeaf,proto3" json:"isLeaf,omitempty"`
	Files       map[string]string `protobuf:"bytes,16,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key 是用途, value是 是文件的路径,如果要更新该文件, 传filePath即可
	Children    []*GroupInfo      `protobuf:"bytes,14,rep,name=children,proto3" json:"children,omitempty"`                                                                                   //  DeviceInfoCount deviceInfoCount =11;
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{123}
}

func (x *GroupInfo) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *GroupInfo) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *GroupInfo) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *GroupInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupInfo) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *GroupInfo) GetIdPath() string {
	if x != nil {
		return x.IdPath
	}
	return ""
}

func (x *GroupInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GroupInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *GroupInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GroupInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *GroupInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *GroupInfo) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *GroupInfo) GetDeviceCount() int64 {
	if x != nil {
		return x.DeviceCount
	}
	return 0
}

func (x *GroupInfo) GetIsLeaf() int64 {
	if x != nil {
		return x.IsLeaf
	}
	return 0
}

func (x *GroupInfo) GetFiles() map[string]string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *GroupInfo) GetChildren() []*GroupInfo {
	if x != nil {
		return x.Children
	}
	return nil
}

type GroupCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentID int64  `protobuf:"varint,2,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GroupCore) Reset() {
	*x = GroupCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCore) ProtoMessage() {}

func (x *GroupCore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCore.ProtoReflect.Descriptor instead.
func (*GroupCore) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{124}
}

func (x *GroupCore) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupCore) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *GroupCore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GroupInfoCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Purpose   string `protobuf:"bytes,6,opt,name=purpose,proto3" json:"purpose,omitempty"` //用途 不填默认为default
	AreaID    int64  `protobuf:"varint,5,opt,name=areaID,proto3" json:"areaID,omitempty"`  //分组可以属于某个区域下
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentID  int64  `protobuf:"varint,2,opt,name=parentID,proto3" json:"parentID,omitempty"`
	ProductID string `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	Desc      string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *GroupInfoCreateReq) Reset() {
	*x = GroupInfoCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoCreateReq) ProtoMessage() {}

func (x *GroupInfoCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoCreateReq.ProtoReflect.Descriptor instead.
func (*GroupInfoCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{125}
}

func (x *GroupInfoCreateReq) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *GroupInfoCreateReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *GroupInfoCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupInfoCreateReq) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *GroupInfoCreateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *GroupInfoCreateReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type GroupInfoReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // id
	WithChildren bool   `protobuf:"varint,2,opt,name=withChildren,proto3" json:"withChildren,omitempty"`
	Purpose      string `protobuf:"bytes,15,opt,name=purpose,proto3" json:"purpose,omitempty"` //用途 不填默认为default
}

func (x *GroupInfoReadReq) Reset() {
	*x = GroupInfoReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoReadReq) ProtoMessage() {}

func (x *GroupInfoReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoReadReq.ProtoReflect.Descriptor instead.
func (*GroupInfoReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{126}
}

func (x *GroupInfoReadReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupInfoReadReq) GetWithChildren() bool {
	if x != nil {
		return x.WithChildren
	}
	return false
}

func (x *GroupInfoReadReq) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

type GroupInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaID    int64             `protobuf:"varint,5,opt,name=areaID,proto3" json:"areaID,omitempty"` //分组可以属于某个区域下
	Page      *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Names     []string          `protobuf:"bytes,6,rep,name=names,proto3" json:"names,omitempty"`
	ParentID  int64             `protobuf:"varint,3,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Tags      map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Purpose   string            `protobuf:"bytes,15,opt,name=purpose,proto3" json:"purpose,omitempty"`   //用途 不填默认为default
	Purposes  []string          `protobuf:"bytes,16,rep,name=purposes,proto3" json:"purposes,omitempty"` //用途
	HasDevice *DeviceCore       `protobuf:"bytes,17,opt,name=hasDevice,proto3" json:"hasDevice,omitempty"`
}

func (x *GroupInfoIndexReq) Reset() {
	*x = GroupInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoIndexReq) ProtoMessage() {}

func (x *GroupInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoIndexReq.ProtoReflect.Descriptor instead.
func (*GroupInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{127}
}

func (x *GroupInfoIndexReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *GroupInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GroupInfoIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupInfoIndexReq) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *GroupInfoIndexReq) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *GroupInfoIndexReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GroupInfoIndexReq) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *GroupInfoIndexReq) GetPurposes() []string {
	if x != nil {
		return x.Purposes
	}
	return nil
}

func (x *GroupInfoIndexReq) GetHasDevice() *DeviceCore {
	if x != nil {
		return x.HasDevice
	}
	return nil
}

type GroupInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*GroupInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // repeated GroupInfo listAll = 3;
}

func (x *GroupInfoIndexResp) Reset() {
	*x = GroupInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoIndexResp) ProtoMessage() {}

func (x *GroupInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoIndexResp.ProtoReflect.Descriptor instead.
func (*GroupInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{128}
}

func (x *GroupInfoIndexResp) GetList() []*GroupInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GroupInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GroupInfoUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string            `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Tags      map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProductID string            `protobuf:"bytes,5,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *GroupInfoUpdateReq) Reset() {
	*x = GroupInfoUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoUpdateReq) ProtoMessage() {}

func (x *GroupInfoUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoUpdateReq.ProtoReflect.Descriptor instead.
func (*GroupInfoUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{129}
}

func (x *GroupInfoUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupInfoUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupInfoUpdateReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GroupInfoUpdateReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GroupInfoUpdateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type GroupDeviceMultiSaveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID int64         `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	List    []*DeviceCore `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GroupDeviceMultiSaveReq) Reset() {
	*x = GroupDeviceMultiSaveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDeviceMultiSaveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeviceMultiSaveReq) ProtoMessage() {}

func (x *GroupDeviceMultiSaveReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeviceMultiSaveReq.ProtoReflect.Descriptor instead.
func (*GroupDeviceMultiSaveReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{130}
}

func (x *GroupDeviceMultiSaveReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GroupDeviceMultiSaveReq) GetList() []*DeviceCore {
	if x != nil {
		return x.List
	}
	return nil
}

type GroupDeviceMultiDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID int64         `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	Purpose string        `protobuf:"bytes,2,opt,name=purpose,proto3" json:"purpose,omitempty"` //用途 不填默认为default
	List    []*DeviceCore `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GroupDeviceMultiDeleteReq) Reset() {
	*x = GroupDeviceMultiDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDeviceMultiDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeviceMultiDeleteReq) ProtoMessage() {}

func (x *GroupDeviceMultiDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeviceMultiDeleteReq.ProtoReflect.Descriptor instead.
func (*GroupDeviceMultiDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{131}
}

func (x *GroupDeviceMultiDeleteReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GroupDeviceMultiDeleteReq) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *GroupDeviceMultiDeleteReq) GetList() []*DeviceCore {
	if x != nil {
		return x.List
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"` //经度
	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`   //纬度
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{132}
}

func (x *Point) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Point) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                   `protobuf:"varint,34,opt,name=id,proto3" json:"id,omitempty"`
	TenantCode         string                  `protobuf:"bytes,26,opt,name=tenantCode,proto3" json:"tenantCode,omitempty"`                                                                                           //租户号,只有default租户能查到这个字段
	ProductID          string                  `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`                                                                                              //产品id 只读
	ProjectID          int64                   `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`                                                                                             //项目id 只读
	AreaID             int64                   `protobuf:"varint,3,opt,name=areaID,proto3" json:"areaID,omitempty"`                                                                                                   //项目区域id
	AreaIDPath         string                  `protobuf:"bytes,42,opt,name=areaIDPath,proto3" json:"areaIDPath,omitempty"`                                                                                           //区域id 路径
	ProductName        string                  `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`                                                                                          //产品名称 只读
	DeviceName         string                  `protobuf:"bytes,5,opt,name=deviceName,proto3" json:"deviceName,omitempty"`                                                                                            //设备名称 读写
	CreatedTime        int64                   `protobuf:"varint,6,opt,name=createdTime,proto3" json:"createdTime,omitempty"`                                                                                         //创建时间 只读
	Secret             string                  `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`                                                                                                    //设备秘钥 只读
	Cert               string                  `protobuf:"bytes,8,opt,name=cert,proto3" json:"cert,omitempty"`                                                                                                        // 设备证书  只读
	Imei               string                  `protobuf:"bytes,9,opt,name=imei,proto3" json:"imei,omitempty"`                                                                                                        //IMEI号信息 只读
	Mac                string                  `protobuf:"bytes,10,opt,name=mac,proto3" json:"mac,omitempty"`                                                                                                         //MAC号信息 只读
	Version            *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`                                                                                                 // 固件版本  读写
	HardInfo           string                  `protobuf:"bytes,12,opt,name=hardInfo,proto3" json:"hardInfo,omitempty"`                                                                                               //模组硬件型号 只读
	SoftInfo           string                  `protobuf:"bytes,13,opt,name=softInfo,proto3" json:"softInfo,omitempty"`                                                                                               //模组软件版本 只读
	Position           *Point                  `protobuf:"bytes,14,opt,name=Position,proto3" json:"Position,omitempty"`                                                                                               //设备定位,默认百度坐标系
	Address            *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=address,proto3" json:"address,omitempty"`                                                                                                 // 所在地址 读写
	Adcode             *wrapperspb.StringValue `protobuf:"bytes,45,opt,name=adcode,proto3" json:"adcode,omitempty"`                                                                                                   // 地区编码 读写
	Tags               map[string]string       `protobuf:"bytes,16,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               //设备标签
	IsOnline           int64                   `protobuf:"varint,17,opt,name=isOnline,proto3" json:"isOnline,omitempty"`                                                                                              //在线状态  1离线 2在线 只读
	FirstLogin         int64                   `protobuf:"varint,18,opt,name=firstLogin,proto3" json:"firstLogin,omitempty"`                                                                                          //激活时间 只读
	FirstBind          int64                   `protobuf:"varint,37,opt,name=firstBind,proto3" json:"firstBind,omitempty"`                                                                                            //第一次绑定的时间
	LastBind           int64                   `protobuf:"varint,50,opt,name=lastBind,proto3" json:"lastBind,omitempty"`                                                                                              //最后一次绑定时间
	LastLogin          int64                   `protobuf:"varint,19,opt,name=lastLogin,proto3" json:"lastLogin,omitempty"`                                                                                            //最后上线时间 只读
	LogLevel           int64                   `protobuf:"varint,20,opt,name=logLevel,proto3" json:"logLevel,omitempty"`                                                                                              // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	DeviceAlias        *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=deviceAlias,proto3" json:"deviceAlias,omitempty"`                                                                                         //设备别名 读写
	MobileOperator     int64                   `protobuf:"varint,22,opt,name=mobileOperator,proto3" json:"mobileOperator,omitempty"`                                                                                  //移动运营商:1)移动 2)联通 3)电信 4)广电
	Phone              *wrapperspb.StringValue `protobuf:"bytes,23,opt,name=phone,proto3" json:"phone,omitempty"`                                                                                                     //手机号
	Iccid              *wrapperspb.StringValue `protobuf:"bytes,24,opt,name=iccid,proto3" json:"iccid,omitempty"`                                                                                                     //SIM卡卡号
	SchemaAlias        map[string]string       `protobuf:"bytes,25,rep,name=schemaAlias,proto3" json:"schemaAlias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //设备物模型别名,如果是结构体类型则key为xxx.xxx
	Rssi               *wrapperspb.Int64Value  `protobuf:"bytes,27,opt,name=rssi,proto3" json:"rssi,omitempty"`                                                                                                       // 设备信号（信号极好[-55— 0]，信号好[-70— -55]，信号一般[-85— -70]，信号差[-100— -85]）
	RatedPower         int64                   `protobuf:"varint,28,opt,name=ratedPower,proto3" json:"ratedPower,omitempty"`                                                                                          // 额定功率:单位w/h
	ProtocolConf       map[string]string       `protobuf:"bytes,29,rep,name=protocolConf,proto3" json:"protocolConf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubProtocolConf    map[string]string       `protobuf:"bytes,51,rep,name=subProtocolConf,proto3" json:"subProtocolConf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status             int64                   `protobuf:"varint,30,opt,name=status,proto3" json:"status,omitempty"`                        //设备状态 1-未激活，2-在线，3-离线 4-异常(频繁上下线,告警中)
	IsEnable           int64                   `protobuf:"varint,31,opt,name=isEnable,proto3" json:"isEnable,omitempty"`                    //是否启用
	DeviceType         int64                   `protobuf:"varint,33,opt,name=deviceType,proto3" json:"deviceType,omitempty"`                //设备类型:1:设备,2:网关,3:子设备
	NetType            int64                   `protobuf:"varint,35,opt,name=netType,proto3" json:"netType,omitempty"`                      //网络类型
	Distributor        *IDPathWithUpdate       `protobuf:"bytes,36,opt,name=distributor,proto3" json:"distributor,omitempty"`               //过滤分销商的数据
	ExpTime            *wrapperspb.Int64Value  `protobuf:"bytes,38,opt,name=expTime,proto3" json:"expTime,omitempty"`                       //到期时间,如果为0,则不限制
	NeedConfirmJobID   int64                   `protobuf:"varint,39,opt,name=NeedConfirmJobID,proto3" json:"NeedConfirmJobID,omitempty"`    //需要app确认升级的任务ID,为0是没有
	NeedConfirmVersion string                  `protobuf:"bytes,40,opt,name=NeedConfirmVersion,proto3" json:"NeedConfirmVersion,omitempty"` //待确认升级的版本
	UserID             int64                   `protobuf:"varint,41,opt,name=userID,proto3" json:"userID,omitempty"`                        //拥有者的用户ID
	ProductImg         string                  `protobuf:"bytes,43,opt,name=productImg,proto3" json:"productImg,omitempty"`                 //产品图片
	CategoryID         int64                   `protobuf:"varint,44,opt,name=categoryID,proto3" json:"categoryID,omitempty"`                //产品品类
	LastIp             string                  `protobuf:"bytes,49,opt,name=lastIp,proto3" json:"lastIp,omitempty"`                         //最后登录的ip,只读
	Desc               *wrapperspb.StringValue `protobuf:"bytes,47,opt,name=desc,proto3" json:"desc,omitempty"`
	Dept               *IDPathWithUpdate       `protobuf:"bytes,52,opt,name=dept,proto3" json:"dept,omitempty"`                                                                                                       //过滤分销商的数据
	Gateway            *DeviceInfo             `protobuf:"bytes,46,opt,name=Gateway,proto3" json:"Gateway,omitempty"`                                                                                                 //子设备绑定的网关
	Sort               int64                   `protobuf:"varint,53,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                                      //排序
	GroupPurpose       string                  `protobuf:"bytes,58,opt,name=groupPurpose,proto3" json:"groupPurpose,omitempty"`                                                                                       //更新的时候使用,将设备该用途下的分组进行更新
	GroupIDs           []int64                 `protobuf:"varint,59,rep,packed,name=groupIDs,proto3" json:"groupIDs,omitempty"`                                                                                       //如果要更新分组,必须填写groupPurpose
	BelongGroup        map[string]*IDsInfo     `protobuf:"bytes,61,rep,name=BelongGroup,proto3" json:"BelongGroup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key是group的purpose, value是里面包含的分组id
	DeviceImg          string                  `protobuf:"bytes,54,opt,name=deviceImg,proto3" json:"deviceImg,omitempty"`                                                                                             //设备图片
	IsUpdateDeviceImg  bool                    `protobuf:"varint,55,opt,name=isUpdateDeviceImg,proto3" json:"isUpdateDeviceImg,omitempty"`                                                                            //只有这个参数为true的时候才会更新设备图片,传参为图片的file path
	File               string                  `protobuf:"bytes,56,opt,name=file,proto3" json:"file,omitempty"`                                                                                                       //设备文件
	IsUpdateFile       bool                    `protobuf:"varint,57,opt,name=isUpdateFile,proto3" json:"isUpdateFile,omitempty"`                                                                                      //只有这个参数为true的时候才会更新设备文件,传参为文件的file path
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{133}
}

func (x *DeviceInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceInfo) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *DeviceInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceInfo) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *DeviceInfo) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *DeviceInfo) GetAreaIDPath() string {
	if x != nil {
		return x.AreaIDPath
	}
	return ""
}

func (x *DeviceInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *DeviceInfo) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *DeviceInfo) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *DeviceInfo) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceInfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DeviceInfo) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DeviceInfo) GetHardInfo() string {
	if x != nil {
		return x.HardInfo
	}
	return ""
}

func (x *DeviceInfo) GetSoftInfo() string {
	if x != nil {
		return x.SoftInfo
	}
	return ""
}

func (x *DeviceInfo) GetPosition() *Point {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DeviceInfo) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DeviceInfo) GetAdcode() *wrapperspb.StringValue {
	if x != nil {
		return x.Adcode
	}
	return nil
}

func (x *DeviceInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DeviceInfo) GetIsOnline() int64 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *DeviceInfo) GetFirstLogin() int64 {
	if x != nil {
		return x.FirstLogin
	}
	return 0
}

func (x *DeviceInfo) GetFirstBind() int64 {
	if x != nil {
		return x.FirstBind
	}
	return 0
}

func (x *DeviceInfo) GetLastBind() int64 {
	if x != nil {
		return x.LastBind
	}
	return 0
}

func (x *DeviceInfo) GetLastLogin() int64 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

func (x *DeviceInfo) GetLogLevel() int64 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

func (x *DeviceInfo) GetDeviceAlias() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceAlias
	}
	return nil
}

func (x *DeviceInfo) GetMobileOperator() int64 {
	if x != nil {
		return x.MobileOperator
	}
	return 0
}

func (x *DeviceInfo) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *DeviceInfo) GetIccid() *wrapperspb.StringValue {
	if x != nil {
		return x.Iccid
	}
	return nil
}

func (x *DeviceInfo) GetSchemaAlias() map[string]string {
	if x != nil {
		return x.SchemaAlias
	}
	return nil
}

func (x *DeviceInfo) GetRssi() *wrapperspb.Int64Value {
	if x != nil {
		return x.Rssi
	}
	return nil
}

func (x *DeviceInfo) GetRatedPower() int64 {
	if x != nil {
		return x.RatedPower
	}
	return 0
}

func (x *DeviceInfo) GetProtocolConf() map[string]string {
	if x != nil {
		return x.ProtocolConf
	}
	return nil
}

func (x *DeviceInfo) GetSubProtocolConf() map[string]string {
	if x != nil {
		return x.SubProtocolConf
	}
	return nil
}

func (x *DeviceInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeviceInfo) GetIsEnable() int64 {
	if x != nil {
		return x.IsEnable
	}
	return 0
}

func (x *DeviceInfo) GetDeviceType() int64 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *DeviceInfo) GetNetType() int64 {
	if x != nil {
		return x.NetType
	}
	return 0
}

func (x *DeviceInfo) GetDistributor() *IDPathWithUpdate {
	if x != nil {
		return x.Distributor
	}
	return nil
}

func (x *DeviceInfo) GetExpTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExpTime
	}
	return nil
}

func (x *DeviceInfo) GetNeedConfirmJobID() int64 {
	if x != nil {
		return x.NeedConfirmJobID
	}
	return 0
}

func (x *DeviceInfo) GetNeedConfirmVersion() string {
	if x != nil {
		return x.NeedConfirmVersion
	}
	return ""
}

func (x *DeviceInfo) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *DeviceInfo) GetProductImg() string {
	if x != nil {
		return x.ProductImg
	}
	return ""
}

func (x *DeviceInfo) GetCategoryID() int64 {
	if x != nil {
		return x.CategoryID
	}
	return 0
}

func (x *DeviceInfo) GetLastIp() string {
	if x != nil {
		return x.LastIp
	}
	return ""
}

func (x *DeviceInfo) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *DeviceInfo) GetDept() *IDPathWithUpdate {
	if x != nil {
		return x.Dept
	}
	return nil
}

func (x *DeviceInfo) GetGateway() *DeviceInfo {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *DeviceInfo) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *DeviceInfo) GetGroupPurpose() string {
	if x != nil {
		return x.GroupPurpose
	}
	return ""
}

func (x *DeviceInfo) GetGroupIDs() []int64 {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

func (x *DeviceInfo) GetBelongGroup() map[string]*IDsInfo {
	if x != nil {
		return x.BelongGroup
	}
	return nil
}

func (x *DeviceInfo) GetDeviceImg() string {
	if x != nil {
		return x.DeviceImg
	}
	return ""
}

func (x *DeviceInfo) GetIsUpdateDeviceImg() bool {
	if x != nil {
		return x.IsUpdateDeviceImg
	}
	return false
}

func (x *DeviceInfo) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *DeviceInfo) GetIsUpdateFile() bool {
	if x != nil {
		return x.IsUpdateFile
	}
	return false
}

type ProductConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string   `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"` //产品id 只读
	DevInit   *DevInit `protobuf:"bytes,2,opt,name=DevInit,proto3" json:"DevInit,omitempty"`     //设备初始化配置
}

func (x *ProductConfig) Reset() {
	*x = ProductConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductConfig) ProtoMessage() {}

func (x *ProductConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductConfig.ProtoReflect.Descriptor instead.
func (*ProductConfig) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{134}
}

func (x *ProductConfig) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductConfig) GetDevInit() *DevInit {
	if x != nil {
		return x.DevInit
	}
	return nil
}

type DevInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantCode string `protobuf:"bytes,1,opt,name=tenantCode,proto3" json:"tenantCode,omitempty"` //设备创建默认分配给的租户
	ProjectID  int64  `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`  //设备创建默认分配给的项目
	AreaID     int64  `protobuf:"varint,3,opt,name=areaID,proto3" json:"areaID,omitempty"`        //设备创建默认分配给的区域ID
	DeptID     int64  `protobuf:"varint,4,opt,name=deptID,proto3" json:"deptID,omitempty"`        //设备创建默认分配给的部门
}

func (x *DevInit) Reset() {
	*x = DevInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevInit) ProtoMessage() {}

func (x *DevInit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevInit.ProtoReflect.Descriptor instead.
func (*DevInit) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{135}
}

func (x *DevInit) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *DevInit) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *DevInit) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *DevInit) GetDeptID() int64 {
	if x != nil {
		return x.DeptID
	}
	return 0
}

type ProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime        int64                       `protobuf:"varint,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"`                                                                           //创建时间 只读
	ProductID          string                      `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`                                                                                //产品id 只读
	ProductName        string                      `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`                                                                            //产品名称
	AuthMode           int64                       `protobuf:"varint,4,opt,name=authMode,proto3" json:"authMode,omitempty"`                                                                                 //认证方式:1:账密认证,2:秘钥认证
	DeviceType         int64                       `protobuf:"varint,5,opt,name=deviceType,proto3" json:"deviceType,omitempty"`                                                                             //设备类型:1:设备,2:网关,3:子设备
	CategoryID         int64                       `protobuf:"varint,6,opt,name=categoryID,proto3" json:"categoryID,omitempty"`                                                                             //产品品类
	NetType            int64                       `protobuf:"varint,7,opt,name=netType,proto3" json:"netType,omitempty"`                                                                                   //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	ProtocolCode       string                      `protobuf:"bytes,8,opt,name=protocolCode,proto3" json:"protocolCode,omitempty"`                                                                          //协议code,默认urMqtt,设备下发只会发送给主协议  urMqtt,urHttp,wumei,aliyun,huaweiyun,tuya
	SubProtocolCode    *wrapperspb.StringValue     `protobuf:"bytes,24,opt,name=subProtocolCode,proto3" json:"subProtocolCode,omitempty"`                                                                   //子协议,主协议和子协议传输类型必须不相同, 设备控制下发只会发送给主协议, 当设备是音视频设备但是控制协议需要单独走的时候就可以把主协议定义为普通协议,子协议定义为音视频协议,这样就能实现音视频走音视频协议,控制走子协议
	AutoRegister       int64                       `protobuf:"varint,9,opt,name=autoRegister,proto3" json:"autoRegister,omitempty"`                                                                         //动态注册:1:关闭,2:打开,3:打开并自动创建设备
	Secret             string                      `protobuf:"bytes,10,opt,name=secret,proto3" json:"secret,omitempty"`                                                                                     //动态注册产品秘钥 只读
	Desc               *wrapperspb.StringValue     `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                         //描述
	Tags               map[string]string           `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //产品标签
	ProductImg         string                      `protobuf:"bytes,14,opt,name=productImg,proto3" json:"productImg,omitempty"`                                                                             //产品图片
	IsUpdateProductImg bool                        `protobuf:"varint,15,opt,name=isUpdateProductImg,proto3" json:"isUpdateProductImg,omitempty"`                                                            //只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
	Protocol           *ProtocolInfo               `protobuf:"bytes,16,opt,name=protocol,proto3" json:"protocol,omitempty"`                                                                                 //主协议信息
	SubProtocol        *ProtocolInfo               `protobuf:"bytes,39,opt,name=subProtocol,proto3" json:"subProtocol,omitempty"`                                                                           //子协议信息
	Category           *ProductCategory            `protobuf:"bytes,17,opt,name=category,proto3" json:"category,omitempty"`
	ProtocolConf       map[string]string           `protobuf:"bytes,18,rep,name=protocolConf,proto3" json:"protocolConf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubProtocolConf    map[string]string           `protobuf:"bytes,25,rep,name=subProtocolConf,proto3" json:"subProtocolConf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TrialTime          *wrapperspb.Int64Value      `protobuf:"bytes,38,opt,name=trialTime,proto3" json:"trialTime,omitempty"`                                                                                       //试用时间(单位为天,为0不限制)
	SceneMode          string                      `protobuf:"bytes,19,opt,name=sceneMode,proto3" json:"sceneMode,omitempty"`                                                                                       //场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
	Status             int64                       `protobuf:"varint,20,opt,name=status,proto3" json:"status,omitempty"`                                                                                            //产品状态 1:启用 2:禁用 3:开发中
	CustomUi           map[string]*ProductCustomUi `protobuf:"bytes,21,rep,name=customUi,proto3" json:"customUi,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //自定义ui
	DeviceSchemaMode   int64                       `protobuf:"varint,22,opt,name=deviceSchemaMode,proto3" json:"deviceSchemaMode,omitempty"`                                                                        // 设备物模型模式:1:关闭,2:设备自动创建3: 设备自动创建及上报无定义自动创建
	BindLevel          int64                       `protobuf:"varint,23,opt,name=bindLevel,proto3" json:"bindLevel,omitempty"`                                                                                      //绑定级别: 1:强绑定(默认,只有用户解绑之后才能绑定) 2:中绑定(可以通过token强制绑定设备) 3:弱绑定(app可以内部解绑被绑定的设备)
	Config             *ProductConfig              `protobuf:"bytes,30,opt,name=config,proto3" json:"config,omitempty"`                                                                                             //产品配置
}

func (x *ProductInfo) Reset() {
	*x = ProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfo) ProtoMessage() {}

func (x *ProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfo.ProtoReflect.Descriptor instead.
func (*ProductInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{136}
}

func (x *ProductInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *ProductInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductInfo) GetAuthMode() int64 {
	if x != nil {
		return x.AuthMode
	}
	return 0
}

func (x *ProductInfo) GetDeviceType() int64 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *ProductInfo) GetCategoryID() int64 {
	if x != nil {
		return x.CategoryID
	}
	return 0
}

func (x *ProductInfo) GetNetType() int64 {
	if x != nil {
		return x.NetType
	}
	return 0
}

func (x *ProductInfo) GetProtocolCode() string {
	if x != nil {
		return x.ProtocolCode
	}
	return ""
}

func (x *ProductInfo) GetSubProtocolCode() *wrapperspb.StringValue {
	if x != nil {
		return x.SubProtocolCode
	}
	return nil
}

func (x *ProductInfo) GetAutoRegister() int64 {
	if x != nil {
		return x.AutoRegister
	}
	return 0
}

func (x *ProductInfo) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ProductInfo) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *ProductInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProductInfo) GetProductImg() string {
	if x != nil {
		return x.ProductImg
	}
	return ""
}

func (x *ProductInfo) GetIsUpdateProductImg() bool {
	if x != nil {
		return x.IsUpdateProductImg
	}
	return false
}

func (x *ProductInfo) GetProtocol() *ProtocolInfo {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *ProductInfo) GetSubProtocol() *ProtocolInfo {
	if x != nil {
		return x.SubProtocol
	}
	return nil
}

func (x *ProductInfo) GetCategory() *ProductCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ProductInfo) GetProtocolConf() map[string]string {
	if x != nil {
		return x.ProtocolConf
	}
	return nil
}

func (x *ProductInfo) GetSubProtocolConf() map[string]string {
	if x != nil {
		return x.SubProtocolConf
	}
	return nil
}

func (x *ProductInfo) GetTrialTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.TrialTime
	}
	return nil
}

func (x *ProductInfo) GetSceneMode() string {
	if x != nil {
		return x.SceneMode
	}
	return ""
}

func (x *ProductInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductInfo) GetCustomUi() map[string]*ProductCustomUi {
	if x != nil {
		return x.CustomUi
	}
	return nil
}

func (x *ProductInfo) GetDeviceSchemaMode() int64 {
	if x != nil {
		return x.DeviceSchemaMode
	}
	return 0
}

func (x *ProductInfo) GetBindLevel() int64 {
	if x != nil {
		return x.BindLevel
	}
	return 0
}

func (x *ProductInfo) GetConfig() *ProductConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ProductCustomUi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Version    int64  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"` //版本号,递增
	IsUpdateUi bool   `protobuf:"varint,4,opt,name=isUpdateUi,proto3" json:"isUpdateUi,omitempty"`
}

func (x *ProductCustomUi) Reset() {
	*x = ProductCustomUi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCustomUi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCustomUi) ProtoMessage() {}

func (x *ProductCustomUi) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCustomUi.ProtoReflect.Descriptor instead.
func (*ProductCustomUi) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{137}
}

func (x *ProductCustomUi) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ProductCustomUi) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProductCustomUi) GetIsUpdateUi() bool {
	if x != nil {
		return x.IsUpdateUi
	}
	return false
}

type ProductInfoDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"` //产品id
}

func (x *ProductInfoDeleteReq) Reset() {
	*x = ProductInfoDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfoDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfoDeleteReq) ProtoMessage() {}

func (x *ProductInfoDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfoDeleteReq.ProtoReflect.Descriptor instead.
func (*ProductInfoDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{138}
}

func (x *ProductInfoDeleteReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type ProductInfoReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID    string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"` //产品id
	WithProtocol bool   `protobuf:"varint,2,opt,name=withProtocol,proto3" json:"withProtocol,omitempty"`
	WithCategory bool   `protobuf:"varint,3,opt,name=withCategory,proto3" json:"withCategory,omitempty"`
}

func (x *ProductInfoReadReq) Reset() {
	*x = ProductInfoReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfoReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfoReadReq) ProtoMessage() {}

func (x *ProductInfoReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfoReadReq.ProtoReflect.Descriptor instead.
func (*ProductInfoReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{139}
}

func (x *ProductInfoReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductInfoReadReq) GetWithProtocol() bool {
	if x != nil {
		return x.WithProtocol
	}
	return false
}

func (x *ProductInfoReadReq) GetWithCategory() bool {
	if x != nil {
		return x.WithCategory
	}
	return false
}

type ProductInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`              //分页信息 只获取一个则不填
	DeviceType    int64             `protobuf:"varint,2,opt,name=deviceType,proto3" json:"deviceType,omitempty"` //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
	DeviceTypes   []int64           `protobuf:"varint,10,rep,packed,name=deviceTypes,proto3" json:"deviceTypes,omitempty"`
	ProductName   string            `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`                                                                                           //过滤条件: 产品名称
	ProductIDs    []string          `protobuf:"bytes,4,rep,name=productIDs,proto3" json:"productIDs,omitempty"`                                                                                             //过滤产品id列表
	Tags          map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                 //key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
	ProtocolConf  map[string]string `protobuf:"bytes,6,rep,name=protocolConf,proto3" json:"protocolConf,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //协议配置查询
	ProtocolCode  string            `protobuf:"bytes,7,opt,name=protocolCode,proto3" json:"protocolCode,omitempty"`
	ProtocolType  string            `protobuf:"bytes,25,opt,name=protocolType,proto3" json:"protocolType,omitempty"`   //协议类型
	ProtocolTrans string            `protobuf:"bytes,26,opt,name=protocolTrans,proto3" json:"protocolTrans,omitempty"` //传输层协议类型
	WithProtocol  bool              `protobuf:"varint,8,opt,name=withProtocol,proto3" json:"withProtocol,omitempty"`
	WithCategory  bool              `protobuf:"varint,9,opt,name=withCategory,proto3" json:"withCategory,omitempty"`
	SceneMode     string            `protobuf:"bytes,16,opt,name=sceneMode,proto3" json:"sceneMode,omitempty"`             //场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
	SceneModes    []string          `protobuf:"bytes,17,rep,name=sceneModes,proto3" json:"sceneModes,omitempty"`           //场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
	Status        int64             `protobuf:"varint,20,opt,name=status,proto3" json:"status,omitempty"`                  //产品状态 1:启用 2:禁用 3:开发中
	Statuses      []int64           `protobuf:"varint,21,rep,packed,name=statuses,proto3" json:"statuses,omitempty"`       //产品状态 1:启用 2:禁用 3:开发中
	NetType       int64             `protobuf:"varint,11,opt,name=netType,proto3" json:"netType,omitempty"`                //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	ProjectID     int64             `protobuf:"varint,12,opt,name=projectID,proto3" json:"projectID,omitempty"`            //项目id,只获取项目下有设备的
	AreaID        int64             `protobuf:"varint,22,opt,name=areaID,proto3" json:"areaID,omitempty"`                  //区域下有设备的产品列表
	AreaIDPath    string            `protobuf:"bytes,24,opt,name=areaIDPath,proto3" json:"areaIDPath,omitempty"`           //区域路径过滤
	CategoryIDs   []int64           `protobuf:"varint,23,rep,packed,name=categoryIDs,proto3" json:"categoryIDs,omitempty"` //产品品类
}

func (x *ProductInfoIndexReq) Reset() {
	*x = ProductInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfoIndexReq) ProtoMessage() {}

func (x *ProductInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfoIndexReq.ProtoReflect.Descriptor instead.
func (*ProductInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{140}
}

func (x *ProductInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProductInfoIndexReq) GetDeviceType() int64 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *ProductInfoIndexReq) GetDeviceTypes() []int64 {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

func (x *ProductInfoIndexReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductInfoIndexReq) GetProductIDs() []string {
	if x != nil {
		return x.ProductIDs
	}
	return nil
}

func (x *ProductInfoIndexReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProductInfoIndexReq) GetProtocolConf() map[string]string {
	if x != nil {
		return x.ProtocolConf
	}
	return nil
}

func (x *ProductInfoIndexReq) GetProtocolCode() string {
	if x != nil {
		return x.ProtocolCode
	}
	return ""
}

func (x *ProductInfoIndexReq) GetProtocolType() string {
	if x != nil {
		return x.ProtocolType
	}
	return ""
}

func (x *ProductInfoIndexReq) GetProtocolTrans() string {
	if x != nil {
		return x.ProtocolTrans
	}
	return ""
}

func (x *ProductInfoIndexReq) GetWithProtocol() bool {
	if x != nil {
		return x.WithProtocol
	}
	return false
}

func (x *ProductInfoIndexReq) GetWithCategory() bool {
	if x != nil {
		return x.WithCategory
	}
	return false
}

func (x *ProductInfoIndexReq) GetSceneMode() string {
	if x != nil {
		return x.SceneMode
	}
	return ""
}

func (x *ProductInfoIndexReq) GetSceneModes() []string {
	if x != nil {
		return x.SceneModes
	}
	return nil
}

func (x *ProductInfoIndexReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ProductInfoIndexReq) GetStatuses() []int64 {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ProductInfoIndexReq) GetNetType() int64 {
	if x != nil {
		return x.NetType
	}
	return 0
}

func (x *ProductInfoIndexReq) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *ProductInfoIndexReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *ProductInfoIndexReq) GetAreaIDPath() string {
	if x != nil {
		return x.AreaIDPath
	}
	return ""
}

func (x *ProductInfoIndexReq) GetCategoryIDs() []int64 {
	if x != nil {
		return x.CategoryIDs
	}
	return nil
}

type ProductInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProductInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //产品信息
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *ProductInfoIndexResp) Reset() {
	*x = ProductInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfoIndexResp) ProtoMessage() {}

func (x *ProductInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfoIndexResp.ProtoReflect.Descriptor instead.
func (*ProductInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{141}
}

func (x *ProductInfoIndexResp) GetList() []*ProductInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProductInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeviceOnlineMultiFixReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DeviceOnlineMultiFix `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *DeviceOnlineMultiFixReq) Reset() {
	*x = DeviceOnlineMultiFixReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceOnlineMultiFixReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceOnlineMultiFixReq) ProtoMessage() {}

func (x *DeviceOnlineMultiFixReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceOnlineMultiFixReq.ProtoReflect.Descriptor instead.
func (*DeviceOnlineMultiFixReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{142}
}

func (x *DeviceOnlineMultiFixReq) GetDevices() []*DeviceOnlineMultiFix {
	if x != nil {
		return x.Devices
	}
	return nil
}

type DeviceOnlineMultiFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device    *DeviceCore `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	IsOnline  int64       `protobuf:"varint,2,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	ConnectAt int64       `protobuf:"varint,3,opt,name=connectAt,proto3" json:"connectAt,omitempty"`
}

func (x *DeviceOnlineMultiFix) Reset() {
	*x = DeviceOnlineMultiFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceOnlineMultiFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceOnlineMultiFix) ProtoMessage() {}

func (x *DeviceOnlineMultiFix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceOnlineMultiFix.ProtoReflect.Descriptor instead.
func (*DeviceOnlineMultiFix) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{143}
}

func (x *DeviceOnlineMultiFix) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceOnlineMultiFix) GetIsOnline() int64 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *DeviceOnlineMultiFix) GetConnectAt() int64 {
	if x != nil {
		return x.ConnectAt
	}
	return 0
}

type DeviceInfoDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名称
}

func (x *DeviceInfoDeleteReq) Reset() {
	*x = DeviceInfoDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoDeleteReq) ProtoMessage() {}

func (x *DeviceInfoDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoDeleteReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{144}
}

func (x *DeviceInfoDeleteReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceInfoDeleteReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type DeviceCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名称
}

func (x *DeviceCore) Reset() {
	*x = DeviceCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCore) ProtoMessage() {}

func (x *DeviceCore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCore.ProtoReflect.Descriptor instead.
func (*DeviceCore) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{145}
}

func (x *DeviceCore) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceCore) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type DeviceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名称
	DataID     string `protobuf:"bytes,3,opt,name=dataID,proto3" json:"dataID,omitempty"`         //属性id
}

func (x *DeviceData) Reset() {
	*x = DeviceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceData) ProtoMessage() {}

func (x *DeviceData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceData.ProtoReflect.Descriptor instead.
func (*DeviceData) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{146}
}

func (x *DeviceData) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceData) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceData) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

type DeviceError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名称
	Code       int64  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Msg        string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeviceError) Reset() {
	*x = DeviceError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceError) ProtoMessage() {}

func (x *DeviceError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceError.ProtoReflect.Descriptor instead.
func (*DeviceError) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{147}
}

func (x *DeviceError) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceError) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceError) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeviceError) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DeviceInfoReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID   string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`      //产品id
	DeviceName  string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`    //设备名称
	WithGateway bool   `protobuf:"varint,3,opt,name=withGateway,proto3" json:"withGateway,omitempty"` //同时返回子设备的网关
}

func (x *DeviceInfoReadReq) Reset() {
	*x = DeviceInfoReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoReadReq) ProtoMessage() {}

func (x *DeviceInfoReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoReadReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{148}
}

func (x *DeviceInfoReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceInfoReadReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfoReadReq) GetWithGateway() bool {
	if x != nil {
		return x.WithGateway
	}
	return false
}

type DeviceInfoMultiUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices             []*DeviceCore `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"` //产品id
	FilterDistributorID *CompareInt64 `protobuf:"bytes,2,opt,name=FilterDistributorID,proto3" json:"FilterDistributorID,omitempty"`
	AreaID              int64         `protobuf:"varint,4,opt,name=areaID,proto3" json:"areaID,omitempty"`           //项目区域id
	Distributor         *IDPath       `protobuf:"bytes,20,opt,name=distributor,proto3" json:"distributor,omitempty"` //分销商的数据
	RatedPower          int64         `protobuf:"varint,28,opt,name=ratedPower,proto3" json:"ratedPower,omitempty"`  // 额定功率:单位w/h
}

func (x *DeviceInfoMultiUpdateReq) Reset() {
	*x = DeviceInfoMultiUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoMultiUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoMultiUpdateReq) ProtoMessage() {}

func (x *DeviceInfoMultiUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoMultiUpdateReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoMultiUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{149}
}

func (x *DeviceInfoMultiUpdateReq) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *DeviceInfoMultiUpdateReq) GetFilterDistributorID() *CompareInt64 {
	if x != nil {
		return x.FilterDistributorID
	}
	return nil
}

func (x *DeviceInfoMultiUpdateReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *DeviceInfoMultiUpdateReq) GetDistributor() *IDPath {
	if x != nil {
		return x.Distributor
	}
	return nil
}

func (x *DeviceInfoMultiUpdateReq) GetRatedPower() int64 {
	if x != nil {
		return x.RatedPower
	}
	return 0
}

type DeviceInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page               *PageInfo                 `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`                                                                                                  //分页信息 只获取一个则不填
	ProductID          string                    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`                                                                                        //过滤条件: 产品id
	ProductIDs         []string                  `protobuf:"bytes,23,rep,name=productIDs,proto3" json:"productIDs,omitempty"`                                                                                     //过滤条件: 产品id
	DeviceName         string                    `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`                                                                                      //过滤条件:模糊查询 设备名
	DeviceNames        []string                  `protobuf:"bytes,4,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"`                                                                                    //过滤条件:精准查询 设备名
	Tags               map[string]string         `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`          //key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
	TagsLike           map[string]string         `protobuf:"bytes,46,rep,name=tagsLike,proto3" json:"tagsLike,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key tag过滤查询,模糊查询 为tag的名,value为tag对应的值
	Range              int64                     `protobuf:"varint,6,opt,name=range,proto3" json:"range,omitempty"`                                                                                               //过滤条件:取距离坐标点固定范围内的设备
	Position           *Point                    `protobuf:"bytes,7,opt,name=Position,proto3" json:"Position,omitempty"`                                                                                          //设备定位,默认百度坐标系
	AreaIDs            []int64                   `protobuf:"varint,8,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"`                                                                                    //区域ids
	AreaIDPath         string                    `protobuf:"bytes,32,opt,name=areaIDPath,proto3" json:"areaIDPath,omitempty"`                                                                                     //区域路径过滤
	DeviceAlias        string                    `protobuf:"bytes,9,opt,name=deviceAlias,proto3" json:"deviceAlias,omitempty"`                                                                                    //过滤条件:模糊查询 设备别名
	IsOnline           int64                     `protobuf:"varint,10,opt,name=isOnline,proto3" json:"isOnline,omitempty"`                                                                                        //在线状态过滤  1离线 2在线
	ProductCategoryID  int64                     `protobuf:"varint,11,opt,name=productCategoryID,proto3" json:"productCategoryID,omitempty"`                                                                      //产品品类id
	ProductCategoryIDs []int64                   `protobuf:"varint,33,rep,packed,name=productCategoryIDs,proto3" json:"productCategoryIDs,omitempty"`                                                             //产品品类id
	Devices            []*DeviceCore             `protobuf:"bytes,12,rep,name=devices,proto3" json:"devices,omitempty"`
	WithShared         int64                     `protobuf:"varint,13,opt,name=withShared,proto3" json:"withShared,omitempty"`   //过滤分享的设备(这里只获取分享的设备) 1: 同时获取分享的设备 2:只获取分享的设备
	WithCollect        int64                     `protobuf:"varint,24,opt,name=withCollect,proto3" json:"withCollect,omitempty"` //过滤收藏的设备(这里只获取收藏的设备) 1: 同时获取收藏的设备 2:只获取收藏的设备
	NetType            int64                     `protobuf:"varint,25,opt,name=netType,proto3" json:"netType,omitempty"`         //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	TenantCode         string                    `protobuf:"bytes,14,opt,name=tenantCode,proto3" json:"tenantCode,omitempty"`    //租户过滤
	Versions           []string                  `protobuf:"bytes,15,rep,name=versions,proto3" json:"versions,omitempty"`        //版本列表
	NotVersion         string                    `protobuf:"bytes,39,opt,name=notVersion,proto3" json:"notVersion,omitempty"`    //非版本
	DeviceType         int64                     `protobuf:"varint,16,opt,name=deviceType,proto3" json:"deviceType,omitempty"`   //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
	DeviceTypes        []int64                   `protobuf:"varint,21,rep,packed,name=deviceTypes,proto3" json:"deviceTypes,omitempty"`
	Gateway            *DeviceCore               `protobuf:"bytes,17,opt,name=gateway,proto3" json:"gateway,omitempty"` //获取网关下子设备列表
	GroupID            int64                     `protobuf:"varint,18,opt,name=groupID,proto3" json:"groupID,omitempty"`
	NotGroupID         int64                     `protobuf:"varint,19,opt,name=notGroupID,proto3" json:"notGroupID,omitempty"`
	ParentGroupID      int64                     `protobuf:"varint,42,opt,name=parentGroupID,proto3" json:"parentGroupID,omitempty"`
	GroupPurpose       string                    `protobuf:"bytes,45,opt,name=groupPurpose,proto3" json:"groupPurpose,omitempty"` //设备分组用途 不填默认为default
	GroupName          string                    `protobuf:"bytes,43,opt,name=groupName,proto3" json:"groupName,omitempty"`       //模糊查询
	NotAreaID          int64                     `protobuf:"varint,29,opt,name=notAreaID,proto3" json:"notAreaID,omitempty"`
	Distributor        *IDPath                   `protobuf:"bytes,20,opt,name=distributor,proto3" json:"distributor,omitempty"` //过滤分销商的数据
	Status             int64                     `protobuf:"varint,22,opt,name=status,proto3" json:"status,omitempty"`
	Statuses           []int64                   `protobuf:"varint,35,rep,packed,name=statuses,proto3" json:"statuses,omitempty"`
	RatedPower         *CompareInt64             `protobuf:"bytes,28,opt,name=ratedPower,proto3" json:"ratedPower,omitempty"`     // 额定功率:单位w/h
	HasOwner           int64                     `protobuf:"varint,30,opt,name=hasOwner,proto3" json:"hasOwner,omitempty"`        //是否被人拥有
	UserID             int64                     `protobuf:"varint,31,opt,name=userID,proto3" json:"userID,omitempty"`            //用户id查询
	ExpTime            *CompareInt64             `protobuf:"bytes,38,opt,name=expTime,proto3" json:"expTime,omitempty"`           //到期时间
	Iccid              string                    `protobuf:"bytes,40,opt,name=iccid,proto3" json:"iccid,omitempty"`               //SIM卡卡号
	WithGateway        bool                      `protobuf:"varint,41,opt,name=withGateway,proto3" json:"withGateway,omitempty"`  //同时返回子设备的网关
	ProtocolCode       string                    `protobuf:"bytes,51,opt,name=protocolCode,proto3" json:"protocolCode,omitempty"` //协议查询
	Rssi               *CompareInt64             `protobuf:"bytes,52,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Dept               *IDPath                   `protobuf:"bytes,53,opt,name=dept,proto3" json:"dept,omitempty"`                                                                                                 //过滤分销商的数据
	Property           map[string]*CompareString `protobuf:"bytes,54,rep,name=Property,proto3" json:"Property,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //设备最新属性过滤,key为属性的id,如果是结构体则key为 aaa.bbb 数组为aaa.1
}

func (x *DeviceInfoIndexReq) Reset() {
	*x = DeviceInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoIndexReq) ProtoMessage() {}

func (x *DeviceInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoIndexReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{150}
}

func (x *DeviceInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetProductIDs() []string {
	if x != nil {
		return x.ProductIDs
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetTagsLike() map[string]string {
	if x != nil {
		return x.TagsLike
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetPosition() *Point {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetAreaIDPath() string {
	if x != nil {
		return x.AreaIDPath
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetDeviceAlias() string {
	if x != nil {
		return x.DeviceAlias
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetIsOnline() int64 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetProductCategoryID() int64 {
	if x != nil {
		return x.ProductCategoryID
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetProductCategoryIDs() []int64 {
	if x != nil {
		return x.ProductCategoryIDs
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetWithShared() int64 {
	if x != nil {
		return x.WithShared
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetWithCollect() int64 {
	if x != nil {
		return x.WithCollect
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetNetType() int64 {
	if x != nil {
		return x.NetType
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetNotVersion() string {
	if x != nil {
		return x.NotVersion
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetDeviceType() int64 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetDeviceTypes() []int64 {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetGateway() *DeviceCore {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetNotGroupID() int64 {
	if x != nil {
		return x.NotGroupID
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetParentGroupID() int64 {
	if x != nil {
		return x.ParentGroupID
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetGroupPurpose() string {
	if x != nil {
		return x.GroupPurpose
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetNotAreaID() int64 {
	if x != nil {
		return x.NotAreaID
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetDistributor() *IDPath {
	if x != nil {
		return x.Distributor
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetStatuses() []int64 {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetRatedPower() *CompareInt64 {
	if x != nil {
		return x.RatedPower
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetHasOwner() int64 {
	if x != nil {
		return x.HasOwner
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetExpTime() *CompareInt64 {
	if x != nil {
		return x.ExpTime
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetIccid() string {
	if x != nil {
		return x.Iccid
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetWithGateway() bool {
	if x != nil {
		return x.WithGateway
	}
	return false
}

func (x *DeviceInfoIndexReq) GetProtocolCode() string {
	if x != nil {
		return x.ProtocolCode
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetRssi() *CompareInt64 {
	if x != nil {
		return x.Rssi
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetDept() *IDPath {
	if x != nil {
		return x.Dept
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetProperty() map[string]*CompareString {
	if x != nil {
		return x.Property
	}
	return nil
}

type DeviceInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*DeviceInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //设备信息
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *DeviceInfoIndexResp) Reset() {
	*x = DeviceInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoIndexResp) ProtoMessage() {}

func (x *DeviceInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoIndexResp.ProtoReflect.Descriptor instead.
func (*DeviceInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{151}
}

func (x *DeviceInfoIndexResp) GetList() []*DeviceInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *DeviceInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type RootCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`       //用户名
	Password    string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`       //密码
	ClientID    string `protobuf:"bytes,3,opt,name=clientID,proto3" json:"clientID,omitempty"`       //clientID
	Ip          string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`                   //访问的ip地址
	Certificate []byte `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"` //客户端证书
}

func (x *RootCheckReq) Reset() {
	*x = RootCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootCheckReq) ProtoMessage() {}

func (x *RootCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootCheckReq.ProtoReflect.Descriptor instead.
func (*RootCheckReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{152}
}

func (x *RootCheckReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RootCheckReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RootCheckReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *RootCheckReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RootCheckReq) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type CommonSchemaUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CommonSchemaInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` //物模型信息
}

func (x *CommonSchemaUpdateReq) Reset() {
	*x = CommonSchemaUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSchemaUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSchemaUpdateReq) ProtoMessage() {}

func (x *CommonSchemaUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSchemaUpdateReq.ProtoReflect.Descriptor instead.
func (*CommonSchemaUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{153}
}

func (x *CommonSchemaUpdateReq) GetInfo() *CommonSchemaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CommonSchemaCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CommonSchemaInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` //物模型信息
}

func (x *CommonSchemaCreateReq) Reset() {
	*x = CommonSchemaCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSchemaCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSchemaCreateReq) ProtoMessage() {}

func (x *CommonSchemaCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSchemaCreateReq.ProtoReflect.Descriptor instead.
func (*CommonSchemaCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{154}
}

func (x *CommonSchemaCreateReq) GetInfo() *CommonSchemaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CommonSchemaIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page                      *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`             //分页信息 只获取一个则不填
	ProductIDs                []string  `protobuf:"bytes,2,rep,name=productIDs,proto3" json:"productIDs,omitempty"` //有这个属性的产品id列表
	Type                      int64     `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`            //物模型类型 1:property属性 2:event事件 3:action行为
	Types                     []int64   `protobuf:"varint,20,rep,packed,name=types,proto3" json:"types,omitempty"`
	Identifiers               []string  `protobuf:"bytes,5,rep,name=identifiers,proto3" json:"identifiers,omitempty"` //过滤标识符列表
	Name                      string    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`               //标识符名字过滤
	WithProductCategory       bool      `protobuf:"varint,4,opt,name=withProductCategory,proto3" json:"withProductCategory,omitempty"`
	ProductCategoryID         int64     `protobuf:"varint,7,opt,name=productCategoryID,proto3" json:"productCategoryID,omitempty"`                 //过滤属于该产品品类的物模型
	ProductCategoryWithFather bool      `protobuf:"varint,8,opt,name=productCategoryWithFather,proto3" json:"productCategoryWithFather,omitempty"` //同时返回父节点的物模型
	IsCanSceneLinkage         int64     `protobuf:"varint,9,opt,name=isCanSceneLinkage,proto3" json:"isCanSceneLinkage,omitempty"`                 //是否支持场景联动控制
	FuncGroup                 int64     `protobuf:"varint,14,opt,name=funcGroup,proto3" json:"funcGroup,omitempty"`                                // 功能分类: 1:普通功能 2:系统功能
	UserPerm                  int64     `protobuf:"varint,15,opt,name=userPerm,proto3" json:"userPerm,omitempty"`                                  //用户权限操作: 1:r(只读) 3:rw(可读可写)
	AreaID                    int64     `protobuf:"varint,16,opt,name=areaID,proto3" json:"areaID,omitempty"`                                      //过滤区域下设备共有的物模型
	AreaIDPath                string    `protobuf:"bytes,23,opt,name=areaIDPath,proto3" json:"areaIDPath,omitempty"`                               //区域路径过滤
	ProjectID                 int64     `protobuf:"varint,24,opt,name=projectID,proto3" json:"projectID,omitempty"`                                //过滤项目下设备共有的物模型
	GroupID                   int64     `protobuf:"varint,17,opt,name=groupID,proto3" json:"groupID,omitempty"`                                    //过滤分组下设备共有的物模型
	GroupIDs                  []int64   `protobuf:"varint,18,rep,packed,name=groupIDs,proto3" json:"groupIDs,omitempty"`                           //过滤分组下设备共有的物模型
	PropertyMode              string    `protobuf:"bytes,19,opt,name=propertyMode,proto3" json:"propertyMode,omitempty"`                           //属性类型可用 读写类型: 1:r(只读) 2:rw(可读可写)
	ControlMode               int64     `protobuf:"varint,21,opt,name=controlMode,proto3" json:"controlMode,omitempty"`                            //控制模式: 1: 可以群控,可以单控  2:只能单控
	ProductSceneMode          string    `protobuf:"bytes,22,opt,name=productSceneMode,proto3" json:"productSceneMode,omitempty"`                   //产品场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
}

func (x *CommonSchemaIndexReq) Reset() {
	*x = CommonSchemaIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSchemaIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSchemaIndexReq) ProtoMessage() {}

func (x *CommonSchemaIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSchemaIndexReq.ProtoReflect.Descriptor instead.
func (*CommonSchemaIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{155}
}

func (x *CommonSchemaIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonSchemaIndexReq) GetProductIDs() []string {
	if x != nil {
		return x.ProductIDs
	}
	return nil
}

func (x *CommonSchemaIndexReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommonSchemaIndexReq) GetTypes() []int64 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *CommonSchemaIndexReq) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *CommonSchemaIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommonSchemaIndexReq) GetWithProductCategory() bool {
	if x != nil {
		return x.WithProductCategory
	}
	return false
}

func (x *CommonSchemaIndexReq) GetProductCategoryID() int64 {
	if x != nil {
		return x.ProductCategoryID
	}
	return 0
}

func (x *CommonSchemaIndexReq) GetProductCategoryWithFather() bool {
	if x != nil {
		return x.ProductCategoryWithFather
	}
	return false
}

func (x *CommonSchemaIndexReq) GetIsCanSceneLinkage() int64 {
	if x != nil {
		return x.IsCanSceneLinkage
	}
	return 0
}

func (x *CommonSchemaIndexReq) GetFuncGroup() int64 {
	if x != nil {
		return x.FuncGroup
	}
	return 0
}

func (x *CommonSchemaIndexReq) GetUserPerm() int64 {
	if x != nil {
		return x.UserPerm
	}
	return 0
}

func (x *CommonSchemaIndexReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *CommonSchemaIndexReq) GetAreaIDPath() string {
	if x != nil {
		return x.AreaIDPath
	}
	return ""
}

func (x *CommonSchemaIndexReq) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *CommonSchemaIndexReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *CommonSchemaIndexReq) GetGroupIDs() []int64 {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

func (x *CommonSchemaIndexReq) GetPropertyMode() string {
	if x != nil {
		return x.PropertyMode
	}
	return ""
}

func (x *CommonSchemaIndexReq) GetControlMode() int64 {
	if x != nil {
		return x.ControlMode
	}
	return 0
}

func (x *CommonSchemaIndexReq) GetProductSceneMode() string {
	if x != nil {
		return x.ProductSceneMode
	}
	return ""
}

type CommonSchemaIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*CommonSchemaInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *CommonSchemaIndexResp) Reset() {
	*x = CommonSchemaIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSchemaIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSchemaIndexResp) ProtoMessage() {}

func (x *CommonSchemaIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSchemaIndexResp.ProtoReflect.Descriptor instead.
func (*CommonSchemaIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{156}
}

func (x *CommonSchemaIndexResp) GetList() []*CommonSchemaInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonSchemaIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CommonSchemaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              int64                   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                           //物模型类型 1:property属性 2:event事件 3:action行为
	Identifier        string                  `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`                //标识符
	Name              *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                            //功能名称
	Desc              *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`                            //描述
	Required          int64                   `protobuf:"varint,7,opt,name=required,proto3" json:"required,omitempty"`                   //是否必须 1:是 2:否
	IsCanSceneLinkage int64                   `protobuf:"varint,8,opt,name=isCanSceneLinkage,proto3" json:"isCanSceneLinkage,omitempty"` //是否支持场景联动控制
	FuncGroup         int64                   `protobuf:"varint,14,opt,name=funcGroup,proto3" json:"funcGroup,omitempty"`                // 功能分类: 1:普通功能 2:系统功能
	UserPerm          int64                   `protobuf:"varint,15,opt,name=userPerm,proto3" json:"userPerm,omitempty"`                  //用户权限操作: 1:r(只读) 3:rw(可读可写)
	IsHistory         int64                   `protobuf:"varint,10,opt,name=isHistory,proto3" json:"isHistory,omitempty"`                // 是否存储历史记录
	IsPassword        int64                   `protobuf:"varint,17,opt,name=isPassword,proto3" json:"isPassword,omitempty"`              // 是否是密码类型,密码类型需要加掩码
	Affordance        *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=affordance,proto3" json:"affordance,omitempty"`               //各功能类型的详细参数定义
	ExtendConfig      string                  `protobuf:"bytes,12,opt,name=extendConfig,proto3" json:"extendConfig,omitempty"`           //拓展参数
	Order             int64                   `protobuf:"varint,13,opt,name=order,proto3" json:"order,omitempty"`                        //排序
	ControlMode       int64                   `protobuf:"varint,16,opt,name=controlMode,proto3" json:"controlMode,omitempty"`            //控制模式: 1: 可以群控,可以单控  2:只能单控
	ProductCategories []*ProductCategory      `protobuf:"bytes,3,rep,name=productCategories,proto3" json:"productCategories,omitempty"`  //绑定的产品品类(如果绑定了,则该品类下的产品会自动新增并不允许删除)
}

func (x *CommonSchemaInfo) Reset() {
	*x = CommonSchemaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSchemaInfo) ProtoMessage() {}

func (x *CommonSchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSchemaInfo.ProtoReflect.Descriptor instead.
func (*CommonSchemaInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{157}
}

func (x *CommonSchemaInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommonSchemaInfo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommonSchemaInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *CommonSchemaInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CommonSchemaInfo) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *CommonSchemaInfo) GetRequired() int64 {
	if x != nil {
		return x.Required
	}
	return 0
}

func (x *CommonSchemaInfo) GetIsCanSceneLinkage() int64 {
	if x != nil {
		return x.IsCanSceneLinkage
	}
	return 0
}

func (x *CommonSchemaInfo) GetFuncGroup() int64 {
	if x != nil {
		return x.FuncGroup
	}
	return 0
}

func (x *CommonSchemaInfo) GetUserPerm() int64 {
	if x != nil {
		return x.UserPerm
	}
	return 0
}

func (x *CommonSchemaInfo) GetIsHistory() int64 {
	if x != nil {
		return x.IsHistory
	}
	return 0
}

func (x *CommonSchemaInfo) GetIsPassword() int64 {
	if x != nil {
		return x.IsPassword
	}
	return 0
}

func (x *CommonSchemaInfo) GetAffordance() *wrapperspb.StringValue {
	if x != nil {
		return x.Affordance
	}
	return nil
}

func (x *CommonSchemaInfo) GetExtendConfig() string {
	if x != nil {
		return x.ExtendConfig
	}
	return ""
}

func (x *CommonSchemaInfo) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CommonSchemaInfo) GetControlMode() int64 {
	if x != nil {
		return x.ControlMode
	}
	return 0
}

func (x *CommonSchemaInfo) GetProductCategories() []*ProductCategory {
	if x != nil {
		return x.ProductCategories
	}
	return nil
}

type ProductSchemaUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ProductSchemaInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` //物模型信息
}

func (x *ProductSchemaUpdateReq) Reset() {
	*x = ProductSchemaUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaUpdateReq) ProtoMessage() {}

func (x *ProductSchemaUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaUpdateReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{158}
}

func (x *ProductSchemaUpdateReq) GetInfo() *ProductSchemaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ProductSchemaMultiCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string               `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	List      []*ProductSchemaInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` //物模型信息
}

func (x *ProductSchemaMultiCreateReq) Reset() {
	*x = ProductSchemaMultiCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaMultiCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaMultiCreateReq) ProtoMessage() {}

func (x *ProductSchemaMultiCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaMultiCreateReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaMultiCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{159}
}

func (x *ProductSchemaMultiCreateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductSchemaMultiCreateReq) GetList() []*ProductSchemaInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type ProductSchemaCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ProductSchemaInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` //物模型信息
}

func (x *ProductSchemaCreateReq) Reset() {
	*x = ProductSchemaCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaCreateReq) ProtoMessage() {}

func (x *ProductSchemaCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaCreateReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{160}
}

func (x *ProductSchemaCreateReq) GetInfo() *ProductSchemaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ProductSchemaDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id  如果为空返回所有产品的信息
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"` //标识符
}

func (x *ProductSchemaDeleteReq) Reset() {
	*x = ProductSchemaDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaDeleteReq) ProtoMessage() {}

func (x *ProductSchemaDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaDeleteReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{161}
}

func (x *ProductSchemaDeleteReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductSchemaDeleteReq) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type ProductSchemaIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page              *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`           //分页信息 只获取一个则不填
	ProductID         string    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"` //产品id  必填
	Type              int64     `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`          //物模型类型 1:property属性 2:event事件 3:action行为
	Types             []int64   `protobuf:"varint,17,rep,packed,name=types,proto3" json:"types,omitempty"`
	Tag               int64     `protobuf:"varint,4,opt,name=tag,proto3" json:"tag,omitempty"`                             //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
	Identifiers       []string  `protobuf:"bytes,5,rep,name=identifiers,proto3" json:"identifiers,omitempty"`              //过滤标识符列表
	Name              string    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                            //标识符名字过滤
	IsCanSceneLinkage int64     `protobuf:"varint,8,opt,name=isCanSceneLinkage,proto3" json:"isCanSceneLinkage,omitempty"` //是否支持场景联动控制
	FuncGroup         int64     `protobuf:"varint,14,opt,name=funcGroup,proto3" json:"funcGroup,omitempty"`                // 功能分类: 1:普通功能 2:系统功能
	UserPerm          int64     `protobuf:"varint,15,opt,name=userPerm,proto3" json:"userPerm,omitempty"`                  //用户权限操作: 1:r(只读) 3:rw(可读可写)
	PropertyMode      string    `protobuf:"bytes,16,opt,name=propertyMode,proto3" json:"propertyMode,omitempty"`           //属性类型可用 读写类型: 1:r(只读) 2:rw(可读可写)
	ControlMode       int64     `protobuf:"varint,18,opt,name=controlMode,proto3" json:"controlMode,omitempty"`            //控制模式: 1: 可以群控,可以单控  2:只能单控
}

func (x *ProductSchemaIndexReq) Reset() {
	*x = ProductSchemaIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaIndexReq) ProtoMessage() {}

func (x *ProductSchemaIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaIndexReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{162}
}

func (x *ProductSchemaIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProductSchemaIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductSchemaIndexReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProductSchemaIndexReq) GetTypes() []int64 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ProductSchemaIndexReq) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *ProductSchemaIndexReq) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *ProductSchemaIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductSchemaIndexReq) GetIsCanSceneLinkage() int64 {
	if x != nil {
		return x.IsCanSceneLinkage
	}
	return 0
}

func (x *ProductSchemaIndexReq) GetFuncGroup() int64 {
	if x != nil {
		return x.FuncGroup
	}
	return 0
}

func (x *ProductSchemaIndexReq) GetUserPerm() int64 {
	if x != nil {
		return x.UserPerm
	}
	return 0
}

func (x *ProductSchemaIndexReq) GetPropertyMode() string {
	if x != nil {
		return x.PropertyMode
	}
	return ""
}

func (x *ProductSchemaIndexReq) GetControlMode() int64 {
	if x != nil {
		return x.ControlMode
	}
	return 0
}

type ProductSchemaIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProductSchemaInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *ProductSchemaIndexResp) Reset() {
	*x = ProductSchemaIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaIndexResp) ProtoMessage() {}

func (x *ProductSchemaIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaIndexResp.ProtoReflect.Descriptor instead.
func (*ProductSchemaIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{163}
}

func (x *ProductSchemaIndexResp) GetList() []*ProductSchemaInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProductSchemaIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProductSchemaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID         string                  `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`                  //产品id  必填
	Type              int64                   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                           //物模型类型 1:property属性 2:event事件 3:action行为
	Tag               int64                   `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`                             //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
	Identifier        string                  `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`                //标识符
	Name              *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                            //功能名称
	Desc              *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`                            //描述
	Required          int64                   `protobuf:"varint,7,opt,name=required,proto3" json:"required,omitempty"`                   //是否必须 1:是 2:否
	IsCanSceneLinkage int64                   `protobuf:"varint,8,opt,name=isCanSceneLinkage,proto3" json:"isCanSceneLinkage,omitempty"` //是否支持场景联动控制
	FuncGroup         int64                   `protobuf:"varint,14,opt,name=funcGroup,proto3" json:"funcGroup,omitempty"`                // 功能分类: 1:普通功能 2:系统功能
	UserPerm          int64                   `protobuf:"varint,15,opt,name=userPerm,proto3" json:"userPerm,omitempty"`                  //用户权限操作: 1:r(只读) 3:rw(可读可写)
	ControlMode       int64                   `protobuf:"varint,16,opt,name=controlMode,proto3" json:"controlMode,omitempty"`            //控制模式: 1: 可以群控,可以单控  2:只能单控
	IsHistory         int64                   `protobuf:"varint,10,opt,name=isHistory,proto3" json:"isHistory,omitempty"`                // 是否存储历史记录
	IsPassword        int64                   `protobuf:"varint,17,opt,name=isPassword,proto3" json:"isPassword,omitempty"`              // 是否是密码类型,密码类型需要加掩码
	Affordance        *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=affordance,proto3" json:"affordance,omitempty"`               //各功能类型的详细参数定义
	ExtendConfig      string                  `protobuf:"bytes,12,opt,name=extendConfig,proto3" json:"extendConfig,omitempty"`           //拓展参数
	Order             int64                   `protobuf:"varint,13,opt,name=order,proto3" json:"order,omitempty"`                        //排序
}

func (x *ProductSchemaInfo) Reset() {
	*x = ProductSchemaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaInfo) ProtoMessage() {}

func (x *ProductSchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaInfo.ProtoReflect.Descriptor instead.
func (*ProductSchemaInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{164}
}

func (x *ProductSchemaInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductSchemaInfo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProductSchemaInfo) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *ProductSchemaInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ProductSchemaInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProductSchemaInfo) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *ProductSchemaInfo) GetRequired() int64 {
	if x != nil {
		return x.Required
	}
	return 0
}

func (x *ProductSchemaInfo) GetIsCanSceneLinkage() int64 {
	if x != nil {
		return x.IsCanSceneLinkage
	}
	return 0
}

func (x *ProductSchemaInfo) GetFuncGroup() int64 {
	if x != nil {
		return x.FuncGroup
	}
	return 0
}

func (x *ProductSchemaInfo) GetUserPerm() int64 {
	if x != nil {
		return x.UserPerm
	}
	return 0
}

func (x *ProductSchemaInfo) GetControlMode() int64 {
	if x != nil {
		return x.ControlMode
	}
	return 0
}

func (x *ProductSchemaInfo) GetIsHistory() int64 {
	if x != nil {
		return x.IsHistory
	}
	return 0
}

func (x *ProductSchemaInfo) GetIsPassword() int64 {
	if x != nil {
		return x.IsPassword
	}
	return 0
}

func (x *ProductSchemaInfo) GetAffordance() *wrapperspb.StringValue {
	if x != nil {
		return x.Affordance
	}
	return nil
}

func (x *ProductSchemaInfo) GetExtendConfig() string {
	if x != nil {
		return x.ExtendConfig
	}
	return ""
}

func (x *ProductSchemaInfo) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ProductSchemaTslImportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"` //产品id
	Tsl       string `protobuf:"bytes,2,opt,name=tsl,proto3" json:"tsl,omitempty"`             //物模型tsl
}

func (x *ProductSchemaTslImportReq) Reset() {
	*x = ProductSchemaTslImportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaTslImportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaTslImportReq) ProtoMessage() {}

func (x *ProductSchemaTslImportReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaTslImportReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaTslImportReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{165}
}

func (x *ProductSchemaTslImportReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductSchemaTslImportReq) GetTsl() string {
	if x != nil {
		return x.Tsl
	}
	return ""
}

type ProductSchemaTslReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"` //产品id
}

func (x *ProductSchemaTslReadReq) Reset() {
	*x = ProductSchemaTslReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaTslReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaTslReadReq) ProtoMessage() {}

func (x *ProductSchemaTslReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaTslReadReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaTslReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{166}
}

func (x *ProductSchemaTslReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type ProductSchemaTslReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tsl string `protobuf:"bytes,1,opt,name=tsl,proto3" json:"tsl,omitempty"` //物模型tsl
}

func (x *ProductSchemaTslReadResp) Reset() {
	*x = ProductSchemaTslReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaTslReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaTslReadResp) ProtoMessage() {}

func (x *ProductSchemaTslReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaTslReadResp.ProtoReflect.Descriptor instead.
func (*ProductSchemaTslReadResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{167}
}

func (x *ProductSchemaTslReadResp) GetTsl() string {
	if x != nil {
		return x.Tsl
	}
	return ""
}

type DeviceSchemaMultiCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string          `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string          `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	List       []*DeviceSchema `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` //物模型信息
}

func (x *DeviceSchemaMultiCreateReq) Reset() {
	*x = DeviceSchemaMultiCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSchemaMultiCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSchemaMultiCreateReq) ProtoMessage() {}

func (x *DeviceSchemaMultiCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSchemaMultiCreateReq.ProtoReflect.Descriptor instead.
func (*DeviceSchemaMultiCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{168}
}

func (x *DeviceSchemaMultiCreateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceSchemaMultiCreateReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceSchemaMultiCreateReq) GetList() []*DeviceSchema {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceSchemaMultiDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID   string   `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"` //产品id  如果为空返回所有产品的信息
	DeviceName  string   `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Identifiers []string `protobuf:"bytes,2,rep,name=identifiers,proto3" json:"identifiers,omitempty"` //标识符
}

func (x *DeviceSchemaMultiDeleteReq) Reset() {
	*x = DeviceSchemaMultiDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSchemaMultiDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSchemaMultiDeleteReq) ProtoMessage() {}

func (x *DeviceSchemaMultiDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSchemaMultiDeleteReq.ProtoReflect.Descriptor instead.
func (*DeviceSchemaMultiDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{169}
}

func (x *DeviceSchemaMultiDeleteReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceSchemaMultiDeleteReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceSchemaMultiDeleteReq) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

type DeviceSchemaIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page              *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`           //分页信息 只获取一个则不填
	ProductID         string    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"` //产品id  必填
	DeviceName        string    `protobuf:"bytes,19,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Type              int64     `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"` //物模型类型 1:property属性 2:event事件 3:action行为
	Types             []int64   `protobuf:"varint,17,rep,packed,name=types,proto3" json:"types,omitempty"`
	Tag               int64     `protobuf:"varint,4,opt,name=tag,proto3" json:"tag,omitempty"`                              //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
	Identifiers       []string  `protobuf:"bytes,5,rep,name=identifiers,proto3" json:"identifiers,omitempty"`               //过滤标识符列表
	Name              string    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                             //标识符名字过滤
	IsCanSceneLinkage int64     `protobuf:"varint,8,opt,name=isCanSceneLinkage,proto3" json:"isCanSceneLinkage,omitempty"`  //是否支持场景联动控制
	FuncGroup         int64     `protobuf:"varint,14,opt,name=funcGroup,proto3" json:"funcGroup,omitempty"`                 // 功能分类: 1:普通功能 2:系统功能
	UserPerm          int64     `protobuf:"varint,15,opt,name=userPerm,proto3" json:"userPerm,omitempty"`                   //用户权限操作: 1:r(只读) 3:rw(可读可写)
	PropertyMode      string    `protobuf:"bytes,16,opt,name=propertyMode,proto3" json:"propertyMode,omitempty"`            //属性类型可用 读写类型: 1:r(只读) 2:rw(可读可写)
	ControlMode       int64     `protobuf:"varint,18,opt,name=controlMode,proto3" json:"controlMode,omitempty"`             //控制模式: 1: 可以群控,可以单控  2:只能单控
	WithProductSchema bool      `protobuf:"varint,20,opt,name=withProductSchema,proto3" json:"withProductSchema,omitempty"` //同时获取产品物模型
}

func (x *DeviceSchemaIndexReq) Reset() {
	*x = DeviceSchemaIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSchemaIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSchemaIndexReq) ProtoMessage() {}

func (x *DeviceSchemaIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSchemaIndexReq.ProtoReflect.Descriptor instead.
func (*DeviceSchemaIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{170}
}

func (x *DeviceSchemaIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DeviceSchemaIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceSchemaIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceSchemaIndexReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DeviceSchemaIndexReq) GetTypes() []int64 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *DeviceSchemaIndexReq) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *DeviceSchemaIndexReq) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *DeviceSchemaIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceSchemaIndexReq) GetIsCanSceneLinkage() int64 {
	if x != nil {
		return x.IsCanSceneLinkage
	}
	return 0
}

func (x *DeviceSchemaIndexReq) GetFuncGroup() int64 {
	if x != nil {
		return x.FuncGroup
	}
	return 0
}

func (x *DeviceSchemaIndexReq) GetUserPerm() int64 {
	if x != nil {
		return x.UserPerm
	}
	return 0
}

func (x *DeviceSchemaIndexReq) GetPropertyMode() string {
	if x != nil {
		return x.PropertyMode
	}
	return ""
}

func (x *DeviceSchemaIndexReq) GetControlMode() int64 {
	if x != nil {
		return x.ControlMode
	}
	return 0
}

func (x *DeviceSchemaIndexReq) GetWithProductSchema() bool {
	if x != nil {
		return x.WithProductSchema
	}
	return false
}

type DeviceSchemaIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*DeviceSchema `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *DeviceSchemaIndexResp) Reset() {
	*x = DeviceSchemaIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSchemaIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSchemaIndexResp) ProtoMessage() {}

func (x *DeviceSchemaIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSchemaIndexResp.ProtoReflect.Descriptor instead.
func (*DeviceSchemaIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{171}
}

func (x *DeviceSchemaIndexResp) GetList() []*DeviceSchema {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *DeviceSchemaIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeviceSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID         string                  `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`                  //产品id  必填
	DeviceName        string                  `protobuf:"bytes,17,opt,name=deviceName,proto3" json:"deviceName,omitempty"`               //设备ID 必填
	Tag               int64                   `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`                             //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
	Type              int64                   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                           //物模型类型 1:property属性 2:event事件 3:action行为
	Identifier        string                  `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`                //标识符
	Name              *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                            //功能名称
	Desc              *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`                            //描述
	Required          int64                   `protobuf:"varint,7,opt,name=required,proto3" json:"required,omitempty"`                   //是否必须 1:是 2:否
	IsCanSceneLinkage int64                   `protobuf:"varint,8,opt,name=isCanSceneLinkage,proto3" json:"isCanSceneLinkage,omitempty"` //是否支持场景联动控制
	FuncGroup         int64                   `protobuf:"varint,14,opt,name=funcGroup,proto3" json:"funcGroup,omitempty"`                // 功能分类: 1:普通功能 2:系统功能
	UserPerm          int64                   `protobuf:"varint,15,opt,name=userPerm,proto3" json:"userPerm,omitempty"`                  //用户权限操作: 1:r(只读) 3:rw(可读可写)
	ControlMode       int64                   `protobuf:"varint,16,opt,name=controlMode,proto3" json:"controlMode,omitempty"`            //控制模式: 1: 可以群控,可以单控  2:只能单控
	IsHistory         int64                   `protobuf:"varint,10,opt,name=isHistory,proto3" json:"isHistory,omitempty"`                // 是否存储历史记录
	IsPassword        int64                   `protobuf:"varint,18,opt,name=isPassword,proto3" json:"isPassword,omitempty"`              // 是否是密码类型,密码类型需要加掩码
	Affordance        *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=affordance,proto3" json:"affordance,omitempty"`               //各功能类型的详细参数定义
	ExtendConfig      string                  `protobuf:"bytes,12,opt,name=extendConfig,proto3" json:"extendConfig,omitempty"`           //拓展参数
	Order             int64                   `protobuf:"varint,13,opt,name=order,proto3" json:"order,omitempty"`                        //排序
}

func (x *DeviceSchema) Reset() {
	*x = DeviceSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSchema) ProtoMessage() {}

func (x *DeviceSchema) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSchema.ProtoReflect.Descriptor instead.
func (*DeviceSchema) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{172}
}

func (x *DeviceSchema) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceSchema) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceSchema) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *DeviceSchema) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DeviceSchema) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *DeviceSchema) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DeviceSchema) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *DeviceSchema) GetRequired() int64 {
	if x != nil {
		return x.Required
	}
	return 0
}

func (x *DeviceSchema) GetIsCanSceneLinkage() int64 {
	if x != nil {
		return x.IsCanSceneLinkage
	}
	return 0
}

func (x *DeviceSchema) GetFuncGroup() int64 {
	if x != nil {
		return x.FuncGroup
	}
	return 0
}

func (x *DeviceSchema) GetUserPerm() int64 {
	if x != nil {
		return x.UserPerm
	}
	return 0
}

func (x *DeviceSchema) GetControlMode() int64 {
	if x != nil {
		return x.ControlMode
	}
	return 0
}

func (x *DeviceSchema) GetIsHistory() int64 {
	if x != nil {
		return x.IsHistory
	}
	return 0
}

func (x *DeviceSchema) GetIsPassword() int64 {
	if x != nil {
		return x.IsPassword
	}
	return 0
}

func (x *DeviceSchema) GetAffordance() *wrapperspb.StringValue {
	if x != nil {
		return x.Affordance
	}
	return nil
}

func (x *DeviceSchema) GetExtendConfig() string {
	if x != nil {
		return x.ExtendConfig
	}
	return ""
}

func (x *DeviceSchema) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type DeviceSchemaTslReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID         string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`                   //产品id
	DeviceName        string `protobuf:"bytes,17,opt,name=deviceName,proto3" json:"deviceName,omitempty"`                //设备ID 必填
	WithProductSchema bool   `protobuf:"varint,20,opt,name=withProductSchema,proto3" json:"withProductSchema,omitempty"` //同时获取产品物模型
}

func (x *DeviceSchemaTslReadReq) Reset() {
	*x = DeviceSchemaTslReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSchemaTslReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSchemaTslReadReq) ProtoMessage() {}

func (x *DeviceSchemaTslReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSchemaTslReadReq.ProtoReflect.Descriptor instead.
func (*DeviceSchemaTslReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{173}
}

func (x *DeviceSchemaTslReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceSchemaTslReadReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceSchemaTslReadReq) GetWithProductSchema() bool {
	if x != nil {
		return x.WithProductSchema
	}
	return false
}

type DeviceSchemaTslReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tsl string `protobuf:"bytes,1,opt,name=tsl,proto3" json:"tsl,omitempty"` //物模型tsl
}

func (x *DeviceSchemaTslReadResp) Reset() {
	*x = DeviceSchemaTslReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSchemaTslReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSchemaTslReadResp) ProtoMessage() {}

func (x *DeviceSchemaTslReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSchemaTslReadResp.ProtoReflect.Descriptor instead.
func (*DeviceSchemaTslReadResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{174}
}

func (x *DeviceSchemaTslReadResp) GetTsl() string {
	if x != nil {
		return x.Tsl
	}
	return ""
}

type DeviceGroupMultiSaveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string  `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string  `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备ID 必填
	GroupIDs   []int64 `protobuf:"varint,3,rep,packed,name=groupIDs,proto3" json:"groupIDs,omitempty"`
	Purpose    string  `protobuf:"bytes,4,opt,name=purpose,proto3" json:"purpose,omitempty"`
}

func (x *DeviceGroupMultiSaveReq) Reset() {
	*x = DeviceGroupMultiSaveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGroupMultiSaveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGroupMultiSaveReq) ProtoMessage() {}

func (x *DeviceGroupMultiSaveReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGroupMultiSaveReq.ProtoReflect.Descriptor instead.
func (*DeviceGroupMultiSaveReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{175}
}

func (x *DeviceGroupMultiSaveReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceGroupMultiSaveReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceGroupMultiSaveReq) GetGroupIDs() []int64 {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

func (x *DeviceGroupMultiSaveReq) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

type DeviceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceCore `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Code   string      `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Params string      `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *DeviceProfile) Reset() {
	*x = DeviceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProfile) ProtoMessage() {}

func (x *DeviceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProfile.ProtoReflect.Descriptor instead.
func (*DeviceProfile) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{176}
}

func (x *DeviceProfile) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceProfile) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DeviceProfile) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

type DeviceProfileReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceCore `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Code   string      `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *DeviceProfileReadReq) Reset() {
	*x = DeviceProfileReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProfileReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProfileReadReq) ProtoMessage() {}

func (x *DeviceProfileReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProfileReadReq.ProtoReflect.Descriptor instead.
func (*DeviceProfileReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{177}
}

func (x *DeviceProfileReadReq) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceProfileReadReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type DeviceInfoCanBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceCore `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *DeviceInfoCanBindReq) Reset() {
	*x = DeviceInfoCanBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoCanBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoCanBindReq) ProtoMessage() {}

func (x *DeviceInfoCanBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoCanBindReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoCanBindReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{178}
}

func (x *DeviceInfoCanBindReq) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

type DeviceInfoMultiBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DeviceCore `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	AreaID  int64         `protobuf:"varint,2,opt,name=areaID,proto3" json:"areaID,omitempty"`
}

func (x *DeviceInfoMultiBindReq) Reset() {
	*x = DeviceInfoMultiBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoMultiBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoMultiBindReq) ProtoMessage() {}

func (x *DeviceInfoMultiBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoMultiBindReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoMultiBindReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{179}
}

func (x *DeviceInfoMultiBindReq) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *DeviceInfoMultiBindReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

type DeviceInfoMultiBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errs []*DeviceError `protobuf:"bytes,1,rep,name=errs,proto3" json:"errs,omitempty"`
}

func (x *DeviceInfoMultiBindResp) Reset() {
	*x = DeviceInfoMultiBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoMultiBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoMultiBindResp) ProtoMessage() {}

func (x *DeviceInfoMultiBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoMultiBindResp.ProtoReflect.Descriptor instead.
func (*DeviceInfoMultiBindResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{180}
}

func (x *DeviceInfoMultiBindResp) GetErrs() []*DeviceError {
	if x != nil {
		return x.Errs
	}
	return nil
}

type DeviceInfoUnbindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名称
	// 中绑定,强制解绑参数
	// 对参数（deviceName、nonce、productID、timestamp）按字典序升序排序。
	// 将以上参数，按参数名称 = 参数值 & 参数名称 = 参数值拼接成字符串, 如："deviceName=xxx&nonce=2125656451&productID=xxx&timestamp=1687525491"。
	// 使用 HMAC-sha1 算法对上一步中获得的字符串进行计算，密钥取secretType   取设备的物模型密码类型的属性。
	// 将生成的结果使用 Base64 进行编码，即可获得最终的签名串放入 signature。
	SecretType string `protobuf:"bytes,3,opt,name=secretType,proto3" json:"secretType,omitempty"` //采用秘钥的类型
	Signature  string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`   //签名
	Timestamp  int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //秒时间戳
	SignType   string `protobuf:"bytes,6,opt,name=signType,proto3" json:"signType,omitempty"`     //hmacsha256 hmacsha1 hmacmd5(默认)
	Nonce      int64  `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`          //随机数
}

func (x *DeviceInfoUnbindReq) Reset() {
	*x = DeviceInfoUnbindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoUnbindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoUnbindReq) ProtoMessage() {}

func (x *DeviceInfoUnbindReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoUnbindReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoUnbindReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{181}
}

func (x *DeviceInfoUnbindReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceInfoUnbindReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfoUnbindReq) GetSecretType() string {
	if x != nil {
		return x.SecretType
	}
	return ""
}

func (x *DeviceInfoUnbindReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *DeviceInfoUnbindReq) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DeviceInfoUnbindReq) GetSignType() string {
	if x != nil {
		return x.SignType
	}
	return ""
}

func (x *DeviceInfoUnbindReq) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type DeviceBindTokenReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` //配网token
}

func (x *DeviceBindTokenReadReq) Reset() {
	*x = DeviceBindTokenReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceBindTokenReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceBindTokenReadReq) ProtoMessage() {}

func (x *DeviceBindTokenReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceBindTokenReadReq.ProtoReflect.Descriptor instead.
func (*DeviceBindTokenReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{182}
}

func (x *DeviceBindTokenReadReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeviceBindTokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`    //配网token
	Status int64  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"` //token状态 1:初始状态 2: 设备已上报
}

func (x *DeviceBindTokenInfo) Reset() {
	*x = DeviceBindTokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceBindTokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceBindTokenInfo) ProtoMessage() {}

func (x *DeviceBindTokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceBindTokenInfo.ProtoReflect.Descriptor instead.
func (*DeviceBindTokenInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{183}
}

func (x *DeviceBindTokenInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DeviceBindTokenInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type DeviceInfoBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceCore `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	AreaID int64       `protobuf:"varint,2,opt,name=areaID,proto3" json:"areaID,omitempty"`
	Token  string      `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"` //中绑定的token
}

func (x *DeviceInfoBindReq) Reset() {
	*x = DeviceInfoBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoBindReq) ProtoMessage() {}

func (x *DeviceInfoBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoBindReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoBindReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{184}
}

func (x *DeviceInfoBindReq) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceInfoBindReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *DeviceInfoBindReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeviceProfileIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceCore `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Codes  []string    `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *DeviceProfileIndexReq) Reset() {
	*x = DeviceProfileIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProfileIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProfileIndexReq) ProtoMessage() {}

func (x *DeviceProfileIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProfileIndexReq.ProtoReflect.Descriptor instead.
func (*DeviceProfileIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{185}
}

func (x *DeviceProfileIndexReq) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceProfileIndexReq) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type DeviceProfileIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles []*DeviceProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *DeviceProfileIndexResp) Reset() {
	*x = DeviceProfileIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProfileIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProfileIndexResp) ProtoMessage() {}

func (x *DeviceProfileIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProfileIndexResp.ProtoReflect.Descriptor instead.
func (*DeviceProfileIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{186}
}

func (x *DeviceProfileIndexResp) GetProfiles() []*DeviceProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type DeviceCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountTypes []string `protobuf:"bytes,1,rep,name=countTypes,proto3" json:"countTypes,omitempty"`     //在线设备数:status,设备类型: deviceType
	RangeType  int64    `protobuf:"varint,2,opt,name=rangeType,proto3" json:"rangeType,omitempty"`      //0:全部 1:area 2:group
	RangeIDs   []int64  `protobuf:"varint,3,rep,packed,name=rangeIDs,proto3" json:"rangeIDs,omitempty"` ////统计的id列表, areaID或者groupID
}

func (x *DeviceCountReq) Reset() {
	*x = DeviceCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCountReq) ProtoMessage() {}

func (x *DeviceCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCountReq.ProtoReflect.Descriptor instead.
func (*DeviceCountReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{187}
}

func (x *DeviceCountReq) GetCountTypes() []string {
	if x != nil {
		return x.CountTypes
	}
	return nil
}

func (x *DeviceCountReq) GetRangeType() int64 {
	if x != nil {
		return x.RangeType
	}
	return 0
}

func (x *DeviceCountReq) GetRangeIDs() []int64 {
	if x != nil {
		return x.RangeIDs
	}
	return nil
}

type DeviceCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DeviceCountInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceCountResp) Reset() {
	*x = DeviceCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCountResp) ProtoMessage() {}

func (x *DeviceCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCountResp.ProtoReflect.Descriptor instead.
func (*DeviceCountResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{188}
}

func (x *DeviceCountResp) GetList() []*DeviceCountInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceCountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeID int64            `protobuf:"varint,1,opt,name=rangeID,proto3" json:"rangeID,omitempty"`
	Count   map[string]int64 `protobuf:"bytes,2,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DeviceCountInfo) Reset() {
	*x = DeviceCountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCountInfo) ProtoMessage() {}

func (x *DeviceCountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCountInfo.ProtoReflect.Descriptor instead.
func (*DeviceCountInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{189}
}

func (x *DeviceCountInfo) GetRangeID() int64 {
	if x != nil {
		return x.RangeID
	}
	return 0
}

func (x *DeviceCountInfo) GetCount() map[string]int64 {
	if x != nil {
		return x.Count
	}
	return nil
}

type DeviceInfoCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange *TimeRange `protobuf:"bytes,1,opt,name=timeRange,proto3" json:"timeRange,omitempty"`
	AreaIDs   []int64    `protobuf:"varint,2,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"`
	GroupIDs  []int64    `protobuf:"varint,3,rep,packed,name=groupIDs,proto3" json:"groupIDs,omitempty"`
}

func (x *DeviceInfoCountReq) Reset() {
	*x = DeviceInfoCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoCountReq) ProtoMessage() {}

func (x *DeviceInfoCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoCountReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoCountReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{190}
}

func (x *DeviceInfoCountReq) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *DeviceInfoCountReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *DeviceInfoCountReq) GetGroupIDs() []int64 {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type DeviceTypeCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange *TimeRange `protobuf:"bytes,1,opt,name=timeRange,proto3" json:"timeRange,omitempty"`
	AreaIDs   []int64    `protobuf:"varint,2,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"`
	GroupIDs  []int64    `protobuf:"varint,3,rep,packed,name=groupIDs,proto3" json:"groupIDs,omitempty"`
}

func (x *DeviceTypeCountReq) Reset() {
	*x = DeviceTypeCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTypeCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTypeCountReq) ProtoMessage() {}

func (x *DeviceTypeCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTypeCountReq.ProtoReflect.Descriptor instead.
func (*DeviceTypeCountReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{191}
}

func (x *DeviceTypeCountReq) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *DeviceTypeCountReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *DeviceTypeCountReq) GetGroupIDs() []int64 {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type DeviceInfoCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online   int64 `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
	Offline  int64 `protobuf:"varint,2,opt,name=offline,proto3" json:"offline,omitempty"`
	Inactive int64 `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Unknown  int64 `protobuf:"varint,4,opt,name=unknown,proto3" json:"unknown,omitempty"`
	Total    int64 `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DeviceInfoCount) Reset() {
	*x = DeviceInfoCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoCount) ProtoMessage() {}

func (x *DeviceInfoCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoCount.ProtoReflect.Descriptor instead.
func (*DeviceInfoCount) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{192}
}

func (x *DeviceInfoCount) GetOnline() int64 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *DeviceInfoCount) GetOffline() int64 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *DeviceInfoCount) GetInactive() int64 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *DeviceInfoCount) GetUnknown() int64 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *DeviceInfoCount) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeviceTypeCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  int64 `protobuf:"varint,1,opt,name=device,proto3" json:"device,omitempty"`
	Gateway int64 `protobuf:"varint,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Subset  int64 `protobuf:"varint,3,opt,name=subset,proto3" json:"subset,omitempty"`
	Unknown int64 `protobuf:"varint,4,opt,name=unknown,proto3" json:"unknown,omitempty"`
}

func (x *DeviceTypeCountResp) Reset() {
	*x = DeviceTypeCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTypeCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTypeCountResp) ProtoMessage() {}

func (x *DeviceTypeCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTypeCountResp.ProtoReflect.Descriptor instead.
func (*DeviceTypeCountResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{193}
}

func (x *DeviceTypeCountResp) GetDevice() int64 {
	if x != nil {
		return x.Device
	}
	return 0
}

func (x *DeviceTypeCountResp) GetGateway() int64 {
	if x != nil {
		return x.Gateway
	}
	return 0
}

func (x *DeviceTypeCountResp) GetSubset() int64 {
	if x != nil {
		return x.Subset
	}
	return 0
}

func (x *DeviceTypeCountResp) GetUnknown() int64 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

// 下面是ota固件管理模块的消息
type Firmware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime int64                   `protobuf:"varint,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"` //创建时间 只读
	FirmwareID  int64                   `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID   string                  `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	Name        string                  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`             //升级包名称
	Version     string                  `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`       //升级包版本
	IsDiff      int32                   `protobuf:"varint,6,opt,name=isDiff,proto3" json:"isDiff,omitempty"`        //是否差分包,1:整包,2:差分
	SignMethod  string                  `protobuf:"bytes,7,opt,name=signMethod,proto3" json:"signMethod,omitempty"` //签名方法 MD5/SHA
	Desc        *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`             //描述
	ExtData     *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=extData,proto3" json:"extData,omitempty"`       //自定义数据
	Files       []*OtaFirmwareFile      `protobuf:"bytes,10,rep,name=files,proto3" json:"files,omitempty"`          //产品信息
}

func (x *Firmware) Reset() {
	*x = Firmware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firmware) ProtoMessage() {}

func (x *Firmware) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firmware.ProtoReflect.Descriptor instead.
func (*Firmware) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{194}
}

func (x *Firmware) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Firmware) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *Firmware) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *Firmware) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Firmware) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Firmware) GetIsDiff() int32 {
	if x != nil {
		return x.IsDiff
	}
	return 0
}

func (x *Firmware) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *Firmware) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *Firmware) GetExtData() *wrapperspb.StringValue {
	if x != nil {
		return x.ExtData
	}
	return nil
}

func (x *Firmware) GetFiles() []*OtaFirmwareFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type FirmwareResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID int64 `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
}

func (x *FirmwareResp) Reset() {
	*x = FirmwareResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareResp) ProtoMessage() {}

func (x *FirmwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareResp.ProtoReflect.Descriptor instead.
func (*FirmwareResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{195}
}

func (x *FirmwareResp) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

type FirmwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime int64                   `protobuf:"varint,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"` //创建时间 只读
	FirmwareID  int64                   `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID   string                  `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	ProductName string                  `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	Name        string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`             //升级包名称
	Version     string                  `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`       //升级包版本
	IsDiff      int32                   `protobuf:"varint,7,opt,name=isDiff,proto3" json:"isDiff,omitempty"`        //是否差分包,1:整包,2:差分
	SignMethod  string                  `protobuf:"bytes,8,opt,name=signMethod,proto3" json:"signMethod,omitempty"` //签名方法 MD5/SHA
	Desc        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`             //描述
	ExtData     *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=extData,proto3" json:"extData,omitempty"`      //自定义数据
	Files       []*OtaFirmwareFile      `protobuf:"bytes,11,rep,name=files,proto3" json:"files,omitempty"`          //产品信息
}

func (x *FirmwareInfo) Reset() {
	*x = FirmwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfo) ProtoMessage() {}

func (x *FirmwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfo.ProtoReflect.Descriptor instead.
func (*FirmwareInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{196}
}

func (x *FirmwareInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *FirmwareInfo) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FirmwareInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *FirmwareInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *FirmwareInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirmwareInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FirmwareInfo) GetIsDiff() int32 {
	if x != nil {
		return x.IsDiff
	}
	return 0
}

func (x *FirmwareInfo) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *FirmwareInfo) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *FirmwareInfo) GetExtData() *wrapperspb.StringValue {
	if x != nil {
		return x.ExtData
	}
	return nil
}

func (x *FirmwareInfo) GetFiles() []*OtaFirmwareFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type OtaFirmwareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *OtaFirmwareFile) Reset() {
	*x = OtaFirmwareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFile) ProtoMessage() {}

func (x *OtaFirmwareFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFile.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFile) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{197}
}

func (x *OtaFirmwareFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *OtaFirmwareFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FirmwareInfoDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID int64 `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
}

func (x *FirmwareInfoDeleteReq) Reset() {
	*x = FirmwareInfoDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoDeleteReq) ProtoMessage() {}

func (x *FirmwareInfoDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoDeleteReq.ProtoReflect.Descriptor instead.
func (*FirmwareInfoDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{198}
}

func (x *FirmwareInfoDeleteReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

type FirmwareInfoDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *FirmwareInfoDeleteResp) Reset() {
	*x = FirmwareInfoDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoDeleteResp) ProtoMessage() {}

func (x *FirmwareInfoDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoDeleteResp.ProtoReflect.Descriptor instead.
func (*FirmwareInfoDeleteResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{199}
}

func (x *FirmwareInfoDeleteResp) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type FirmwareInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"` //分页信息 只获取一个则不填
	FirmwareID int64     `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID  string    `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *FirmwareInfoIndexReq) Reset() {
	*x = FirmwareInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoIndexReq) ProtoMessage() {}

func (x *FirmwareInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoIndexReq.ProtoReflect.Descriptor instead.
func (*FirmwareInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{200}
}

func (x *FirmwareInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *FirmwareInfoIndexReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FirmwareInfoIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type FirmwareInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*FirmwareInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //固件信息
	Total int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *FirmwareInfoIndexResp) Reset() {
	*x = FirmwareInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoIndexResp) ProtoMessage() {}

func (x *FirmwareInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoIndexResp.ProtoReflect.Descriptor instead.
func (*FirmwareInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{201}
}

func (x *FirmwareInfoIndexResp) GetList() []*FirmwareInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FirmwareInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FirmwareInfoReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID int64 `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
}

func (x *FirmwareInfoReadReq) Reset() {
	*x = FirmwareInfoReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoReadReq) ProtoMessage() {}

func (x *FirmwareInfoReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoReadReq.ProtoReflect.Descriptor instead.
func (*FirmwareInfoReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{202}
}

func (x *FirmwareInfoReadReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

type OtaFirmwareFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID     int64  `protobuf:"varint,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Host       string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	FilePath   string `protobuf:"bytes,4,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Size       int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Storage    string `protobuf:"bytes,6,opt,name=storage,proto3" json:"storage,omitempty"`
	SignMethod string `protobuf:"bytes,7,opt,name=signMethod,proto3" json:"signMethod,omitempty"`
	Signature  string `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OtaFirmwareFileReq) Reset() {
	*x = OtaFirmwareFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFileReq) ProtoMessage() {}

func (x *OtaFirmwareFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFileReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFileReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{203}
}

func (x *OtaFirmwareFileReq) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *OtaFirmwareFileReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaFirmwareFileReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *OtaFirmwareFileReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *OtaFirmwareFileReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OtaFirmwareFileReq) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *OtaFirmwareFileReq) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *OtaFirmwareFileReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type OtaFirmwareFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID     int64  `protobuf:"varint,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	FirmwareID int64  `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Host       string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	FilePath   string `protobuf:"bytes,5,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Size       int64  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Storage    string `protobuf:"bytes,7,opt,name=storage,proto3" json:"storage,omitempty"`
	SignMethod string `protobuf:"bytes,8,opt,name=signMethod,proto3" json:"signMethod,omitempty"`
	Signature  string `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OtaFirmwareFileInfo) Reset() {
	*x = OtaFirmwareFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFileInfo) ProtoMessage() {}

func (x *OtaFirmwareFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFileInfo.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFileInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{204}
}

func (x *OtaFirmwareFileInfo) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *OtaFirmwareFileInfo) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaFirmwareFileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaFirmwareFileInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *OtaFirmwareFileInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *OtaFirmwareFileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OtaFirmwareFileInfo) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *OtaFirmwareFileInfo) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *OtaFirmwareFileInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type OtaFirmwareFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID   int64  `protobuf:"varint,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	FilePath string `protobuf:"bytes,4,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Size     int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Storage  string `protobuf:"bytes,6,opt,name=storage,proto3" json:"storage,omitempty"`
	// string signMethod = 7;
	Signature string `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OtaFirmwareFileResp) Reset() {
	*x = OtaFirmwareFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFileResp) ProtoMessage() {}

func (x *OtaFirmwareFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFileResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFileResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{205}
}

func (x *OtaFirmwareFileResp) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *OtaFirmwareFileResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaFirmwareFileResp) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *OtaFirmwareFileResp) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *OtaFirmwareFileResp) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OtaFirmwareFileResp) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *OtaFirmwareFileResp) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type OtaFirmwareFileIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *PageInfo              `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	FirmwareID int64                  `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	Size       *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *OtaFirmwareFileIndexReq) Reset() {
	*x = OtaFirmwareFileIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFileIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFileIndexReq) ProtoMessage() {}

func (x *OtaFirmwareFileIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFileIndexReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFileIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{206}
}

func (x *OtaFirmwareFileIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *OtaFirmwareFileIndexReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaFirmwareFileIndexReq) GetSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

type OtaFirmwareFileIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*OtaFirmwareFileInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OtaFirmwareFileIndexResp) Reset() {
	*x = OtaFirmwareFileIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFileIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFileIndexResp) ProtoMessage() {}

func (x *OtaFirmwareFileIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFileIndexResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFileIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{207}
}

func (x *OtaFirmwareFileIndexResp) GetList() []*OtaFirmwareFileInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *OtaFirmwareFileIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FirmwareInfoReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime int64                   `protobuf:"varint,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"` //创建时间 只读
	FirmwareID  int64                   `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID   string                  `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	ProductName string                  `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	Name        string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`       //升级包名称
	Version     string                  `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"` //升级包版本
	IsDiff      int32                   `protobuf:"varint,7,opt,name=isDiff,proto3" json:"isDiff,omitempty"`  //是否差分包,1:整包,2:差分
	SignMethod  string                  `protobuf:"bytes,8,opt,name=signMethod,proto3" json:"signMethod,omitempty"`
	Desc        *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`       //描述
	ExtData     *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=extData,proto3" json:"extData,omitempty"` //自定义数据
	Files       []*OtaFirmwareFileResp  `protobuf:"bytes,12,rep,name=files,proto3" json:"files,omitempty"`     //产品信息
}

func (x *FirmwareInfoReadResp) Reset() {
	*x = FirmwareInfoReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoReadResp) ProtoMessage() {}

func (x *FirmwareInfoReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoReadResp.ProtoReflect.Descriptor instead.
func (*FirmwareInfoReadResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{208}
}

func (x *FirmwareInfoReadResp) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *FirmwareInfoReadResp) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FirmwareInfoReadResp) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *FirmwareInfoReadResp) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *FirmwareInfoReadResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirmwareInfoReadResp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FirmwareInfoReadResp) GetIsDiff() int32 {
	if x != nil {
		return x.IsDiff
	}
	return 0
}

func (x *FirmwareInfoReadResp) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *FirmwareInfoReadResp) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *FirmwareInfoReadResp) GetExtData() *wrapperspb.StringValue {
	if x != nil {
		return x.ExtData
	}
	return nil
}

func (x *FirmwareInfoReadResp) GetFiles() []*OtaFirmwareFileResp {
	if x != nil {
		return x.Files
	}
	return nil
}

type FirmwareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size      int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	FilePath  string `protobuf:"bytes,3,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	FileMd5   string `protobuf:"bytes,5,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
}

func (x *FirmwareFile) Reset() {
	*x = FirmwareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareFile) ProtoMessage() {}

func (x *FirmwareFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareFile.ProtoReflect.Descriptor instead.
func (*FirmwareFile) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{209}
}

func (x *FirmwareFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirmwareFile) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FirmwareFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FirmwareFile) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *FirmwareFile) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

type OtaFirmwareInfoCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"` //产品id
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`           //固件升级包名称
	// *
	// 当前OTA升级包的版本号，仅支持英文字母、数字、半角句号（.）、短划线（-）和下划线（_）。长度限制为1~64个字符。
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"` //版本号
	// *
	// OTA升级包签名方法。取值：
	// MD5（默认）：MD5签名。
	// SHA256：SHA256签名。
	SignMethod string `protobuf:"bytes,6,opt,name=signMethod,proto3" json:"signMethod,omitempty"` //签名方法
	Desc       string `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`             //文件描述
	// *
	// OTA升级包类型。可选：
	// 0：整包升级包，您上传的升级包文件包含完整的升级包，将推送整包升级包给设备进行升级。
	// 1：差分升级包，您上传的升级包文件仅包含新版本升级包与之前版本的差异部分，仅推送差异部分给设备进行升级。
	// 不传入此参数，则默认值为0。
	IsDiff         int64                   `protobuf:"varint,10,opt,name=isDiff,proto3" json:"isDiff,omitempty"` //升级包类型
	SrcVersion     string                  `protobuf:"bytes,12,opt,name=srcVersion,proto3" json:"srcVersion,omitempty"`
	IsNeedToVerify int64                   `protobuf:"varint,13,opt,name=isNeedToVerify,proto3" json:"isNeedToVerify,omitempty"` //是否需要验证
	Extra          *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=extra,proto3" json:"extra,omitempty"`                    //自定义数据
	FilePaths      []string                `protobuf:"bytes,15,rep,name=filePaths,proto3" json:"filePaths,omitempty"`
	ModuleCode     string                  `protobuf:"bytes,16,opt,name=moduleCode,proto3" json:"moduleCode,omitempty"` //模块编码
}

func (x *OtaFirmwareInfoCreateReq) Reset() {
	*x = OtaFirmwareInfoCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareInfoCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareInfoCreateReq) ProtoMessage() {}

func (x *OtaFirmwareInfoCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareInfoCreateReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareInfoCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{210}
}

func (x *OtaFirmwareInfoCreateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareInfoCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaFirmwareInfoCreateReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OtaFirmwareInfoCreateReq) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *OtaFirmwareInfoCreateReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OtaFirmwareInfoCreateReq) GetIsDiff() int64 {
	if x != nil {
		return x.IsDiff
	}
	return 0
}

func (x *OtaFirmwareInfoCreateReq) GetSrcVersion() string {
	if x != nil {
		return x.SrcVersion
	}
	return ""
}

func (x *OtaFirmwareInfoCreateReq) GetIsNeedToVerify() int64 {
	if x != nil {
		return x.IsNeedToVerify
	}
	return 0
}

func (x *OtaFirmwareInfoCreateReq) GetExtra() *wrapperspb.StringValue {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *OtaFirmwareInfoCreateReq) GetFilePaths() []string {
	if x != nil {
		return x.FilePaths
	}
	return nil
}

func (x *OtaFirmwareInfoCreateReq) GetModuleCode() string {
	if x != nil {
		return x.ModuleCode
	}
	return ""
}

type OtaFirmwareInfoUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`       //固件id
	Name  string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`    //固件升级包名称
	Desc  string                  `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`    //文件描述
	Extra *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=extra,proto3" json:"extra,omitempty"` //推送设备端的信息
}

func (x *OtaFirmwareInfoUpdateReq) Reset() {
	*x = OtaFirmwareInfoUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareInfoUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareInfoUpdateReq) ProtoMessage() {}

func (x *OtaFirmwareInfoUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareInfoUpdateReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareInfoUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{211}
}

func (x *OtaFirmwareInfoUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OtaFirmwareInfoUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaFirmwareInfoUpdateReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OtaFirmwareInfoUpdateReq) GetExtra() *wrapperspb.StringValue {
	if x != nil {
		return x.Extra
	}
	return nil
}

type OtaFirmwareInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`           //分页
	ProductID string    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"` //产品id
	Name      string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`           //产品名称
}

func (x *OtaFirmwareInfoIndexReq) Reset() {
	*x = OtaFirmwareInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareInfoIndexReq) ProtoMessage() {}

func (x *OtaFirmwareInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareInfoIndexReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{212}
}

func (x *OtaFirmwareInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *OtaFirmwareInfoIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareInfoIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type OtaFirmwareInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*OtaFirmwareInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OtaFirmwareInfoIndexResp) Reset() {
	*x = OtaFirmwareInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareInfoIndexResp) ProtoMessage() {}

func (x *OtaFirmwareInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareInfoIndexResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{213}
}

func (x *OtaFirmwareInfoIndexResp) GetList() []*OtaFirmwareInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *OtaFirmwareInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OtaFirmwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                          //固件id
	Name           string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                       //固件升级包名称
	Version        string          `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                 //版本号
	ProductID      string          `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`             //产品id
	ProductName    string          `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`         //产品名称
	Status         int64           `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                  //状态
	CreatedTime    int64           `protobuf:"varint,7,opt,name=createdTime,proto3" json:"createdTime,omitempty"`        //添加时间
	SignMethod     string          `protobuf:"bytes,8,opt,name=signMethod,proto3" json:"signMethod,omitempty"`           //签名方式:MD5/SHA256
	Desc           string          `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`                       //文件描述
	Extra          string          `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`                    //推给设备端端消息
	FileList       []*FirmwareFile `protobuf:"bytes,11,rep,name=fileList,proto3" json:"fileList,omitempty"`              //文件列表
	IsDiff         int64           `protobuf:"varint,12,opt,name=isDiff,proto3" json:"isDiff,omitempty"`                 //整包or差包
	IsNeedToVerify int64           `protobuf:"varint,13,opt,name=isNeedToVerify,proto3" json:"isNeedToVerify,omitempty"` //是否需要验证
	ModuleCode     string          `protobuf:"bytes,14,opt,name=moduleCode,proto3" json:"moduleCode,omitempty"`          //模块编码
}

func (x *OtaFirmwareInfo) Reset() {
	*x = OtaFirmwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareInfo) ProtoMessage() {}

func (x *OtaFirmwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareInfo.ProtoReflect.Descriptor instead.
func (*OtaFirmwareInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{214}
}

func (x *OtaFirmwareInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OtaFirmwareInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaFirmwareInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OtaFirmwareInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OtaFirmwareInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OtaFirmwareInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *OtaFirmwareInfo) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *OtaFirmwareInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OtaFirmwareInfo) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *OtaFirmwareInfo) GetFileList() []*FirmwareFile {
	if x != nil {
		return x.FileList
	}
	return nil
}

func (x *OtaFirmwareInfo) GetIsDiff() int64 {
	if x != nil {
		return x.IsDiff
	}
	return 0
}

func (x *OtaFirmwareInfo) GetIsNeedToVerify() int64 {
	if x != nil {
		return x.IsNeedToVerify
	}
	return 0
}

func (x *OtaFirmwareInfo) GetModuleCode() string {
	if x != nil {
		return x.ModuleCode
	}
	return ""
}

type OtaFirmwareJobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirmwareID  int64 `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`   // 升级包ID，升级包的唯一标识符。
	Type        int64 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`               // 升级包所属产品的JobType。 验证升级包:1  批量升级:2
	Status      int64 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`           // 批次状态,计划中:1  执行中:2  已完成:3  已取消:4
	UpgradeType int64 `protobuf:"varint,5,opt,name=upgradeType,proto3" json:"upgradeType,omitempty"` // 升级策略，1-静态，2-动态
	// 待升级版本号列表。
	// 发起全量升级（TargetSelection=ALL）和灰度升级（TargetSelection=GRAY）任务时，可以传入该参数。
	// 使用差分升级包发起全量升级和灰度升级任务时，该参数值需指定为差分升级包的待升级版本号（SrcVersion）。
	// 发起定向升级（TargetSelection=SPECIFIC）或分组升级（TargetSelection=GROUP）任务时，不能传入该参数。
	// 可以调用 QueryDeviceDetail ，查看设备 OTA 模块版本号（FirmwareVersion）。
	// 列表中不能有重复的版本号。
	// 最多可传入 10 个版本号。
	SrcVersions      []string `protobuf:"bytes,6,rep,name=srcVersions,proto3" json:"srcVersions,omitempty"`             // 待升级版本号列表。最多可传入10个版本号。用逗号分隔多个版本号
	RetryInterval    int64    `protobuf:"varint,7,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`        // 设备升级失败后，自动重试的时间间隔，单位为分钟。 动态升级 静态升级 -1 为不重试
	RetryCount       int64    `protobuf:"varint,8,opt,name=retryCount,proto3" json:"retryCount,omitempty"`              // 自动重试次数。1/2/5次 动态升级 静态升级
	TimeoutInMinutes int64    `protobuf:"varint,9,opt,name=timeoutInMinutes,proto3" json:"timeoutInMinutes,omitempty"`  // 设备升级超时时间，单位为分钟。 动态升级 静态升级
	MaximumPerMinute int64    `protobuf:"varint,10,opt,name=maximumPerMinute,proto3" json:"maximumPerMinute,omitempty"` // 每分钟最多向多少个设备推送升级包下载URL。 动态升级 静态升级
	// 是否覆盖之前的升级任务。取值：
	//
	// 2（默认）：不覆盖。若设备已有升级任务，则只执行已有任务。
	// 1：覆盖。设备只执行新的升级任务。此时 MultiModuleMode 不能传入 true。
	// 动态升级 静态升级
	IsOverwriteMode int64 `protobuf:"varint,11,opt,name=isOverwriteMode,proto3" json:"isOverwriteMode,omitempty"` // 是否覆盖之前的升级任务。取值：1（不覆盖）、2（覆盖）。
	// 物联网平台是否主动向设备推送升级任务。
	// 1（默认）：是。批次任务创建完成后，物联网平台主动将升级任务，直接推送给升级范围内的在线设备。
	// 此时，设备仍可主动向物联网平台发起请求，来获取 OTA 升级任务信息。
	// 2：否。设备必须通过向物联网平台发起请求，来获取 OTA 升级任务信息。
	// 动态升级
	IsNeedPush int64 `protobuf:"varint,12,opt,name=isNeedPush,proto3" json:"isNeedPush,omitempty"` // 物联网平台是否主动向设备推送升级任务。
	// 如需自主控制设备 OTA 升级时，可配置此参数，通过手机 App 来控制，设备是否可进行 OTA 升级。手机 App 需您自行开发。
	// 2（默认）：否。直接按照 NeedPush 设置，获取 OTA 升级任务信息。
	// 1：是。设备无法获取 OTA 升级任务，需 App 侧确认 OTA 升级后，才能按照 NeedPush 设置，获取 OTA 升级任务信息。
	IsNeedConfirm   int64              `protobuf:"varint,13,opt,name=isNeedConfirm,proto3" json:"isNeedConfirm,omitempty"`
	TargetSelection int64              `protobuf:"varint,14,opt,name=targetSelection,proto3" json:"targetSelection,omitempty"` //升级范围。 1：全量升级。 2：定向升级。 3：灰度升级。 4：分组升级(不做) 5: 区域升级(不做)
	Dynamic         *OtaJobDynamicInfo `protobuf:"bytes,15,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	Static          *OtaJobStaticInfo  `protobuf:"bytes,16,opt,name=static,proto3" json:"static,omitempty"`
	Target          string             `protobuf:"bytes,17,opt,name=target,proto3" json:"target,omitempty"`           //分组升级和区域升级填写对应的id
	TenantCodes     []string           `protobuf:"bytes,18,rep,name=tenantCodes,proto3" json:"tenantCodes,omitempty"` //指定租户
	CreatedTime     int64              `protobuf:"varint,19,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
}

func (x *OtaFirmwareJobInfo) Reset() {
	*x = OtaFirmwareJobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareJobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareJobInfo) ProtoMessage() {}

func (x *OtaFirmwareJobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareJobInfo.ProtoReflect.Descriptor instead.
func (*OtaFirmwareJobInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{215}
}

func (x *OtaFirmwareJobInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetUpgradeType() int64 {
	if x != nil {
		return x.UpgradeType
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetSrcVersions() []string {
	if x != nil {
		return x.SrcVersions
	}
	return nil
}

func (x *OtaFirmwareJobInfo) GetRetryInterval() int64 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetTimeoutInMinutes() int64 {
	if x != nil {
		return x.TimeoutInMinutes
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetMaximumPerMinute() int64 {
	if x != nil {
		return x.MaximumPerMinute
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetIsOverwriteMode() int64 {
	if x != nil {
		return x.IsOverwriteMode
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetIsNeedPush() int64 {
	if x != nil {
		return x.IsNeedPush
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetIsNeedConfirm() int64 {
	if x != nil {
		return x.IsNeedConfirm
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetTargetSelection() int64 {
	if x != nil {
		return x.TargetSelection
	}
	return 0
}

func (x *OtaFirmwareJobInfo) GetDynamic() *OtaJobDynamicInfo {
	if x != nil {
		return x.Dynamic
	}
	return nil
}

func (x *OtaFirmwareJobInfo) GetStatic() *OtaJobStaticInfo {
	if x != nil {
		return x.Static
	}
	return nil
}

func (x *OtaFirmwareJobInfo) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *OtaFirmwareJobInfo) GetTenantCodes() []string {
	if x != nil {
		return x.TenantCodes
	}
	return nil
}

func (x *OtaFirmwareJobInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type OtaJobDynamicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 动态升级模式。取值范围：
	// 1（默认）：除了升级当前满足升级条件的设备，还将持续检查设备是否满足升级条件，对满足升级条件的设备进行升级。
	// 2：仅对后续上报新版本号的设备生效。
	// 动态升级
	DynamicMode int64 `protobuf:"varint,1,opt,name=dynamicMode,proto3" json:"dynamicMode,omitempty"` //
}

func (x *OtaJobDynamicInfo) Reset() {
	*x = OtaJobDynamicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaJobDynamicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaJobDynamicInfo) ProtoMessage() {}

func (x *OtaJobDynamicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaJobDynamicInfo.ProtoReflect.Descriptor instead.
func (*OtaJobDynamicInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{216}
}

func (x *OtaJobDynamicInfo) GetDynamicMode() int64 {
	if x != nil {
		return x.DynamicMode
	}
	return 0
}

type OtaJobStaticInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 定向升级的设备名称列表。
	// 使用差分升级包进行定向升级时，要升级的设备的当前 OTA 模块版本号需与差分升级包的待升级版本号（SrcVersion）相同。
	// 可以调用 QueryDeviceDetail ，查看设备 OTA 模块版本号（FirmwareVersion）。
	// 列表中的设备所属的产品必须与升级包所属产品一致。
	// 列表中不能有重复的设备名称。
	// 最多可传入 200 个设备名称。
	// 静态升级
	TargetDeviceNames []string `protobuf:"bytes,1,rep,name=targetDeviceNames,proto3" json:"targetDeviceNames,omitempty"` // 定向升级的设备名称列表。最多可传入200个设备名称。以逗号分隔
	// 指定结束升级的时间。
	// 结束时间距发起时间（ScheduleTime）最少 1 小时，最多为 30 天。取值为 13 位毫秒值时间戳。
	// 不传入该参数，则表示不会强制结束升级。
	// 静态升级
	ScheduleFinishTime int64 `protobuf:"varint,2,opt,name=scheduleFinishTime,proto3" json:"scheduleFinishTime,omitempty"` // 指定结束升级的时间，单位为毫秒。
	// 指定发起 OTA 升级的时间。
	// 定时时间范围需为当前时间的 5 分钟后至 7 天内。取值为秒时间戳。
	// 不传入该参数，则表示立即升级。
	// 静态升级
	ScheduleTime int64 `protobuf:"varint,3,opt,name=scheduleTime,proto3" json:"scheduleTime,omitempty"`
	GrayPercent  int64 `protobuf:"varint,4,opt,name=grayPercent,proto3" json:"grayPercent,omitempty"` //灰度的范围,小数点后两位, 1.23%为 123
}

func (x *OtaJobStaticInfo) Reset() {
	*x = OtaJobStaticInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaJobStaticInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaJobStaticInfo) ProtoMessage() {}

func (x *OtaJobStaticInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaJobStaticInfo.ProtoReflect.Descriptor instead.
func (*OtaJobStaticInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{217}
}

func (x *OtaJobStaticInfo) GetTargetDeviceNames() []string {
	if x != nil {
		return x.TargetDeviceNames
	}
	return nil
}

func (x *OtaJobStaticInfo) GetScheduleFinishTime() int64 {
	if x != nil {
		return x.ScheduleFinishTime
	}
	return 0
}

func (x *OtaJobStaticInfo) GetScheduleTime() int64 {
	if x != nil {
		return x.ScheduleTime
	}
	return 0
}

func (x *OtaJobStaticInfo) GetGrayPercent() int64 {
	if x != nil {
		return x.GrayPercent
	}
	return 0
}

type OtaFirmwareJobIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	FirmwareID int64     `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID  string    `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string    `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *OtaFirmwareJobIndexReq) Reset() {
	*x = OtaFirmwareJobIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareJobIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareJobIndexReq) ProtoMessage() {}

func (x *OtaFirmwareJobIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareJobIndexReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareJobIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{218}
}

func (x *OtaFirmwareJobIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *OtaFirmwareJobIndexReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaFirmwareJobIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareJobIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type OtaFirmwareJobIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*OtaFirmwareJobInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OtaFirmwareJobIndexResp) Reset() {
	*x = OtaFirmwareJobIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareJobIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareJobIndexResp) ProtoMessage() {}

func (x *OtaFirmwareJobIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareJobIndexResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareJobIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{219}
}

func (x *OtaFirmwareJobIndexResp) GetList() []*OtaFirmwareJobInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *OtaFirmwareJobIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OtaJobByDeviceIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo   *PageInfo `protobuf:"bytes,1,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
	FirmwareID int64     `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID  string    `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string    `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *OtaJobByDeviceIndexReq) Reset() {
	*x = OtaJobByDeviceIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaJobByDeviceIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaJobByDeviceIndexReq) ProtoMessage() {}

func (x *OtaJobByDeviceIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaJobByDeviceIndexReq.ProtoReflect.Descriptor instead.
func (*OtaJobByDeviceIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{220}
}

func (x *OtaJobByDeviceIndexReq) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *OtaJobByDeviceIndexReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaJobByDeviceIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaJobByDeviceIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type OtaFirmwareDeviceIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	FirmwareID int64     `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	JobID      int64     `protobuf:"varint,3,opt,name=jobID,proto3" json:"jobID,omitempty"`
	DeviceName string    `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	SrcVersion string    `protobuf:"bytes,7,opt,name=srcVersion,proto3" json:"srcVersion,omitempty"`
	Status     int64     `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`     //设备升级作业状态。1：待确认。 2：待推送。 3：已推送。  4：升级中。 5:升级成功 6: 升级失败. 7:已取消
	IsOnline   int64     `protobuf:"varint,15,opt,name=isOnline,proto3" json:"isOnline,omitempty"` // 设备是否在线
}

func (x *OtaFirmwareDeviceIndexReq) Reset() {
	*x = OtaFirmwareDeviceIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareDeviceIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareDeviceIndexReq) ProtoMessage() {}

func (x *OtaFirmwareDeviceIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareDeviceIndexReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareDeviceIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{221}
}

func (x *OtaFirmwareDeviceIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *OtaFirmwareDeviceIndexReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaFirmwareDeviceIndexReq) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *OtaFirmwareDeviceIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *OtaFirmwareDeviceIndexReq) GetSrcVersion() string {
	if x != nil {
		return x.SrcVersion
	}
	return ""
}

func (x *OtaFirmwareDeviceIndexReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OtaFirmwareDeviceIndexReq) GetIsOnline() int64 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

type OtaFirmwareDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirmwareID  int64  `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	JobID       int64  `protobuf:"varint,3,opt,name=jobID,proto3" json:"jobID,omitempty"`
	ProductID   string `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`
	ProductName string `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
	DeviceName  string `protobuf:"bytes,6,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	SrcVersion  string `protobuf:"bytes,7,opt,name=srcVersion,proto3" json:"srcVersion,omitempty"`
	DestVersion string `protobuf:"bytes,8,opt,name=destVersion,proto3" json:"destVersion,omitempty"`
	Step        int64  `protobuf:"varint,9,opt,name=step,proto3" json:"step,omitempty"`      // 当前的升级进度  0-100%    -1：升级失败。-2：下载失败。-3：校验失败。-4：烧写失败。
	Detail      string `protobuf:"bytes,10,opt,name=detail,proto3" json:"detail,omitempty"`  //详情
	Status      int64  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"` //设备升级作业状态。1：待确认。 2：待推送。 3：已推送。  4：升级中。 5:升级成功 6: 升级失败. 7:已取消
	CreatedTime int64  `protobuf:"varint,13,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	UpdatedTime int64  `protobuf:"varint,14,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"`
	IsOnline    int64  `protobuf:"varint,15,opt,name=isOnline,proto3" json:"isOnline,omitempty"` //只读 设备是否在线
}

func (x *OtaFirmwareDeviceInfo) Reset() {
	*x = OtaFirmwareDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareDeviceInfo) ProtoMessage() {}

func (x *OtaFirmwareDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareDeviceInfo.ProtoReflect.Descriptor instead.
func (*OtaFirmwareDeviceInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{222}
}

func (x *OtaFirmwareDeviceInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OtaFirmwareDeviceInfo) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaFirmwareDeviceInfo) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *OtaFirmwareDeviceInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareDeviceInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OtaFirmwareDeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *OtaFirmwareDeviceInfo) GetSrcVersion() string {
	if x != nil {
		return x.SrcVersion
	}
	return ""
}

func (x *OtaFirmwareDeviceInfo) GetDestVersion() string {
	if x != nil {
		return x.DestVersion
	}
	return ""
}

func (x *OtaFirmwareDeviceInfo) GetStep() int64 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *OtaFirmwareDeviceInfo) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *OtaFirmwareDeviceInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OtaFirmwareDeviceInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *OtaFirmwareDeviceInfo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *OtaFirmwareDeviceInfo) GetIsOnline() int64 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

type OtaFirmwareDeviceIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*OtaFirmwareDeviceInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OtaFirmwareDeviceIndexResp) Reset() {
	*x = OtaFirmwareDeviceIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareDeviceIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareDeviceIndexResp) ProtoMessage() {}

func (x *OtaFirmwareDeviceIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareDeviceIndexResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareDeviceIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{223}
}

func (x *OtaFirmwareDeviceIndexResp) GetList() []*OtaFirmwareDeviceInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *OtaFirmwareDeviceIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OtaFirmwareDeviceCancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID  int64    `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	JobID       int64    `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	DeviceNames []string `protobuf:"bytes,3,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"`
}

func (x *OtaFirmwareDeviceCancelReq) Reset() {
	*x = OtaFirmwareDeviceCancelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareDeviceCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareDeviceCancelReq) ProtoMessage() {}

func (x *OtaFirmwareDeviceCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareDeviceCancelReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareDeviceCancelReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{224}
}

func (x *OtaFirmwareDeviceCancelReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaFirmwareDeviceCancelReq) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *OtaFirmwareDeviceCancelReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

type OtaFirmwareDeviceRetryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID  int64    `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	JobID       int64    `protobuf:"varint,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
	DeviceNames []string `protobuf:"bytes,3,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"`
}

func (x *OtaFirmwareDeviceRetryReq) Reset() {
	*x = OtaFirmwareDeviceRetryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareDeviceRetryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareDeviceRetryReq) ProtoMessage() {}

func (x *OtaFirmwareDeviceRetryReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareDeviceRetryReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareDeviceRetryReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{225}
}

func (x *OtaFirmwareDeviceRetryReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaFirmwareDeviceRetryReq) GetJobID() int64 {
	if x != nil {
		return x.JobID
	}
	return 0
}

func (x *OtaFirmwareDeviceRetryReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

type OtaFirmwareDeviceConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *OtaFirmwareDeviceConfirmReq) Reset() {
	*x = OtaFirmwareDeviceConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareDeviceConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareDeviceConfirmReq) ProtoMessage() {}

func (x *OtaFirmwareDeviceConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareDeviceConfirmReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareDeviceConfirmReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{226}
}

func (x *OtaFirmwareDeviceConfirmReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareDeviceConfirmReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type PageInfo_OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 排序的字段名
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// 排序方式：1 从小到大, 2 从大到小
	Sort int64 `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *PageInfo_OrderBy) Reset() {
	*x = PageInfo_OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo_OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo_OrderBy) ProtoMessage() {}

func (x *PageInfo_OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo_OrderBy.ProtoReflect.Descriptor instead.
func (*PageInfo_OrderBy) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PageInfo_OrderBy) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PageInfo_OrderBy) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

var File_proto_dm_proto protoreflect.FileDescriptor

var file_proto_dm_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x64, 0x6d, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x33, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x3f, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6d,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x0c, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6d,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x54, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x30, 0x0a, 0x0a, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x18, 0x0a, 0x06,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x50, 0x0a, 0x06,
	0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x6e, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x35,
	0x0a, 0x07, 0x49, 0x44, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x5c, 0x0a, 0x10, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d,
	0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x6b, 0x0a, 0x15, 0x4f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22,
	0x55, 0x0a, 0x16, 0x4f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x4f, 0x74, 0x61, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x61, 0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x72, 0x65, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x6e, 0x65, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x77,
	0x69, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x0e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x69, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x50, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x63, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4f, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0xe0, 0x04, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x65, 0x72,
	0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x65,
	0x72, 0x6d, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x4c,
	0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0f,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x09, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x22, 0xd1, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x12,
	0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22,
	0x8f, 0x04, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x4c, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x65, 0x72, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72,
	0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3b, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbb,
	0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x15,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22,
	0xca, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x42, 0x0a, 0x1e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x22, 0x6d, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x22,
	0x73, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x22, 0x59, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xba, 0x01,
	0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x73,
	0x67, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x22, 0x4f, 0x0a, 0x17, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d,
	0x73, 0x67, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x69, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x57, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xf5, 0x02, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x72, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x1c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x72, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x63, 0x0a,
	0x1d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x53, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4f, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xb5, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x04, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x74, 0x63, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x74, 0x63, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x97,
	0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x1a,
	0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x0f, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x69, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x72, 0x0a,
	0x18, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44,
	0x73, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73,
	0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73,
	0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x73, 0x4d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x4d,
	0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf5, 0x01, 0x0a,
	0x1d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe4, 0x05, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x44, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44,
	0x12, 0x4a, 0x0a, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x2e, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x72, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x72, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x1a, 0x4b, 0x0a, 0x10, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x64, 0x6d, 0x2e, 0x49, 0x44, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x73, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x44, 0x73, 0x22, 0x46, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x52,
	0x65, 0x71, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xc2, 0x03, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x0b,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0x4b, 0x0a, 0x10, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x64, 0x6d, 0x2e, 0x49,
	0x44, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x55, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x48, 0x75,
	0x62, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x4b,
	0x0a, 0x0f, 0x48, 0x75, 0x62, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x48, 0x75, 0x62, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x0a,
	0x48, 0x75, 0x62, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x51, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6d, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x04, 0x0a, 0x0f, 0x53, 0x65,
	0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x12, 0x46, 0x0a,
	0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x2e, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x73, 0x1a,
	0x4b, 0x0a, 0x10, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x64, 0x6d, 0x2e, 0x49, 0x44, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x10,
	0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc8, 0x04,
	0x0a, 0x13, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x6d, 0x2e, 0x41, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x2e, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x4b, 0x0a, 0x10, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x64, 0x6d, 0x2e, 0x49, 0x44, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x14, 0x41, 0x62, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xcb, 0x01, 0x0a, 0x0f, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x22, 0xc4, 0x01,
	0x0a, 0x0e, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d,
	0x2e, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x60, 0x0a, 0x0a, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x26, 0x0a, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xff, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x12, 0x31, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x39, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0a, 0x12, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x47,
	0x65, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x45, 0x64, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x0c,
	0x45, 0x64, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x74, 0x0a, 0x18, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x28, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x0a,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0xcf, 0x02, 0x0a, 0x1b, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x16,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73,
	0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73,
	0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x4d, 0x73, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x15, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x14, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x22, 0x5a, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x36,
	0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x75,
	0x73, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22,
	0x47, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x92,
	0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x46,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x33,
	0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x22, 0x41, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x87, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x69, 0x67, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x8b, 0x01, 0x0a,
	0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x6f, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x16, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x6b,
	0x0a, 0x17, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x42, 0x69, 0x6e, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x17, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x88, 0x05,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64,
	0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x22, 0x60, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x68, 0x61, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x12, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd9, 0x01, 0x0a, 0x12, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x73,
	0x0a, 0x19, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xd7, 0x13, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x25, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34,
	0x0a, 0x06, 0x61, 0x64, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x64,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x63, 0x63,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4d, 0x0a, 0x0f,
	0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x18,
	0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x6d, 0x2e, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x65, 0x78, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4a,
	0x6f, 0x62, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x73, 0x74, 0x49, 0x70, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x65, 0x70, 0x74, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x65, 0x70, 0x74,
	0x12, 0x28, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x3b,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x41,
	0x0a, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x3d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x67, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x67, 0x12,
	0x2c, 0x0a, 0x11, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6d, 0x67, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x42, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x10, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x64, 0x6d, 0x2e, 0x49, 0x44,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x54, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x25, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x49, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x44,
	0x65, 0x76, 0x49, 0x6e, 0x69, 0x74, 0x22, 0x77, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x49, 0x6e, 0x69,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74, 0x49, 0x44, 0x22,
	0x99, 0x0b, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x67,
	0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x67,
	0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x32,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x69, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x55, 0x69, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x37, 0x0a, 0x09, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x0d, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x55, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x69,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x69, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x69, 0x22, 0x34, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x22, 0x7a, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xf5,
	0x06, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x17, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69,
	0x78, 0x52, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x78, 0x52,
	0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x78,
	0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x74, 0x22, 0x53, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x73, 0x0a, 0x11, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x77, 0x69, 0x74, 0x68, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22,
	0xee, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x13, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x49, 0x44, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x22, 0xed, 0x0d, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x40, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x18, 0x2e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69,
	0x6b, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x6b,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x6e, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x49, 0x44, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x68, 0x61, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x65, 0x70, 0x74,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x49, 0x44, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x04, 0x64, 0x65, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4e, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4f, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x41, 0x0a, 0x15, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xbc,
	0x05, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x69, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x19, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x46, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x43, 0x61, 0x6e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x44, 0x50, 0x61, 0x74, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a,
	0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd9, 0x04, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x73, 0x43, 0x61,
	0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x75, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x66, 0x66, 0x6f, 0x72, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x66, 0x66, 0x6f, 0x72, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x41, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x43, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x66, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x43, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xf7, 0x02, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x43, 0x61,
	0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xb7, 0x04, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69,
	0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x75,
	0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x66, 0x66, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x66, 0x66, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x19, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x73, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x73, 0x6c, 0x22, 0x37, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x22, 0x2c, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x73, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x73, 0x6c, 0x22,
	0x80, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x7c, 0x0a, 0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x22, 0xc4, 0x03, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69,
	0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x75,
	0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x69, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x53, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd2, 0x04, 0x0a,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x73,
	0x43, 0x61, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x69, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69,
	0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x66, 0x66,
	0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x66, 0x66,
	0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x77, 0x69,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x2b, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x73, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x73, 0x6c, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x52, 0x0a, 0x14, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x72, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3e,
	0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x6e, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x5a,
	0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x22, 0x3e, 0x0a, 0x17, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x72, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x65, 0x72, 0x72, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x2e,
	0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x43,
	0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x69, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x55,
	0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x6a,
	0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x77, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x64, 0x6d, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49,
	0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x77, 0x0a,
	0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x79, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x22, 0xe5, 0x02, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x0c, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x22, 0x8b, 0x03, 0x0a, 0x0c,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0f, 0x4f, 0x74, 0x61,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x15,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x16, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x76, 0x0a, 0x14, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x53, 0x0a,
	0x15, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x35, 0x0a, 0x13, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x4f, 0x74,
	0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x4f, 0x74, 0x61,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x4f, 0x74, 0x61,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x4f, 0x74, 0x61,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x5d, 0x0a, 0x18, 0x4f, 0x74, 0x61, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x97, 0x03, 0x0a, 0x14, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x78, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x22, 0xec, 0x02,
	0x0a, 0x18, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x44, 0x69, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x44, 0x69,
	0x66, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x65,
	0x65, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x86, 0x01, 0x0a,
	0x18, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x6d, 0x0a, 0x17, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x18, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xa1, 0x03, 0x0a, 0x0f, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2c, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x69,
	0x73, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xa7, 0x05, 0x0a, 0x12, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50,
	0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x75,
	0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x73, 0x4e, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x35, 0x0a,
	0x11, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67,
	0x72, 0x61, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x67, 0x72, 0x61, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x98, 0x01,
	0x0a, 0x16, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4a, 0x6f, 0x62,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x17, 0x4f, 0x74, 0x61, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62,
	0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x4f, 0x74, 0x61,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x15, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x61, 0x0a, 0x1a, 0x4f, 0x74, 0x61, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x74, 0x0a, 0x1a, 0x4f,
	0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x73, 0x0a, 0x19, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x1b, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x32, 0xbc, 0x13, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d,
	0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x14,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x46, 0x69, 0x78, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x78, 0x52, 0x65,
	0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x15, 0x2e, 0x64,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64,
	0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1a,
	0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x09, 0x2e, 0x64,
	0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4e, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x38, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61,
	0x6e, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x10, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x17,
	0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x6e,
	0x62, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x32, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x76, 0x65, 0x12, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x52, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1e, 0x2e, 0x64, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1f, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x18, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4b, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44,
	0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x40, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33,
	0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x09, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x17,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x13,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x16,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40,
	0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x40, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x32, 0x8b, 0x0d, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x09, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e,
	0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x46, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x13, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e,
	0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1d, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x73, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x33,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x1a, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x37, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0x09, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x1a, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x63, 0x0a, 0x1a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x64, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54,
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x20, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x32, 0xa7, 0x02, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64,
	0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e,
	0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x32, 0xb4, 0x09, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x2e, 0x64, 0x6d,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x10, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x44, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x37, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x64, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x15, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a,
	0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x36, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x1a,
	0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2d, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4e, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x60, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x18, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0a, 0x2e,
	0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x1a, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x1a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0x91, 0x04, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2c, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12,
	0x3e, 0x0a, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3f, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x34, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x44, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a,
	0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x40, 0x0a, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x42, 0x0a, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x6d,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xa5, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x64,
	0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x13,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68,
	0x41, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x32, 0xb3, 0x06,
	0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x0b, 0x73,
	0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x2e, 0x64, 0x6d, 0x2e,
	0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x68, 0x75, 0x62, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x48, 0x75, 0x62, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x48, 0x75, 0x62, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x13, 0x2e, 0x64, 0x6d,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x1a, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x2e, 0x64, 0x6d,
	0x2e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33,
	0x0a, 0x11, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c,
	0x6f, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x2e,
	0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x32, 0x12, 0x1e, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c,
	0x6f, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x41, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1d, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x13, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x61,
	0x6e, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x32, 0xaa, 0x06, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x64, 0x6d, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x11, 0x2e, 0x64,
	0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x15, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x65, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x63, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x21,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x1f, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x64, 0x6d,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x65, 0x6e,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x13, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x64,
	0x6d, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x40, 0x0a, 0x15, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x42, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x64, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x0f, 0x2e,
	0x64, 0x6d, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10,
	0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x32, 0x96, 0x09, 0x0a, 0x09, 0x4f, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x41,
	0x0a, 0x15, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x44, 0x12, 0x41, 0x0a, 0x15, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x64, 0x6d, 0x2e,
	0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x15, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0a, 0x2e,
	0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x2e, 0x64,
	0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x4f,
	0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x13, 0x6f, 0x74, 0x61, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0a,
	0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x64, 0x6d, 0x2e,
	0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3a, 0x0a, 0x14, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4a, 0x6f,
	0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x13, 0x6f,
	0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4a,
	0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x12, 0x6f,
	0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x16, 0x2e,
	0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x14, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x4a, 0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e,
	0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x57, 0x0a, 0x16, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x2e, 0x64, 0x6d, 0x2e,
	0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x6d, 0x2e, 0x4f,
	0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x17, 0x6f, 0x74, 0x61,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1e, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x42, 0x0a, 0x16, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x64, 0x6d, 0x2e, 0x4f,
	0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x18, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12,
	0x1f, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x13, 0x6f,
	0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x44, 0x12, 0x33, 0x0a, 0x13, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74,
	0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x13, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0a, 0x2e,
	0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x12, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e,
	0x4f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x36, 0x0a, 0x11, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xb7, 0x07, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44,
	0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x61, 0x76, 0x65, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x09,
	0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x61, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e,
	0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x44, 0x12, 0x3b, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x6d,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x4a, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e,
	0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a,
	0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x12, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x59, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1d,
	0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x58, 0x0a,
	0x19, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x69, 0x76, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x2e, 0x64, 0x6d, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x69, 0x76, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x21, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x42, 0x07, 0x5a, 0x05, 0x70, 0x62, 0x2f, 0x64, 0x6d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_dm_proto_rawDescOnce sync.Once
	file_proto_dm_proto_rawDescData = file_proto_dm_proto_rawDesc
)

func file_proto_dm_proto_rawDescGZIP() []byte {
	file_proto_dm_proto_rawDescOnce.Do(func() {
		file_proto_dm_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_dm_proto_rawDescData)
	})
	return file_proto_dm_proto_rawDescData
}

var file_proto_dm_proto_msgTypes = make([]protoimpl.MessageInfo, 256)
var file_proto_dm_proto_goTypes = []interface{}{
	(*Empty)(nil),                             // 0: dm.Empty
	(*TimeRange)(nil),                         // 1: dm.TimeRange
	(*PageInfo)(nil),                          // 2: dm.PageInfo
	(*CompareString)(nil),                     // 3: dm.CompareString
	(*CompareInt64)(nil),                      // 4: dm.CompareInt64
	(*FileCore)(nil),                          // 5: dm.FileCore
	(*SendOption)(nil),                        // 6: dm.SendOption
	(*WithIDCode)(nil),                        // 7: dm.WithIDCode
	(*WithID)(nil),                            // 8: dm.WithID
	(*WithIDChildren)(nil),                    // 9: dm.WithIDChildren
	(*IDPath)(nil),                            // 10: dm.IDPath
	(*IDsInfo)(nil),                           // 11: dm.IDsInfo
	(*IDPathWithUpdate)(nil),                  // 12: dm.IDPathWithUpdate
	(*PublishMsg)(nil),                        // 13: dm.PublishMsg
	(*OtaModuleInfoIndexReq)(nil),             // 14: dm.OtaModuleInfoIndexReq
	(*OtaModuleInfoIndexResp)(nil),            // 15: dm.OtaModuleInfoIndexResp
	(*OtaModuleInfo)(nil),                     // 16: dm.OtaModuleInfo
	(*ProductInitReq)(nil),                    // 17: dm.ProductInitReq
	(*DeviceModuleVersionReadReq)(nil),        // 18: dm.DeviceModuleVersionReadReq
	(*DeviceModuleVersion)(nil),               // 19: dm.DeviceModuleVersion
	(*DeviceModuleVersionIndexReq)(nil),       // 20: dm.DeviceModuleVersionIndexReq
	(*DeviceModuleVersionIndexResp)(nil),      // 21: dm.DeviceModuleVersionIndexResp
	(*DeviceMoveReq)(nil),                     // 22: dm.DeviceMoveReq
	(*DeviceResetReq)(nil),                    // 23: dm.DeviceResetReq
	(*DeviceTransferReq)(nil),                 // 24: dm.DeviceTransferReq
	(*UserDeviceShareReadReq)(nil),            // 25: dm.UserDeviceShareReadReq
	(*UserDeviceShareIndexReq)(nil),           // 26: dm.UserDeviceShareIndexReq
	(*UserDeviceShareIndexResp)(nil),          // 27: dm.UserDeviceShareIndexResp
	(*UserDeviceShareMultiDeleteReq)(nil),     // 28: dm.UserDeviceShareMultiDeleteReq
	(*UserDeviceShareInfo)(nil),               // 29: dm.UserDeviceShareInfo
	(*SharePerm)(nil),                         // 30: dm.SharePerm
	(*DeviceShareInfo)(nil),                   // 31: dm.DeviceShareInfo
	(*UserDeviceShareMultiInfo)(nil),          // 32: dm.UserDeviceShareMultiInfo
	(*UserDeviceShareMultiToken)(nil),         // 33: dm.UserDeviceShareMultiToken
	(*UserDeviceShareMultiAcceptReq)(nil),     // 34: dm.UserDeviceShareMultiAcceptReq
	(*UserDeviceCollectSave)(nil),             // 35: dm.UserDeviceCollectSave
	(*ProductCategory)(nil),                   // 36: dm.ProductCategory
	(*ProductCategorySchemaIndexResp)(nil),    // 37: dm.ProductCategorySchemaIndexResp
	(*ProductCategorySchemaIndexReq)(nil),     // 38: dm.ProductCategorySchemaIndexReq
	(*ProductCategorySchemaMultiSaveReq)(nil), // 39: dm.ProductCategorySchemaMultiSaveReq
	(*ProductCategoryIndexReq)(nil),           // 40: dm.ProductCategoryIndexReq
	(*ProductCategoryIndexResp)(nil),          // 41: dm.ProductCategoryIndexResp
	(*ProtocolScriptDebugReq)(nil),            // 42: dm.ProtocolScriptDebugReq
	(*ProtocolScriptDebugResp)(nil),           // 43: dm.ProtocolScriptDebugResp
	(*ProtocolScript)(nil),                    // 44: dm.ProtocolScript
	(*ProtocolScriptIndexReq)(nil),            // 45: dm.ProtocolScriptIndexReq
	(*ProtocolScriptIndexResp)(nil),           // 46: dm.ProtocolScriptIndexResp
	(*ProtocolScriptDevice)(nil),              // 47: dm.ProtocolScriptDevice
	(*ProtocolScriptDeviceIndexReq)(nil),      // 48: dm.ProtocolScriptDeviceIndexReq
	(*ProtocolScriptDeviceIndexResp)(nil),     // 49: dm.ProtocolScriptDeviceIndexResp
	(*ProtocolInfoIndexReq)(nil),              // 50: dm.ProtocolInfoIndexReq
	(*ProtocolInfoIndexResp)(nil),             // 51: dm.ProtocolInfoIndexResp
	(*ProtocolServiceIndexReq)(nil),           // 52: dm.ProtocolServiceIndexReq
	(*ProtocolServiceIndexResp)(nil),          // 53: dm.ProtocolServiceIndexResp
	(*ProtocolService)(nil),                   // 54: dm.ProtocolService
	(*ProtocolInfo)(nil),                      // 55: dm.ProtocolInfo
	(*ProtocolConfigField)(nil),               // 56: dm.ProtocolConfigField
	(*ProtocolConfigInfo)(nil),                // 57: dm.ProtocolConfigInfo
	(*ShadowIndexResp)(nil),                   // 58: dm.ShadowIndexResp
	(*ShadowIndex)(nil),                       // 59: dm.ShadowIndex
	(*PropertyGetReportSendReq)(nil),          // 60: dm.PropertyGetReportSendReq
	(*PropertyGetReportSendResp)(nil),         // 61: dm.PropertyGetReportSendResp
	(*PropertyGetReportSendMsg)(nil),          // 62: dm.PropertyGetReportSendMsg
	(*PropertyGetReportMultiSendReq)(nil),     // 63: dm.PropertyGetReportMultiSendReq
	(*PropertyGetReportMultiSendResp)(nil),    // 64: dm.PropertyGetReportMultiSendResp
	(*PropertyLogIndexReq)(nil),               // 65: dm.PropertyLogIndexReq
	(*PropertyLogLatestIndexReq)(nil),         // 66: dm.PropertyLogLatestIndexReq
	(*PropertyLogLatestIndex2Req)(nil),        // 67: dm.PropertyLogLatestIndex2Req
	(*PropertyLogInfo)(nil),                   // 68: dm.PropertyLogInfo
	(*PropertyLogIndexResp)(nil),              // 69: dm.PropertyLogIndexResp
	(*EventLogIndexReq)(nil),                  // 70: dm.EventLogIndexReq
	(*EventLogInfo)(nil),                      // 71: dm.EventLogInfo
	(*EventLogIndexResp)(nil),                 // 72: dm.EventLogIndexResp
	(*HubLogIndexReq)(nil),                    // 73: dm.HubLogIndexReq
	(*HubLogIndexResp)(nil),                   // 74: dm.HubLogIndexResp
	(*HubLogInfo)(nil),                        // 75: dm.HubLogInfo
	(*StatusLogIndexReq)(nil),                 // 76: dm.StatusLogIndexReq
	(*StatusLogIndexResp)(nil),                // 77: dm.StatusLogIndexResp
	(*StatusLogInfo)(nil),                     // 78: dm.StatusLogInfo
	(*SendLogIndexReq)(nil),                   // 79: dm.SendLogIndexReq
	(*SendLogIndexResp)(nil),                  // 80: dm.SendLogIndexResp
	(*SendLogInfo)(nil),                       // 81: dm.SendLogInfo
	(*AbnormalLogIndexReq)(nil),               // 82: dm.AbnormalLogIndexReq
	(*AbnormalLogIndexResp)(nil),              // 83: dm.AbnormalLogIndexResp
	(*AbnormalLogInfo)(nil),                   // 84: dm.AbnormalLogInfo
	(*SdkLogIndexReq)(nil),                    // 85: dm.SdkLogIndexReq
	(*SdkLogIndexResp)(nil),                   // 86: dm.SdkLogIndexResp
	(*SdkLogInfo)(nil),                        // 87: dm.SdkLogInfo
	(*ActionSendReq)(nil),                     // 88: dm.ActionSendReq
	(*ActionSendResp)(nil),                    // 89: dm.ActionSendResp
	(*RespReadReq)(nil),                       // 90: dm.RespReadReq
	(*PropertyControlSendReq)(nil),            // 91: dm.PropertyControlSendReq
	(*WithProfile)(nil),                       // 92: dm.WithProfile
	(*ActionRespReq)(nil),                     // 93: dm.ActionRespReq
	(*PropertyControlSendResp)(nil),           // 94: dm.PropertyControlSendResp
	(*GatewayGetFoundReq)(nil),                // 95: dm.GatewayGetFoundReq
	(*EdgeSendReq)(nil),                       // 96: dm.EdgeSendReq
	(*EdgeSendResp)(nil),                      // 97: dm.EdgeSendResp
	(*GatewayNotifyBindSendReq)(nil),          // 98: dm.GatewayNotifyBindSendReq
	(*SendMsgReq)(nil),                        // 99: dm.SendMsgReq
	(*SendMsgResp)(nil),                       // 100: dm.SendMsgResp
	(*PropertyControlMultiSendReq)(nil),       // 101: dm.PropertyControlMultiSendReq
	(*PropertyControlSendMsg)(nil),            // 102: dm.PropertyControlSendMsg
	(*PropertyControlMultiSendResp)(nil),      // 103: dm.PropertyControlMultiSendResp
	(*ProductRemoteConfig)(nil),               // 104: dm.ProductRemoteConfig
	(*RemoteConfigCreateReq)(nil),             // 105: dm.RemoteConfigCreateReq
	(*RemoteConfigIndexReq)(nil),              // 106: dm.RemoteConfigIndexReq
	(*RemoteConfigIndexResp)(nil),             // 107: dm.RemoteConfigIndexResp
	(*RemoteConfigPushAllReq)(nil),            // 108: dm.RemoteConfigPushAllReq
	(*RemoteConfigLastReadReq)(nil),           // 109: dm.RemoteConfigLastReadReq
	(*RemoteConfigLastReadResp)(nil),          // 110: dm.RemoteConfigLastReadResp
	(*ProductCustomReadReq)(nil),              // 111: dm.ProductCustomReadReq
	(*ProductCustom)(nil),                     // 112: dm.ProductCustom
	(*CustomTopic)(nil),                       // 113: dm.CustomTopic
	(*DeviceGatewayBindDevice)(nil),           // 114: dm.DeviceGatewayBindDevice
	(*DeviceGatewaySign)(nil),                 // 115: dm.DeviceGatewaySign
	(*DeviceGatewayMultiCreateReq)(nil),       // 116: dm.DeviceGatewayMultiCreateReq
	(*DeviceGatewayIndexReq)(nil),             // 117: dm.DeviceGatewayIndexReq
	(*DeviceGatewayIndexResp)(nil),            // 118: dm.DeviceGatewayIndexResp
	(*DeviceGatewayMultiSaveReq)(nil),         // 119: dm.DeviceGatewayMultiSaveReq
	(*GatewayCanBindIndexReq)(nil),            // 120: dm.GatewayCanBindIndexReq
	(*GatewayCanBindIndexResp)(nil),           // 121: dm.GatewayCanBindIndexResp
	(*GroupInfoMultiCreateReq)(nil),           // 122: dm.GroupInfoMultiCreateReq
	(*GroupInfo)(nil),                         // 123: dm.GroupInfo
	(*GroupCore)(nil),                         // 124: dm.GroupCore
	(*GroupInfoCreateReq)(nil),                // 125: dm.GroupInfoCreateReq
	(*GroupInfoReadReq)(nil),                  // 126: dm.GroupInfoReadReq
	(*GroupInfoIndexReq)(nil),                 // 127: dm.GroupInfoIndexReq
	(*GroupInfoIndexResp)(nil),                // 128: dm.GroupInfoIndexResp
	(*GroupInfoUpdateReq)(nil),                // 129: dm.GroupInfoUpdateReq
	(*GroupDeviceMultiSaveReq)(nil),           // 130: dm.GroupDeviceMultiSaveReq
	(*GroupDeviceMultiDeleteReq)(nil),         // 131: dm.GroupDeviceMultiDeleteReq
	(*Point)(nil),                             // 132: dm.Point
	(*DeviceInfo)(nil),                        // 133: dm.DeviceInfo
	(*ProductConfig)(nil),                     // 134: dm.ProductConfig
	(*DevInit)(nil),                           // 135: dm.DevInit
	(*ProductInfo)(nil),                       // 136: dm.ProductInfo
	(*ProductCustomUi)(nil),                   // 137: dm.ProductCustomUi
	(*ProductInfoDeleteReq)(nil),              // 138: dm.ProductInfoDeleteReq
	(*ProductInfoReadReq)(nil),                // 139: dm.ProductInfoReadReq
	(*ProductInfoIndexReq)(nil),               // 140: dm.ProductInfoIndexReq
	(*ProductInfoIndexResp)(nil),              // 141: dm.ProductInfoIndexResp
	(*DeviceOnlineMultiFixReq)(nil),           // 142: dm.deviceOnlineMultiFixReq
	(*DeviceOnlineMultiFix)(nil),              // 143: dm.deviceOnlineMultiFix
	(*DeviceInfoDeleteReq)(nil),               // 144: dm.DeviceInfoDeleteReq
	(*DeviceCore)(nil),                        // 145: dm.DeviceCore
	(*DeviceData)(nil),                        // 146: dm.DeviceData
	(*DeviceError)(nil),                       // 147: dm.DeviceError
	(*DeviceInfoReadReq)(nil),                 // 148: dm.DeviceInfoReadReq
	(*DeviceInfoMultiUpdateReq)(nil),          // 149: dm.DeviceInfoMultiUpdateReq
	(*DeviceInfoIndexReq)(nil),                // 150: dm.DeviceInfoIndexReq
	(*DeviceInfoIndexResp)(nil),               // 151: dm.DeviceInfoIndexResp
	(*RootCheckReq)(nil),                      // 152: dm.RootCheckReq
	(*CommonSchemaUpdateReq)(nil),             // 153: dm.CommonSchemaUpdateReq
	(*CommonSchemaCreateReq)(nil),             // 154: dm.CommonSchemaCreateReq
	(*CommonSchemaIndexReq)(nil),              // 155: dm.CommonSchemaIndexReq
	(*CommonSchemaIndexResp)(nil),             // 156: dm.CommonSchemaIndexResp
	(*CommonSchemaInfo)(nil),                  // 157: dm.CommonSchemaInfo
	(*ProductSchemaUpdateReq)(nil),            // 158: dm.ProductSchemaUpdateReq
	(*ProductSchemaMultiCreateReq)(nil),       // 159: dm.ProductSchemaMultiCreateReq
	(*ProductSchemaCreateReq)(nil),            // 160: dm.ProductSchemaCreateReq
	(*ProductSchemaDeleteReq)(nil),            // 161: dm.ProductSchemaDeleteReq
	(*ProductSchemaIndexReq)(nil),             // 162: dm.ProductSchemaIndexReq
	(*ProductSchemaIndexResp)(nil),            // 163: dm.ProductSchemaIndexResp
	(*ProductSchemaInfo)(nil),                 // 164: dm.ProductSchemaInfo
	(*ProductSchemaTslImportReq)(nil),         // 165: dm.ProductSchemaTslImportReq
	(*ProductSchemaTslReadReq)(nil),           // 166: dm.ProductSchemaTslReadReq
	(*ProductSchemaTslReadResp)(nil),          // 167: dm.ProductSchemaTslReadResp
	(*DeviceSchemaMultiCreateReq)(nil),        // 168: dm.DeviceSchemaMultiCreateReq
	(*DeviceSchemaMultiDeleteReq)(nil),        // 169: dm.DeviceSchemaMultiDeleteReq
	(*DeviceSchemaIndexReq)(nil),              // 170: dm.DeviceSchemaIndexReq
	(*DeviceSchemaIndexResp)(nil),             // 171: dm.DeviceSchemaIndexResp
	(*DeviceSchema)(nil),                      // 172: dm.DeviceSchema
	(*DeviceSchemaTslReadReq)(nil),            // 173: dm.DeviceSchemaTslReadReq
	(*DeviceSchemaTslReadResp)(nil),           // 174: dm.DeviceSchemaTslReadResp
	(*DeviceGroupMultiSaveReq)(nil),           // 175: dm.DeviceGroupMultiSaveReq
	(*DeviceProfile)(nil),                     // 176: dm.DeviceProfile
	(*DeviceProfileReadReq)(nil),              // 177: dm.DeviceProfileReadReq
	(*DeviceInfoCanBindReq)(nil),              // 178: dm.DeviceInfoCanBindReq
	(*DeviceInfoMultiBindReq)(nil),            // 179: dm.DeviceInfoMultiBindReq
	(*DeviceInfoMultiBindResp)(nil),           // 180: dm.DeviceInfoMultiBindResp
	(*DeviceInfoUnbindReq)(nil),               // 181: dm.DeviceInfoUnbindReq
	(*DeviceBindTokenReadReq)(nil),            // 182: dm.DeviceBindTokenReadReq
	(*DeviceBindTokenInfo)(nil),               // 183: dm.DeviceBindTokenInfo
	(*DeviceInfoBindReq)(nil),                 // 184: dm.DeviceInfoBindReq
	(*DeviceProfileIndexReq)(nil),             // 185: dm.DeviceProfileIndexReq
	(*DeviceProfileIndexResp)(nil),            // 186: dm.DeviceProfileIndexResp
	(*DeviceCountReq)(nil),                    // 187: dm.DeviceCountReq
	(*DeviceCountResp)(nil),                   // 188: dm.DeviceCountResp
	(*DeviceCountInfo)(nil),                   // 189: dm.DeviceCountInfo
	(*DeviceInfoCountReq)(nil),                // 190: dm.DeviceInfoCountReq
	(*DeviceTypeCountReq)(nil),                // 191: dm.DeviceTypeCountReq
	(*DeviceInfoCount)(nil),                   // 192: dm.DeviceInfoCount
	(*DeviceTypeCountResp)(nil),               // 193: dm.DeviceTypeCountResp
	(*Firmware)(nil),                          // 194: dm.Firmware
	(*FirmwareResp)(nil),                      // 195: dm.FirmwareResp
	(*FirmwareInfo)(nil),                      // 196: dm.FirmwareInfo
	(*OtaFirmwareFile)(nil),                   // 197: dm.OtaFirmwareFile
	(*FirmwareInfoDeleteReq)(nil),             // 198: dm.FirmwareInfoDeleteReq
	(*FirmwareInfoDeleteResp)(nil),            // 199: dm.FirmwareInfoDeleteResp
	(*FirmwareInfoIndexReq)(nil),              // 200: dm.FirmwareInfoIndexReq
	(*FirmwareInfoIndexResp)(nil),             // 201: dm.FirmwareInfoIndexResp
	(*FirmwareInfoReadReq)(nil),               // 202: dm.FirmwareInfoReadReq
	(*OtaFirmwareFileReq)(nil),                // 203: dm.OtaFirmwareFileReq
	(*OtaFirmwareFileInfo)(nil),               // 204: dm.OtaFirmwareFileInfo
	(*OtaFirmwareFileResp)(nil),               // 205: dm.OtaFirmwareFileResp
	(*OtaFirmwareFileIndexReq)(nil),           // 206: dm.OtaFirmwareFileIndexReq
	(*OtaFirmwareFileIndexResp)(nil),          // 207: dm.OtaFirmwareFileIndexResp
	(*FirmwareInfoReadResp)(nil),              // 208: dm.FirmwareInfoReadResp
	(*FirmwareFile)(nil),                      // 209: dm.FirmwareFile
	(*OtaFirmwareInfoCreateReq)(nil),          // 210: dm.OtaFirmwareInfoCreateReq
	(*OtaFirmwareInfoUpdateReq)(nil),          // 211: dm.OtaFirmwareInfoUpdateReq
	(*OtaFirmwareInfoIndexReq)(nil),           // 212: dm.OtaFirmwareInfoIndexReq
	(*OtaFirmwareInfoIndexResp)(nil),          // 213: dm.OtaFirmwareInfoIndexResp
	(*OtaFirmwareInfo)(nil),                   // 214: dm.OtaFirmwareInfo
	(*OtaFirmwareJobInfo)(nil),                // 215: dm.OtaFirmwareJobInfo
	(*OtaJobDynamicInfo)(nil),                 // 216: dm.OtaJobDynamicInfo
	(*OtaJobStaticInfo)(nil),                  // 217: dm.OtaJobStaticInfo
	(*OtaFirmwareJobIndexReq)(nil),            // 218: dm.OtaFirmwareJobIndexReq
	(*OtaFirmwareJobIndexResp)(nil),           // 219: dm.OtaFirmwareJobIndexResp
	(*OtaJobByDeviceIndexReq)(nil),            // 220: dm.OtaJobByDeviceIndexReq
	(*OtaFirmwareDeviceIndexReq)(nil),         // 221: dm.OtaFirmwareDeviceIndexReq
	(*OtaFirmwareDeviceInfo)(nil),             // 222: dm.OtaFirmwareDeviceInfo
	(*OtaFirmwareDeviceIndexResp)(nil),        // 223: dm.OtaFirmwareDeviceIndexResp
	(*OtaFirmwareDeviceCancelReq)(nil),        // 224: dm.OtaFirmwareDeviceCancelReq
	(*OtaFirmwareDeviceRetryReq)(nil),         // 225: dm.OtaFirmwareDeviceRetryReq
	(*OtaFirmwareDeviceConfirmReq)(nil),       // 226: dm.OtaFirmwareDeviceConfirmReq
	(*PageInfo_OrderBy)(nil),                  // 227: dm.PageInfo.OrderBy
	nil,                                       // 228: dm.UserDeviceShareInfo.SchemaPermEntry
	nil,                                       // 229: dm.UserDeviceShareInfo.AccessPermEntry
	nil,                                       // 230: dm.UserDeviceShareMultiInfo.SchemaPermEntry
	nil,                                       // 231: dm.UserDeviceShareMultiInfo.AccessPermEntry
	nil,                                       // 232: dm.ProtocolConfigInfo.ConfigEntry
	nil,                                       // 233: dm.PropertyLogIndexReq.BelongGroupEntry
	nil,                                       // 234: dm.PropertyLogInfo.BelongGroupEntry
	nil,                                       // 235: dm.SendLogIndexReq.BelongGroupEntry
	nil,                                       // 236: dm.AbnormalLogIndexReq.BelongGroupEntry
	nil,                                       // 237: dm.GroupInfo.TagsEntry
	nil,                                       // 238: dm.GroupInfo.FilesEntry
	nil,                                       // 239: dm.GroupInfoIndexReq.TagsEntry
	nil,                                       // 240: dm.GroupInfoUpdateReq.TagsEntry
	nil,                                       // 241: dm.DeviceInfo.TagsEntry
	nil,                                       // 242: dm.DeviceInfo.SchemaAliasEntry
	nil,                                       // 243: dm.DeviceInfo.ProtocolConfEntry
	nil,                                       // 244: dm.DeviceInfo.SubProtocolConfEntry
	nil,                                       // 245: dm.DeviceInfo.BelongGroupEntry
	nil,                                       // 246: dm.ProductInfo.TagsEntry
	nil,                                       // 247: dm.ProductInfo.ProtocolConfEntry
	nil,                                       // 248: dm.ProductInfo.SubProtocolConfEntry
	nil,                                       // 249: dm.ProductInfo.CustomUiEntry
	nil,                                       // 250: dm.ProductInfoIndexReq.TagsEntry
	nil,                                       // 251: dm.ProductInfoIndexReq.ProtocolConfEntry
	nil,                                       // 252: dm.DeviceInfoIndexReq.TagsEntry
	nil,                                       // 253: dm.DeviceInfoIndexReq.TagsLikeEntry
	nil,                                       // 254: dm.DeviceInfoIndexReq.PropertyEntry
	nil,                                       // 255: dm.DeviceCountInfo.CountEntry
	(*wrapperspb.Int64Value)(nil),             // 256: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil),            // 257: google.protobuf.StringValue
}
var file_proto_dm_proto_depIdxs = []int32{
	227, // 0: dm.PageInfo.orders:type_name -> dm.PageInfo.OrderBy
	2,   // 1: dm.OtaModuleInfoIndexReq.page:type_name -> dm.PageInfo
	16,  // 2: dm.OtaModuleInfoIndexResp.list:type_name -> dm.OtaModuleInfo
	2,   // 3: dm.DeviceModuleVersionIndexReq.page:type_name -> dm.PageInfo
	19,  // 4: dm.DeviceModuleVersionIndexResp.list:type_name -> dm.DeviceModuleVersion
	145, // 5: dm.DeviceMoveReq.old:type_name -> dm.DeviceCore
	145, // 6: dm.DeviceMoveReq.new:type_name -> dm.DeviceCore
	145, // 7: dm.DeviceResetReq.device:type_name -> dm.DeviceCore
	145, // 8: dm.DeviceTransferReq.device:type_name -> dm.DeviceCore
	145, // 9: dm.DeviceTransferReq.devices:type_name -> dm.DeviceCore
	145, // 10: dm.UserDeviceShareReadReq.device:type_name -> dm.DeviceCore
	2,   // 11: dm.UserDeviceShareIndexReq.page:type_name -> dm.PageInfo
	145, // 12: dm.UserDeviceShareIndexReq.device:type_name -> dm.DeviceCore
	29,  // 13: dm.UserDeviceShareIndexResp.list:type_name -> dm.UserDeviceShareInfo
	145, // 14: dm.UserDeviceShareInfo.device:type_name -> dm.DeviceCore
	228, // 15: dm.UserDeviceShareInfo.schemaPerm:type_name -> dm.UserDeviceShareInfo.SchemaPermEntry
	229, // 16: dm.UserDeviceShareInfo.accessPerm:type_name -> dm.UserDeviceShareInfo.AccessPermEntry
	256, // 17: dm.UserDeviceShareInfo.expTime:type_name -> google.protobuf.Int64Value
	257, // 18: dm.DeviceShareInfo.deviceAlias:type_name -> google.protobuf.StringValue
	31,  // 19: dm.UserDeviceShareMultiInfo.devices:type_name -> dm.DeviceShareInfo
	230, // 20: dm.UserDeviceShareMultiInfo.schemaPerm:type_name -> dm.UserDeviceShareMultiInfo.SchemaPermEntry
	231, // 21: dm.UserDeviceShareMultiInfo.accessPerm:type_name -> dm.UserDeviceShareMultiInfo.AccessPermEntry
	145, // 22: dm.UserDeviceShareMultiAcceptReq.devices:type_name -> dm.DeviceCore
	145, // 23: dm.UserDeviceCollectSave.devices:type_name -> dm.DeviceCore
	257, // 24: dm.ProductCategory.desc:type_name -> google.protobuf.StringValue
	36,  // 25: dm.ProductCategory.children:type_name -> dm.ProductCategory
	2,   // 26: dm.ProductCategoryIndexReq.page:type_name -> dm.PageInfo
	36,  // 27: dm.ProductCategoryIndexResp.list:type_name -> dm.ProductCategory
	13,  // 28: dm.ProtocolScriptDebugReq.req:type_name -> dm.PublishMsg
	13,  // 29: dm.ProtocolScriptDebugReq.resp:type_name -> dm.PublishMsg
	13,  // 30: dm.ProtocolScriptDebugResp.out:type_name -> dm.PublishMsg
	257, // 31: dm.ProtocolScript.desc:type_name -> google.protobuf.StringValue
	2,   // 32: dm.ProtocolScriptIndexReq.page:type_name -> dm.PageInfo
	44,  // 33: dm.ProtocolScriptIndexResp.list:type_name -> dm.ProtocolScript
	44,  // 34: dm.ProtocolScriptDevice.script:type_name -> dm.ProtocolScript
	136, // 35: dm.ProtocolScriptDevice.product:type_name -> dm.ProductInfo
	133, // 36: dm.ProtocolScriptDevice.device:type_name -> dm.DeviceInfo
	2,   // 37: dm.ProtocolScriptDeviceIndexReq.page:type_name -> dm.PageInfo
	47,  // 38: dm.ProtocolScriptDeviceIndexResp.list:type_name -> dm.ProtocolScriptDevice
	2,   // 39: dm.ProtocolInfoIndexReq.page:type_name -> dm.PageInfo
	55,  // 40: dm.ProtocolInfoIndexResp.list:type_name -> dm.ProtocolInfo
	2,   // 41: dm.ProtocolServiceIndexReq.page:type_name -> dm.PageInfo
	54,  // 42: dm.ProtocolServiceIndexResp.list:type_name -> dm.ProtocolService
	56,  // 43: dm.ProtocolInfo.configFields:type_name -> dm.ProtocolConfigField
	57,  // 44: dm.ProtocolInfo.configInfos:type_name -> dm.ProtocolConfigInfo
	56,  // 45: dm.ProtocolInfo.productFields:type_name -> dm.ProtocolConfigField
	56,  // 46: dm.ProtocolInfo.deviceFields:type_name -> dm.ProtocolConfigField
	232, // 47: dm.ProtocolConfigInfo.config:type_name -> dm.ProtocolConfigInfo.ConfigEntry
	59,  // 48: dm.ShadowIndexResp.list:type_name -> dm.ShadowIndex
	145, // 49: dm.PropertyGetReportMultiSendReq.devices:type_name -> dm.DeviceCore
	62,  // 50: dm.PropertyGetReportMultiSendResp.list:type_name -> dm.PropertyGetReportSendMsg
	2,   // 51: dm.PropertyLogIndexReq.page:type_name -> dm.PageInfo
	233, // 52: dm.PropertyLogIndexReq.BelongGroup:type_name -> dm.PropertyLogIndexReq.BelongGroupEntry
	146, // 53: dm.PropertyLogLatestIndex2Req.devices:type_name -> dm.DeviceData
	234, // 54: dm.PropertyLogInfo.BelongGroup:type_name -> dm.PropertyLogInfo.BelongGroupEntry
	68,  // 55: dm.PropertyLogIndexResp.list:type_name -> dm.PropertyLogInfo
	2,   // 56: dm.EventLogIndexReq.page:type_name -> dm.PageInfo
	71,  // 57: dm.EventLogIndexResp.list:type_name -> dm.EventLogInfo
	2,   // 58: dm.HubLogIndexReq.page:type_name -> dm.PageInfo
	75,  // 59: dm.HubLogIndexResp.list:type_name -> dm.HubLogInfo
	2,   // 60: dm.StatusLogIndexReq.page:type_name -> dm.PageInfo
	78,  // 61: dm.StatusLogIndexResp.list:type_name -> dm.StatusLogInfo
	235, // 62: dm.SendLogIndexReq.BelongGroup:type_name -> dm.SendLogIndexReq.BelongGroupEntry
	2,   // 63: dm.SendLogIndexReq.page:type_name -> dm.PageInfo
	81,  // 64: dm.SendLogIndexResp.list:type_name -> dm.SendLogInfo
	236, // 65: dm.AbnormalLogIndexReq.BelongGroup:type_name -> dm.AbnormalLogIndexReq.BelongGroupEntry
	2,   // 66: dm.AbnormalLogIndexReq.page:type_name -> dm.PageInfo
	84,  // 67: dm.AbnormalLogIndexResp.list:type_name -> dm.AbnormalLogInfo
	2,   // 68: dm.SdkLogIndexReq.page:type_name -> dm.PageInfo
	87,  // 69: dm.SdkLogIndexResp.list:type_name -> dm.SdkLogInfo
	6,   // 70: dm.ActionSendReq.option:type_name -> dm.SendOption
	92,  // 71: dm.PropertyControlSendReq.withProfile:type_name -> dm.WithProfile
	145, // 72: dm.GatewayNotifyBindSendReq.gateway:type_name -> dm.DeviceCore
	145, // 73: dm.GatewayNotifyBindSendReq.subDevices:type_name -> dm.DeviceCore
	145, // 74: dm.PropertyControlMultiSendReq.devices:type_name -> dm.DeviceCore
	102, // 75: dm.PropertyControlMultiSendResp.list:type_name -> dm.PropertyControlSendMsg
	2,   // 76: dm.RemoteConfigIndexReq.page:type_name -> dm.PageInfo
	104, // 77: dm.RemoteConfigIndexResp.list:type_name -> dm.ProductRemoteConfig
	104, // 78: dm.RemoteConfigLastReadResp.info:type_name -> dm.ProductRemoteConfig
	257, // 79: dm.ProductCustom.transformScript:type_name -> google.protobuf.StringValue
	257, // 80: dm.ProductCustom.loginAuthScript:type_name -> google.protobuf.StringValue
	113, // 81: dm.ProductCustom.customTopics:type_name -> dm.CustomTopic
	115, // 82: dm.DeviceGatewayBindDevice.sign:type_name -> dm.DeviceGatewaySign
	145, // 83: dm.DeviceGatewayMultiCreateReq.gateway:type_name -> dm.DeviceCore
	114, // 84: dm.DeviceGatewayMultiCreateReq.list:type_name -> dm.DeviceGatewayBindDevice
	2,   // 85: dm.DeviceGatewayIndexReq.page:type_name -> dm.PageInfo
	145, // 86: dm.DeviceGatewayIndexReq.gateway:type_name -> dm.DeviceCore
	145, // 87: dm.DeviceGatewayIndexReq.subDevice:type_name -> dm.DeviceCore
	145, // 88: dm.DeviceGatewayIndexResp.list:type_name -> dm.DeviceCore
	145, // 89: dm.DeviceGatewayMultiSaveReq.gateway:type_name -> dm.DeviceCore
	145, // 90: dm.DeviceGatewayMultiSaveReq.list:type_name -> dm.DeviceCore
	145, // 91: dm.GatewayCanBindIndexReq.gateway:type_name -> dm.DeviceCore
	145, // 92: dm.GatewayCanBindIndexResp.subDevices:type_name -> dm.DeviceCore
	123, // 93: dm.GroupInfoMultiCreateReq.groups:type_name -> dm.GroupInfo
	237, // 94: dm.GroupInfo.tags:type_name -> dm.GroupInfo.TagsEntry
	145, // 95: dm.GroupInfo.devices:type_name -> dm.DeviceCore
	238, // 96: dm.GroupInfo.files:type_name -> dm.GroupInfo.FilesEntry
	123, // 97: dm.GroupInfo.children:type_name -> dm.GroupInfo
	2,   // 98: dm.GroupInfoIndexReq.page:type_name -> dm.PageInfo
	239, // 99: dm.GroupInfoIndexReq.tags:type_name -> dm.GroupInfoIndexReq.TagsEntry
	145, // 100: dm.GroupInfoIndexReq.hasDevice:type_name -> dm.DeviceCore
	123, // 101: dm.GroupInfoIndexResp.list:type_name -> dm.GroupInfo
	240, // 102: dm.GroupInfoUpdateReq.tags:type_name -> dm.GroupInfoUpdateReq.TagsEntry
	145, // 103: dm.GroupDeviceMultiSaveReq.list:type_name -> dm.DeviceCore
	145, // 104: dm.GroupDeviceMultiDeleteReq.list:type_name -> dm.DeviceCore
	257, // 105: dm.DeviceInfo.version:type_name -> google.protobuf.StringValue
	132, // 106: dm.DeviceInfo.Position:type_name -> dm.Point
	257, // 107: dm.DeviceInfo.address:type_name -> google.protobuf.StringValue
	257, // 108: dm.DeviceInfo.adcode:type_name -> google.protobuf.StringValue
	241, // 109: dm.DeviceInfo.tags:type_name -> dm.DeviceInfo.TagsEntry
	257, // 110: dm.DeviceInfo.deviceAlias:type_name -> google.protobuf.StringValue
	257, // 111: dm.DeviceInfo.phone:type_name -> google.protobuf.StringValue
	257, // 112: dm.DeviceInfo.iccid:type_name -> google.protobuf.StringValue
	242, // 113: dm.DeviceInfo.schemaAlias:type_name -> dm.DeviceInfo.SchemaAliasEntry
	256, // 114: dm.DeviceInfo.rssi:type_name -> google.protobuf.Int64Value
	243, // 115: dm.DeviceInfo.protocolConf:type_name -> dm.DeviceInfo.ProtocolConfEntry
	244, // 116: dm.DeviceInfo.subProtocolConf:type_name -> dm.DeviceInfo.SubProtocolConfEntry
	12,  // 117: dm.DeviceInfo.distributor:type_name -> dm.IDPathWithUpdate
	256, // 118: dm.DeviceInfo.expTime:type_name -> google.protobuf.Int64Value
	257, // 119: dm.DeviceInfo.desc:type_name -> google.protobuf.StringValue
	12,  // 120: dm.DeviceInfo.dept:type_name -> dm.IDPathWithUpdate
	133, // 121: dm.DeviceInfo.Gateway:type_name -> dm.DeviceInfo
	245, // 122: dm.DeviceInfo.BelongGroup:type_name -> dm.DeviceInfo.BelongGroupEntry
	135, // 123: dm.ProductConfig.DevInit:type_name -> dm.DevInit
	257, // 124: dm.ProductInfo.subProtocolCode:type_name -> google.protobuf.StringValue
	257, // 125: dm.ProductInfo.desc:type_name -> google.protobuf.StringValue
	246, // 126: dm.ProductInfo.tags:type_name -> dm.ProductInfo.TagsEntry
	55,  // 127: dm.ProductInfo.protocol:type_name -> dm.ProtocolInfo
	55,  // 128: dm.ProductInfo.subProtocol:type_name -> dm.ProtocolInfo
	36,  // 129: dm.ProductInfo.category:type_name -> dm.ProductCategory
	247, // 130: dm.ProductInfo.protocolConf:type_name -> dm.ProductInfo.ProtocolConfEntry
	248, // 131: dm.ProductInfo.subProtocolConf:type_name -> dm.ProductInfo.SubProtocolConfEntry
	256, // 132: dm.ProductInfo.trialTime:type_name -> google.protobuf.Int64Value
	249, // 133: dm.ProductInfo.customUi:type_name -> dm.ProductInfo.CustomUiEntry
	134, // 134: dm.ProductInfo.config:type_name -> dm.ProductConfig
	2,   // 135: dm.ProductInfoIndexReq.page:type_name -> dm.PageInfo
	250, // 136: dm.ProductInfoIndexReq.tags:type_name -> dm.ProductInfoIndexReq.TagsEntry
	251, // 137: dm.ProductInfoIndexReq.protocolConf:type_name -> dm.ProductInfoIndexReq.ProtocolConfEntry
	136, // 138: dm.ProductInfoIndexResp.list:type_name -> dm.ProductInfo
	143, // 139: dm.deviceOnlineMultiFixReq.devices:type_name -> dm.deviceOnlineMultiFix
	145, // 140: dm.deviceOnlineMultiFix.device:type_name -> dm.DeviceCore
	145, // 141: dm.DeviceInfoMultiUpdateReq.devices:type_name -> dm.DeviceCore
	4,   // 142: dm.DeviceInfoMultiUpdateReq.FilterDistributorID:type_name -> dm.CompareInt64
	10,  // 143: dm.DeviceInfoMultiUpdateReq.distributor:type_name -> dm.IDPath
	2,   // 144: dm.DeviceInfoIndexReq.page:type_name -> dm.PageInfo
	252, // 145: dm.DeviceInfoIndexReq.tags:type_name -> dm.DeviceInfoIndexReq.TagsEntry
	253, // 146: dm.DeviceInfoIndexReq.tagsLike:type_name -> dm.DeviceInfoIndexReq.TagsLikeEntry
	132, // 147: dm.DeviceInfoIndexReq.Position:type_name -> dm.Point
	145, // 148: dm.DeviceInfoIndexReq.devices:type_name -> dm.DeviceCore
	145, // 149: dm.DeviceInfoIndexReq.gateway:type_name -> dm.DeviceCore
	10,  // 150: dm.DeviceInfoIndexReq.distributor:type_name -> dm.IDPath
	4,   // 151: dm.DeviceInfoIndexReq.ratedPower:type_name -> dm.CompareInt64
	4,   // 152: dm.DeviceInfoIndexReq.expTime:type_name -> dm.CompareInt64
	4,   // 153: dm.DeviceInfoIndexReq.rssi:type_name -> dm.CompareInt64
	10,  // 154: dm.DeviceInfoIndexReq.dept:type_name -> dm.IDPath
	254, // 155: dm.DeviceInfoIndexReq.Property:type_name -> dm.DeviceInfoIndexReq.PropertyEntry
	133, // 156: dm.DeviceInfoIndexResp.list:type_name -> dm.DeviceInfo
	157, // 157: dm.CommonSchemaUpdateReq.info:type_name -> dm.CommonSchemaInfo
	157, // 158: dm.CommonSchemaCreateReq.info:type_name -> dm.CommonSchemaInfo
	2,   // 159: dm.CommonSchemaIndexReq.page:type_name -> dm.PageInfo
	157, // 160: dm.CommonSchemaIndexResp.list:type_name -> dm.CommonSchemaInfo
	257, // 161: dm.CommonSchemaInfo.name:type_name -> google.protobuf.StringValue
	257, // 162: dm.CommonSchemaInfo.desc:type_name -> google.protobuf.StringValue
	257, // 163: dm.CommonSchemaInfo.affordance:type_name -> google.protobuf.StringValue
	36,  // 164: dm.CommonSchemaInfo.productCategories:type_name -> dm.ProductCategory
	164, // 165: dm.ProductSchemaUpdateReq.info:type_name -> dm.ProductSchemaInfo
	164, // 166: dm.ProductSchemaMultiCreateReq.list:type_name -> dm.ProductSchemaInfo
	164, // 167: dm.ProductSchemaCreateReq.info:type_name -> dm.ProductSchemaInfo
	2,   // 168: dm.ProductSchemaIndexReq.page:type_name -> dm.PageInfo
	164, // 169: dm.ProductSchemaIndexResp.list:type_name -> dm.ProductSchemaInfo
	257, // 170: dm.ProductSchemaInfo.name:type_name -> google.protobuf.StringValue
	257, // 171: dm.ProductSchemaInfo.desc:type_name -> google.protobuf.StringValue
	257, // 172: dm.ProductSchemaInfo.affordance:type_name -> google.protobuf.StringValue
	172, // 173: dm.DeviceSchemaMultiCreateReq.list:type_name -> dm.DeviceSchema
	2,   // 174: dm.DeviceSchemaIndexReq.page:type_name -> dm.PageInfo
	172, // 175: dm.DeviceSchemaIndexResp.list:type_name -> dm.DeviceSchema
	257, // 176: dm.DeviceSchema.name:type_name -> google.protobuf.StringValue
	257, // 177: dm.DeviceSchema.desc:type_name -> google.protobuf.StringValue
	257, // 178: dm.DeviceSchema.affordance:type_name -> google.protobuf.StringValue
	145, // 179: dm.DeviceProfile.device:type_name -> dm.DeviceCore
	145, // 180: dm.DeviceProfileReadReq.device:type_name -> dm.DeviceCore
	145, // 181: dm.DeviceInfoCanBindReq.device:type_name -> dm.DeviceCore
	145, // 182: dm.DeviceInfoMultiBindReq.devices:type_name -> dm.DeviceCore
	147, // 183: dm.DeviceInfoMultiBindResp.errs:type_name -> dm.DeviceError
	145, // 184: dm.DeviceInfoBindReq.device:type_name -> dm.DeviceCore
	145, // 185: dm.DeviceProfileIndexReq.device:type_name -> dm.DeviceCore
	176, // 186: dm.DeviceProfileIndexResp.profiles:type_name -> dm.DeviceProfile
	189, // 187: dm.DeviceCountResp.list:type_name -> dm.DeviceCountInfo
	255, // 188: dm.DeviceCountInfo.count:type_name -> dm.DeviceCountInfo.CountEntry
	1,   // 189: dm.DeviceInfoCountReq.timeRange:type_name -> dm.TimeRange
	1,   // 190: dm.DeviceTypeCountReq.timeRange:type_name -> dm.TimeRange
	257, // 191: dm.Firmware.desc:type_name -> google.protobuf.StringValue
	257, // 192: dm.Firmware.extData:type_name -> google.protobuf.StringValue
	197, // 193: dm.Firmware.files:type_name -> dm.OtaFirmwareFile
	257, // 194: dm.FirmwareInfo.desc:type_name -> google.protobuf.StringValue
	257, // 195: dm.FirmwareInfo.extData:type_name -> google.protobuf.StringValue
	197, // 196: dm.FirmwareInfo.files:type_name -> dm.OtaFirmwareFile
	2,   // 197: dm.FirmwareInfoIndexReq.page:type_name -> dm.PageInfo
	196, // 198: dm.FirmwareInfoIndexResp.list:type_name -> dm.FirmwareInfo
	2,   // 199: dm.OtaFirmwareFileIndexReq.page:type_name -> dm.PageInfo
	256, // 200: dm.OtaFirmwareFileIndexReq.size:type_name -> google.protobuf.Int64Value
	204, // 201: dm.OtaFirmwareFileIndexResp.list:type_name -> dm.OtaFirmwareFileInfo
	257, // 202: dm.FirmwareInfoReadResp.desc:type_name -> google.protobuf.StringValue
	257, // 203: dm.FirmwareInfoReadResp.extData:type_name -> google.protobuf.StringValue
	205, // 204: dm.FirmwareInfoReadResp.files:type_name -> dm.OtaFirmwareFileResp
	257, // 205: dm.OtaFirmwareInfoCreateReq.extra:type_name -> google.protobuf.StringValue
	257, // 206: dm.OtaFirmwareInfoUpdateReq.extra:type_name -> google.protobuf.StringValue
	2,   // 207: dm.OtaFirmwareInfoIndexReq.page:type_name -> dm.PageInfo
	214, // 208: dm.OtaFirmwareInfoIndexResp.list:type_name -> dm.OtaFirmwareInfo
	209, // 209: dm.OtaFirmwareInfo.fileList:type_name -> dm.FirmwareFile
	216, // 210: dm.OtaFirmwareJobInfo.dynamic:type_name -> dm.OtaJobDynamicInfo
	217, // 211: dm.OtaFirmwareJobInfo.static:type_name -> dm.OtaJobStaticInfo
	2,   // 212: dm.OtaFirmwareJobIndexReq.page:type_name -> dm.PageInfo
	215, // 213: dm.OtaFirmwareJobIndexResp.list:type_name -> dm.OtaFirmwareJobInfo
	2,   // 214: dm.OtaJobByDeviceIndexReq.pageInfo:type_name -> dm.PageInfo
	2,   // 215: dm.OtaFirmwareDeviceIndexReq.page:type_name -> dm.PageInfo
	222, // 216: dm.OtaFirmwareDeviceIndexResp.list:type_name -> dm.OtaFirmwareDeviceInfo
	30,  // 217: dm.UserDeviceShareInfo.SchemaPermEntry.value:type_name -> dm.SharePerm
	30,  // 218: dm.UserDeviceShareInfo.AccessPermEntry.value:type_name -> dm.SharePerm
	30,  // 219: dm.UserDeviceShareMultiInfo.SchemaPermEntry.value:type_name -> dm.SharePerm
	30,  // 220: dm.UserDeviceShareMultiInfo.AccessPermEntry.value:type_name -> dm.SharePerm
	11,  // 221: dm.PropertyLogIndexReq.BelongGroupEntry.value:type_name -> dm.IDsInfo
	11,  // 222: dm.PropertyLogInfo.BelongGroupEntry.value:type_name -> dm.IDsInfo
	11,  // 223: dm.SendLogIndexReq.BelongGroupEntry.value:type_name -> dm.IDsInfo
	11,  // 224: dm.AbnormalLogIndexReq.BelongGroupEntry.value:type_name -> dm.IDsInfo
	11,  // 225: dm.DeviceInfo.BelongGroupEntry.value:type_name -> dm.IDsInfo
	137, // 226: dm.ProductInfo.CustomUiEntry.value:type_name -> dm.ProductCustomUi
	3,   // 227: dm.DeviceInfoIndexReq.PropertyEntry.value:type_name -> dm.CompareString
	152, // 228: dm.DeviceManage.rootCheck:input_type -> dm.RootCheckReq
	133, // 229: dm.DeviceManage.deviceInfoCreate:input_type -> dm.DeviceInfo
	133, // 230: dm.DeviceManage.deviceInfoUpdate:input_type -> dm.DeviceInfo
	142, // 231: dm.DeviceManage.deviceOnlineMultiFix:input_type -> dm.deviceOnlineMultiFixReq
	144, // 232: dm.DeviceManage.deviceInfoDelete:input_type -> dm.DeviceInfoDeleteReq
	150, // 233: dm.DeviceManage.deviceInfoIndex:input_type -> dm.DeviceInfoIndexReq
	149, // 234: dm.DeviceManage.DeviceInfoMultiUpdate:input_type -> dm.DeviceInfoMultiUpdateReq
	148, // 235: dm.DeviceManage.deviceInfoRead:input_type -> dm.DeviceInfoReadReq
	184, // 236: dm.DeviceManage.deviceInfoBind:input_type -> dm.DeviceInfoBindReq
	182, // 237: dm.DeviceManage.deviceBindTokenRead:input_type -> dm.DeviceBindTokenReadReq
	0,   // 238: dm.DeviceManage.deviceBindTokenCreate:input_type -> dm.Empty
	179, // 239: dm.DeviceManage.deviceInfoMultiBind:input_type -> dm.DeviceInfoMultiBindReq
	178, // 240: dm.DeviceManage.deviceInfoCanBind:input_type -> dm.DeviceInfoCanBindReq
	181, // 241: dm.DeviceManage.deviceInfoUnbind:input_type -> dm.DeviceInfoUnbindReq
	24,  // 242: dm.DeviceManage.deviceTransfer:input_type -> dm.DeviceTransferReq
	23,  // 243: dm.DeviceManage.deviceReset:input_type -> dm.DeviceResetReq
	22,  // 244: dm.DeviceManage.deviceMove:input_type -> dm.DeviceMoveReq
	18,  // 245: dm.DeviceManage.deviceModuleVersionRead:input_type -> dm.DeviceModuleVersionReadReq
	20,  // 246: dm.DeviceManage.deviceModuleVersionIndex:input_type -> dm.DeviceModuleVersionIndexReq
	116, // 247: dm.DeviceManage.deviceGatewayMultiCreate:input_type -> dm.DeviceGatewayMultiCreateReq
	119, // 248: dm.DeviceManage.deviceGatewayMultiUpdate:input_type -> dm.DeviceGatewayMultiSaveReq
	117, // 249: dm.DeviceManage.deviceGatewayIndex:input_type -> dm.DeviceGatewayIndexReq
	119, // 250: dm.DeviceManage.deviceGatewayMultiDelete:input_type -> dm.DeviceGatewayMultiSaveReq
	190, // 251: dm.DeviceManage.deviceInfoCount:input_type -> dm.DeviceInfoCountReq
	191, // 252: dm.DeviceManage.deviceTypeCount:input_type -> dm.DeviceTypeCountReq
	187, // 253: dm.DeviceManage.deviceCount:input_type -> dm.DeviceCountReq
	177, // 254: dm.DeviceManage.deviceProfileRead:input_type -> dm.DeviceProfileReadReq
	177, // 255: dm.DeviceManage.deviceProfileDelete:input_type -> dm.DeviceProfileReadReq
	176, // 256: dm.DeviceManage.deviceProfileUpdate:input_type -> dm.DeviceProfile
	185, // 257: dm.DeviceManage.deviceProfileIndex:input_type -> dm.DeviceProfileIndexReq
	172, // 258: dm.DeviceManage.deviceSchemaUpdate:input_type -> dm.DeviceSchema
	172, // 259: dm.DeviceManage.deviceSchemaCreate:input_type -> dm.DeviceSchema
	168, // 260: dm.DeviceManage.deviceSchemaMultiCreate:input_type -> dm.DeviceSchemaMultiCreateReq
	169, // 261: dm.DeviceManage.deviceSchemaMultiDelete:input_type -> dm.DeviceSchemaMultiDeleteReq
	170, // 262: dm.DeviceManage.deviceSchemaIndex:input_type -> dm.DeviceSchemaIndexReq
	173, // 263: dm.DeviceManage.deviceSchemaTslRead:input_type -> dm.DeviceSchemaTslReadReq
	175, // 264: dm.DeviceManage.deviceGroupMultiCreate:input_type -> dm.DeviceGroupMultiSaveReq
	175, // 265: dm.DeviceManage.deviceGroupMultiUpdate:input_type -> dm.DeviceGroupMultiSaveReq
	175, // 266: dm.DeviceManage.deviceGroupMultiDelete:input_type -> dm.DeviceGroupMultiSaveReq
	17,  // 267: dm.ProductManage.productInit:input_type -> dm.ProductInitReq
	136, // 268: dm.ProductManage.productInfoCreate:input_type -> dm.ProductInfo
	136, // 269: dm.ProductManage.productInfoUpdate:input_type -> dm.ProductInfo
	138, // 270: dm.ProductManage.productInfoDelete:input_type -> dm.ProductInfoDeleteReq
	140, // 271: dm.ProductManage.productInfoIndex:input_type -> dm.ProductInfoIndexReq
	139, // 272: dm.ProductManage.productInfoRead:input_type -> dm.ProductInfoReadReq
	134, // 273: dm.ProductManage.productConfigUpdate:input_type -> dm.ProductConfig
	158, // 274: dm.ProductManage.productSchemaUpdate:input_type -> dm.ProductSchemaUpdateReq
	160, // 275: dm.ProductManage.productSchemaCreate:input_type -> dm.ProductSchemaCreateReq
	159, // 276: dm.ProductManage.productSchemaMultiCreate:input_type -> dm.ProductSchemaMultiCreateReq
	161, // 277: dm.ProductManage.productSchemaDelete:input_type -> dm.ProductSchemaDeleteReq
	162, // 278: dm.ProductManage.productSchemaIndex:input_type -> dm.ProductSchemaIndexReq
	165, // 279: dm.ProductManage.productSchemaTslImport:input_type -> dm.ProductSchemaTslImportReq
	166, // 280: dm.ProductManage.productSchemaTslRead:input_type -> dm.ProductSchemaTslReadReq
	111, // 281: dm.ProductManage.productCustomRead:input_type -> dm.ProductCustomReadReq
	112, // 282: dm.ProductManage.productCustomUpdate:input_type -> dm.ProductCustom
	36,  // 283: dm.ProductManage.productCategoryCreate:input_type -> dm.ProductCategory
	36,  // 284: dm.ProductManage.productCategoryUpdate:input_type -> dm.ProductCategory
	8,   // 285: dm.ProductManage.productCategoryDelete:input_type -> dm.WithID
	40,  // 286: dm.ProductManage.productCategoryIndex:input_type -> dm.ProductCategoryIndexReq
	9,   // 287: dm.ProductManage.productCategoryRead:input_type -> dm.WithIDChildren
	38,  // 288: dm.ProductManage.productCategorySchemaIndex:input_type -> dm.ProductCategorySchemaIndexReq
	39,  // 289: dm.ProductManage.productCategorySchemaMultiUpdate:input_type -> dm.ProductCategorySchemaMultiSaveReq
	39,  // 290: dm.ProductManage.productCategorySchemaMultiCreate:input_type -> dm.ProductCategorySchemaMultiSaveReq
	39,  // 291: dm.ProductManage.productCategorySchemaMultiDelete:input_type -> dm.ProductCategorySchemaMultiSaveReq
	0,   // 292: dm.SchemaManage.commonSchemaInit:input_type -> dm.Empty
	153, // 293: dm.SchemaManage.commonSchemaUpdate:input_type -> dm.CommonSchemaUpdateReq
	154, // 294: dm.SchemaManage.commonSchemaCreate:input_type -> dm.CommonSchemaCreateReq
	8,   // 295: dm.SchemaManage.commonSchemaDelete:input_type -> dm.WithID
	155, // 296: dm.SchemaManage.commonSchemaIndex:input_type -> dm.CommonSchemaIndexReq
	50,  // 297: dm.ProtocolManage.protocolInfoIndex:input_type -> dm.ProtocolInfoIndexReq
	7,   // 298: dm.ProtocolManage.protocolInfoRead:input_type -> dm.WithIDCode
	55,  // 299: dm.ProtocolManage.protocolInfoCreate:input_type -> dm.ProtocolInfo
	55,  // 300: dm.ProtocolManage.protocolInfoUpdate:input_type -> dm.ProtocolInfo
	8,   // 301: dm.ProtocolManage.protocolInfoDelete:input_type -> dm.WithID
	54,  // 302: dm.ProtocolManage.protocolServiceUpdate:input_type -> dm.ProtocolService
	8,   // 303: dm.ProtocolManage.protocolServiceDelete:input_type -> dm.WithID
	52,  // 304: dm.ProtocolManage.protocolServiceIndex:input_type -> dm.ProtocolServiceIndexReq
	45,  // 305: dm.ProtocolManage.ProtocolScriptIndex:input_type -> dm.ProtocolScriptIndexReq
	8,   // 306: dm.ProtocolManage.ProtocolScriptRead:input_type -> dm.WithID
	44,  // 307: dm.ProtocolManage.ProtocolScriptCreate:input_type -> dm.ProtocolScript
	44,  // 308: dm.ProtocolManage.ProtocolScriptUpdate:input_type -> dm.ProtocolScript
	8,   // 309: dm.ProtocolManage.ProtocolScriptDelete:input_type -> dm.WithID
	42,  // 310: dm.ProtocolManage.ProtocolScriptDebug:input_type -> dm.ProtocolScriptDebugReq
	48,  // 311: dm.ProtocolManage.ProtocolScriptDeviceIndex:input_type -> dm.ProtocolScriptDeviceIndexReq
	8,   // 312: dm.ProtocolManage.ProtocolScriptDeviceRead:input_type -> dm.WithID
	47,  // 313: dm.ProtocolManage.ProtocolScriptDeviceCreate:input_type -> dm.ProtocolScriptDevice
	47,  // 314: dm.ProtocolManage.ProtocolScriptDeviceUpdate:input_type -> dm.ProtocolScriptDevice
	8,   // 315: dm.ProtocolManage.ProtocolScriptDeviceDelete:input_type -> dm.WithID
	123, // 316: dm.DeviceGroup.groupInfoCreate:input_type -> dm.GroupInfo
	122, // 317: dm.DeviceGroup.groupInfoMultiCreate:input_type -> dm.GroupInfoMultiCreateReq
	127, // 318: dm.DeviceGroup.groupInfoIndex:input_type -> dm.GroupInfoIndexReq
	126, // 319: dm.DeviceGroup.groupInfoRead:input_type -> dm.GroupInfoReadReq
	123, // 320: dm.DeviceGroup.groupInfoUpdate:input_type -> dm.GroupInfo
	8,   // 321: dm.DeviceGroup.groupInfoDelete:input_type -> dm.WithID
	130, // 322: dm.DeviceGroup.groupDeviceMultiCreate:input_type -> dm.GroupDeviceMultiSaveReq
	130, // 323: dm.DeviceGroup.groupDeviceMultiUpdate:input_type -> dm.GroupDeviceMultiSaveReq
	131, // 324: dm.DeviceGroup.groupDeviceMultiDelete:input_type -> dm.GroupDeviceMultiDeleteReq
	105, // 325: dm.RemoteConfig.RemoteConfigCreate:input_type -> dm.RemoteConfigCreateReq
	106, // 326: dm.RemoteConfig.RemoteConfigIndex:input_type -> dm.RemoteConfigIndexReq
	108, // 327: dm.RemoteConfig.RemoteConfigPushAll:input_type -> dm.RemoteConfigPushAllReq
	109, // 328: dm.RemoteConfig.RemoteConfigLastRead:input_type -> dm.RemoteConfigLastReadReq
	85,  // 329: dm.DeviceMsg.sdkLogIndex:input_type -> dm.SdkLogIndexReq
	73,  // 330: dm.DeviceMsg.hubLogIndex:input_type -> dm.HubLogIndexReq
	79,  // 331: dm.DeviceMsg.sendLogIndex:input_type -> dm.SendLogIndexReq
	76,  // 332: dm.DeviceMsg.statusLogIndex:input_type -> dm.StatusLogIndexReq
	82,  // 333: dm.DeviceMsg.abnormalLogIndex:input_type -> dm.AbnormalLogIndexReq
	84,  // 334: dm.DeviceMsg.abnormalLogCreate:input_type -> dm.AbnormalLogInfo
	66,  // 335: dm.DeviceMsg.propertyLogLatestIndex:input_type -> dm.PropertyLogLatestIndexReq
	67,  // 336: dm.DeviceMsg.propertyLogLatestIndex2:input_type -> dm.PropertyLogLatestIndex2Req
	65,  // 337: dm.DeviceMsg.propertyLogIndex:input_type -> dm.PropertyLogIndexReq
	70,  // 338: dm.DeviceMsg.eventLogIndex:input_type -> dm.EventLogIndexReq
	66,  // 339: dm.DeviceMsg.shadowIndex:input_type -> dm.PropertyLogLatestIndexReq
	120, // 340: dm.DeviceMsg.gatewayCanBindIndex:input_type -> dm.GatewayCanBindIndexReq
	88,  // 341: dm.DeviceInteract.actionSend:input_type -> dm.ActionSendReq
	90,  // 342: dm.DeviceInteract.actionRead:input_type -> dm.RespReadReq
	93,  // 343: dm.DeviceInteract.actionResp:input_type -> dm.ActionRespReq
	60,  // 344: dm.DeviceInteract.propertyGetReportSend:input_type -> dm.PropertyGetReportSendReq
	63,  // 345: dm.DeviceInteract.propertyGetReportMultiSend:input_type -> dm.PropertyGetReportMultiSendReq
	91,  // 346: dm.DeviceInteract.propertyControlSend:input_type -> dm.PropertyControlSendReq
	101, // 347: dm.DeviceInteract.propertyControlMultiSend:input_type -> dm.PropertyControlMultiSendReq
	90,  // 348: dm.DeviceInteract.propertyControlRead:input_type -> dm.RespReadReq
	99,  // 349: dm.DeviceInteract.sendMsg:input_type -> dm.SendMsgReq
	95,  // 350: dm.DeviceInteract.gatewayGetFoundSend:input_type -> dm.GatewayGetFoundReq
	98,  // 351: dm.DeviceInteract.gatewayNotifyBindSend:input_type -> dm.GatewayNotifyBindSendReq
	96,  // 352: dm.DeviceInteract.edgeSend:input_type -> dm.EdgeSendReq
	210, // 353: dm.OtaManage.otaFirmwareInfoCreate:input_type -> dm.OtaFirmwareInfoCreateReq
	211, // 354: dm.OtaManage.otaFirmwareInfoUpdate:input_type -> dm.OtaFirmwareInfoUpdateReq
	8,   // 355: dm.OtaManage.otaFirmwareInfoDelete:input_type -> dm.WithID
	212, // 356: dm.OtaManage.otaFirmwareInfoIndex:input_type -> dm.OtaFirmwareInfoIndexReq
	8,   // 357: dm.OtaManage.otaFirmwareInfoRead:input_type -> dm.WithID
	215, // 358: dm.OtaManage.otaFirmwareJobCreate:input_type -> dm.OtaFirmwareJobInfo
	218, // 359: dm.OtaManage.otaFirmwareJobIndex:input_type -> dm.OtaFirmwareJobIndexReq
	8,   // 360: dm.OtaManage.otaFirmwareJobRead:input_type -> dm.WithID
	215, // 361: dm.OtaManage.otaFirmwareJobUpdate:input_type -> dm.OtaFirmwareJobInfo
	221, // 362: dm.OtaManage.otaFirmwareDeviceIndex:input_type -> dm.OtaFirmwareDeviceIndexReq
	224, // 363: dm.OtaManage.otaFirmwareDeviceCancel:input_type -> dm.OtaFirmwareDeviceCancelReq
	225, // 364: dm.OtaManage.otaFirmwareDeviceRetry:input_type -> dm.OtaFirmwareDeviceRetryReq
	226, // 365: dm.OtaManage.otaFirmwareDeviceConfirm:input_type -> dm.OtaFirmwareDeviceConfirmReq
	16,  // 366: dm.OtaManage.otaModuleInfoCreate:input_type -> dm.OtaModuleInfo
	16,  // 367: dm.OtaManage.otaModuleInfoUpdate:input_type -> dm.OtaModuleInfo
	8,   // 368: dm.OtaManage.otaModuleInfoDelete:input_type -> dm.WithID
	14,  // 369: dm.OtaManage.otaModuleInfoIndex:input_type -> dm.OtaModuleInfoIndexReq
	7,   // 370: dm.OtaManage.otaModuleInfoRead:input_type -> dm.WithIDCode
	35,  // 371: dm.userDevice.userDeviceCollectMultiCreate:input_type -> dm.UserDeviceCollectSave
	35,  // 372: dm.userDevice.userDeviceCollectMultiDelete:input_type -> dm.UserDeviceCollectSave
	0,   // 373: dm.userDevice.userDeviceCollectIndex:input_type -> dm.Empty
	29,  // 374: dm.userDevice.userDeviceShareCreate:input_type -> dm.UserDeviceShareInfo
	29,  // 375: dm.userDevice.userDeviceShareUpdate:input_type -> dm.UserDeviceShareInfo
	25,  // 376: dm.userDevice.userDeviceShareDelete:input_type -> dm.UserDeviceShareReadReq
	28,  // 377: dm.userDevice.userDeviceShareMultiDelete:input_type -> dm.UserDeviceShareMultiDeleteReq
	26,  // 378: dm.userDevice.userDeviceShareIndex:input_type -> dm.UserDeviceShareIndexReq
	25,  // 379: dm.userDevice.userDeviceShareRead:input_type -> dm.UserDeviceShareReadReq
	24,  // 380: dm.userDevice.userDeviceTransfer:input_type -> dm.DeviceTransferReq
	32,  // 381: dm.userDevice.userDeviceShareMultiCreate:input_type -> dm.UserDeviceShareMultiInfo
	33,  // 382: dm.userDevice.userDeivceShareMultiIndex:input_type -> dm.UserDeviceShareMultiToken
	34,  // 383: dm.userDevice.userDeivceShareMultiAccept:input_type -> dm.UserDeviceShareMultiAcceptReq
	0,   // 384: dm.DeviceManage.rootCheck:output_type -> dm.Empty
	0,   // 385: dm.DeviceManage.deviceInfoCreate:output_type -> dm.Empty
	0,   // 386: dm.DeviceManage.deviceInfoUpdate:output_type -> dm.Empty
	0,   // 387: dm.DeviceManage.deviceOnlineMultiFix:output_type -> dm.Empty
	0,   // 388: dm.DeviceManage.deviceInfoDelete:output_type -> dm.Empty
	151, // 389: dm.DeviceManage.deviceInfoIndex:output_type -> dm.DeviceInfoIndexResp
	0,   // 390: dm.DeviceManage.DeviceInfoMultiUpdate:output_type -> dm.Empty
	133, // 391: dm.DeviceManage.deviceInfoRead:output_type -> dm.DeviceInfo
	0,   // 392: dm.DeviceManage.deviceInfoBind:output_type -> dm.Empty
	183, // 393: dm.DeviceManage.deviceBindTokenRead:output_type -> dm.DeviceBindTokenInfo
	183, // 394: dm.DeviceManage.deviceBindTokenCreate:output_type -> dm.DeviceBindTokenInfo
	180, // 395: dm.DeviceManage.deviceInfoMultiBind:output_type -> dm.DeviceInfoMultiBindResp
	0,   // 396: dm.DeviceManage.deviceInfoCanBind:output_type -> dm.Empty
	0,   // 397: dm.DeviceManage.deviceInfoUnbind:output_type -> dm.Empty
	0,   // 398: dm.DeviceManage.deviceTransfer:output_type -> dm.Empty
	0,   // 399: dm.DeviceManage.deviceReset:output_type -> dm.Empty
	0,   // 400: dm.DeviceManage.deviceMove:output_type -> dm.Empty
	19,  // 401: dm.DeviceManage.deviceModuleVersionRead:output_type -> dm.DeviceModuleVersion
	21,  // 402: dm.DeviceManage.deviceModuleVersionIndex:output_type -> dm.DeviceModuleVersionIndexResp
	0,   // 403: dm.DeviceManage.deviceGatewayMultiCreate:output_type -> dm.Empty
	0,   // 404: dm.DeviceManage.deviceGatewayMultiUpdate:output_type -> dm.Empty
	118, // 405: dm.DeviceManage.deviceGatewayIndex:output_type -> dm.DeviceGatewayIndexResp
	0,   // 406: dm.DeviceManage.deviceGatewayMultiDelete:output_type -> dm.Empty
	192, // 407: dm.DeviceManage.deviceInfoCount:output_type -> dm.DeviceInfoCount
	193, // 408: dm.DeviceManage.deviceTypeCount:output_type -> dm.DeviceTypeCountResp
	188, // 409: dm.DeviceManage.deviceCount:output_type -> dm.DeviceCountResp
	176, // 410: dm.DeviceManage.deviceProfileRead:output_type -> dm.DeviceProfile
	0,   // 411: dm.DeviceManage.deviceProfileDelete:output_type -> dm.Empty
	0,   // 412: dm.DeviceManage.deviceProfileUpdate:output_type -> dm.Empty
	186, // 413: dm.DeviceManage.deviceProfileIndex:output_type -> dm.DeviceProfileIndexResp
	0,   // 414: dm.DeviceManage.deviceSchemaUpdate:output_type -> dm.Empty
	0,   // 415: dm.DeviceManage.deviceSchemaCreate:output_type -> dm.Empty
	0,   // 416: dm.DeviceManage.deviceSchemaMultiCreate:output_type -> dm.Empty
	0,   // 417: dm.DeviceManage.deviceSchemaMultiDelete:output_type -> dm.Empty
	171, // 418: dm.DeviceManage.deviceSchemaIndex:output_type -> dm.DeviceSchemaIndexResp
	174, // 419: dm.DeviceManage.deviceSchemaTslRead:output_type -> dm.DeviceSchemaTslReadResp
	0,   // 420: dm.DeviceManage.deviceGroupMultiCreate:output_type -> dm.Empty
	0,   // 421: dm.DeviceManage.deviceGroupMultiUpdate:output_type -> dm.Empty
	0,   // 422: dm.DeviceManage.deviceGroupMultiDelete:output_type -> dm.Empty
	0,   // 423: dm.ProductManage.productInit:output_type -> dm.Empty
	0,   // 424: dm.ProductManage.productInfoCreate:output_type -> dm.Empty
	0,   // 425: dm.ProductManage.productInfoUpdate:output_type -> dm.Empty
	0,   // 426: dm.ProductManage.productInfoDelete:output_type -> dm.Empty
	141, // 427: dm.ProductManage.productInfoIndex:output_type -> dm.ProductInfoIndexResp
	136, // 428: dm.ProductManage.productInfoRead:output_type -> dm.ProductInfo
	0,   // 429: dm.ProductManage.productConfigUpdate:output_type -> dm.Empty
	0,   // 430: dm.ProductManage.productSchemaUpdate:output_type -> dm.Empty
	0,   // 431: dm.ProductManage.productSchemaCreate:output_type -> dm.Empty
	0,   // 432: dm.ProductManage.productSchemaMultiCreate:output_type -> dm.Empty
	0,   // 433: dm.ProductManage.productSchemaDelete:output_type -> dm.Empty
	163, // 434: dm.ProductManage.productSchemaIndex:output_type -> dm.ProductSchemaIndexResp
	0,   // 435: dm.ProductManage.productSchemaTslImport:output_type -> dm.Empty
	167, // 436: dm.ProductManage.productSchemaTslRead:output_type -> dm.ProductSchemaTslReadResp
	112, // 437: dm.ProductManage.productCustomRead:output_type -> dm.ProductCustom
	0,   // 438: dm.ProductManage.productCustomUpdate:output_type -> dm.Empty
	8,   // 439: dm.ProductManage.productCategoryCreate:output_type -> dm.WithID
	0,   // 440: dm.ProductManage.productCategoryUpdate:output_type -> dm.Empty
	0,   // 441: dm.ProductManage.productCategoryDelete:output_type -> dm.Empty
	41,  // 442: dm.ProductManage.productCategoryIndex:output_type -> dm.ProductCategoryIndexResp
	36,  // 443: dm.ProductManage.productCategoryRead:output_type -> dm.ProductCategory
	37,  // 444: dm.ProductManage.productCategorySchemaIndex:output_type -> dm.ProductCategorySchemaIndexResp
	0,   // 445: dm.ProductManage.productCategorySchemaMultiUpdate:output_type -> dm.Empty
	0,   // 446: dm.ProductManage.productCategorySchemaMultiCreate:output_type -> dm.Empty
	0,   // 447: dm.ProductManage.productCategorySchemaMultiDelete:output_type -> dm.Empty
	0,   // 448: dm.SchemaManage.commonSchemaInit:output_type -> dm.Empty
	0,   // 449: dm.SchemaManage.commonSchemaUpdate:output_type -> dm.Empty
	0,   // 450: dm.SchemaManage.commonSchemaCreate:output_type -> dm.Empty
	0,   // 451: dm.SchemaManage.commonSchemaDelete:output_type -> dm.Empty
	156, // 452: dm.SchemaManage.commonSchemaIndex:output_type -> dm.CommonSchemaIndexResp
	51,  // 453: dm.ProtocolManage.protocolInfoIndex:output_type -> dm.ProtocolInfoIndexResp
	55,  // 454: dm.ProtocolManage.protocolInfoRead:output_type -> dm.ProtocolInfo
	8,   // 455: dm.ProtocolManage.protocolInfoCreate:output_type -> dm.WithID
	0,   // 456: dm.ProtocolManage.protocolInfoUpdate:output_type -> dm.Empty
	0,   // 457: dm.ProtocolManage.protocolInfoDelete:output_type -> dm.Empty
	0,   // 458: dm.ProtocolManage.protocolServiceUpdate:output_type -> dm.Empty
	0,   // 459: dm.ProtocolManage.protocolServiceDelete:output_type -> dm.Empty
	53,  // 460: dm.ProtocolManage.protocolServiceIndex:output_type -> dm.ProtocolServiceIndexResp
	46,  // 461: dm.ProtocolManage.ProtocolScriptIndex:output_type -> dm.ProtocolScriptIndexResp
	44,  // 462: dm.ProtocolManage.ProtocolScriptRead:output_type -> dm.ProtocolScript
	8,   // 463: dm.ProtocolManage.ProtocolScriptCreate:output_type -> dm.WithID
	0,   // 464: dm.ProtocolManage.ProtocolScriptUpdate:output_type -> dm.Empty
	0,   // 465: dm.ProtocolManage.ProtocolScriptDelete:output_type -> dm.Empty
	43,  // 466: dm.ProtocolManage.ProtocolScriptDebug:output_type -> dm.ProtocolScriptDebugResp
	49,  // 467: dm.ProtocolManage.ProtocolScriptDeviceIndex:output_type -> dm.ProtocolScriptDeviceIndexResp
	47,  // 468: dm.ProtocolManage.ProtocolScriptDeviceRead:output_type -> dm.ProtocolScriptDevice
	8,   // 469: dm.ProtocolManage.ProtocolScriptDeviceCreate:output_type -> dm.WithID
	0,   // 470: dm.ProtocolManage.ProtocolScriptDeviceUpdate:output_type -> dm.Empty
	0,   // 471: dm.ProtocolManage.ProtocolScriptDeviceDelete:output_type -> dm.Empty
	8,   // 472: dm.DeviceGroup.groupInfoCreate:output_type -> dm.WithID
	0,   // 473: dm.DeviceGroup.groupInfoMultiCreate:output_type -> dm.Empty
	128, // 474: dm.DeviceGroup.groupInfoIndex:output_type -> dm.GroupInfoIndexResp
	123, // 475: dm.DeviceGroup.groupInfoRead:output_type -> dm.GroupInfo
	0,   // 476: dm.DeviceGroup.groupInfoUpdate:output_type -> dm.Empty
	0,   // 477: dm.DeviceGroup.groupInfoDelete:output_type -> dm.Empty
	0,   // 478: dm.DeviceGroup.groupDeviceMultiCreate:output_type -> dm.Empty
	0,   // 479: dm.DeviceGroup.groupDeviceMultiUpdate:output_type -> dm.Empty
	0,   // 480: dm.DeviceGroup.groupDeviceMultiDelete:output_type -> dm.Empty
	0,   // 481: dm.RemoteConfig.RemoteConfigCreate:output_type -> dm.Empty
	107, // 482: dm.RemoteConfig.RemoteConfigIndex:output_type -> dm.RemoteConfigIndexResp
	0,   // 483: dm.RemoteConfig.RemoteConfigPushAll:output_type -> dm.Empty
	110, // 484: dm.RemoteConfig.RemoteConfigLastRead:output_type -> dm.RemoteConfigLastReadResp
	86,  // 485: dm.DeviceMsg.sdkLogIndex:output_type -> dm.SdkLogIndexResp
	74,  // 486: dm.DeviceMsg.hubLogIndex:output_type -> dm.HubLogIndexResp
	80,  // 487: dm.DeviceMsg.sendLogIndex:output_type -> dm.SendLogIndexResp
	77,  // 488: dm.DeviceMsg.statusLogIndex:output_type -> dm.StatusLogIndexResp
	83,  // 489: dm.DeviceMsg.abnormalLogIndex:output_type -> dm.AbnormalLogIndexResp
	0,   // 490: dm.DeviceMsg.abnormalLogCreate:output_type -> dm.Empty
	69,  // 491: dm.DeviceMsg.propertyLogLatestIndex:output_type -> dm.PropertyLogIndexResp
	69,  // 492: dm.DeviceMsg.propertyLogLatestIndex2:output_type -> dm.PropertyLogIndexResp
	69,  // 493: dm.DeviceMsg.propertyLogIndex:output_type -> dm.PropertyLogIndexResp
	72,  // 494: dm.DeviceMsg.eventLogIndex:output_type -> dm.EventLogIndexResp
	58,  // 495: dm.DeviceMsg.shadowIndex:output_type -> dm.ShadowIndexResp
	121, // 496: dm.DeviceMsg.gatewayCanBindIndex:output_type -> dm.GatewayCanBindIndexResp
	89,  // 497: dm.DeviceInteract.actionSend:output_type -> dm.ActionSendResp
	89,  // 498: dm.DeviceInteract.actionRead:output_type -> dm.ActionSendResp
	0,   // 499: dm.DeviceInteract.actionResp:output_type -> dm.Empty
	61,  // 500: dm.DeviceInteract.propertyGetReportSend:output_type -> dm.PropertyGetReportSendResp
	64,  // 501: dm.DeviceInteract.propertyGetReportMultiSend:output_type -> dm.PropertyGetReportMultiSendResp
	94,  // 502: dm.DeviceInteract.propertyControlSend:output_type -> dm.PropertyControlSendResp
	103, // 503: dm.DeviceInteract.propertyControlMultiSend:output_type -> dm.PropertyControlMultiSendResp
	94,  // 504: dm.DeviceInteract.propertyControlRead:output_type -> dm.PropertyControlSendResp
	100, // 505: dm.DeviceInteract.sendMsg:output_type -> dm.SendMsgResp
	0,   // 506: dm.DeviceInteract.gatewayGetFoundSend:output_type -> dm.Empty
	0,   // 507: dm.DeviceInteract.gatewayNotifyBindSend:output_type -> dm.Empty
	97,  // 508: dm.DeviceInteract.edgeSend:output_type -> dm.EdgeSendResp
	8,   // 509: dm.OtaManage.otaFirmwareInfoCreate:output_type -> dm.WithID
	8,   // 510: dm.OtaManage.otaFirmwareInfoUpdate:output_type -> dm.WithID
	0,   // 511: dm.OtaManage.otaFirmwareInfoDelete:output_type -> dm.Empty
	213, // 512: dm.OtaManage.otaFirmwareInfoIndex:output_type -> dm.OtaFirmwareInfoIndexResp
	214, // 513: dm.OtaManage.otaFirmwareInfoRead:output_type -> dm.OtaFirmwareInfo
	8,   // 514: dm.OtaManage.otaFirmwareJobCreate:output_type -> dm.WithID
	219, // 515: dm.OtaManage.otaFirmwareJobIndex:output_type -> dm.OtaFirmwareJobIndexResp
	215, // 516: dm.OtaManage.otaFirmwareJobRead:output_type -> dm.OtaFirmwareJobInfo
	0,   // 517: dm.OtaManage.otaFirmwareJobUpdate:output_type -> dm.Empty
	223, // 518: dm.OtaManage.otaFirmwareDeviceIndex:output_type -> dm.OtaFirmwareDeviceIndexResp
	0,   // 519: dm.OtaManage.otaFirmwareDeviceCancel:output_type -> dm.Empty
	0,   // 520: dm.OtaManage.otaFirmwareDeviceRetry:output_type -> dm.Empty
	0,   // 521: dm.OtaManage.otaFirmwareDeviceConfirm:output_type -> dm.Empty
	8,   // 522: dm.OtaManage.otaModuleInfoCreate:output_type -> dm.WithID
	0,   // 523: dm.OtaManage.otaModuleInfoUpdate:output_type -> dm.Empty
	0,   // 524: dm.OtaManage.otaModuleInfoDelete:output_type -> dm.Empty
	15,  // 525: dm.OtaManage.otaModuleInfoIndex:output_type -> dm.OtaModuleInfoIndexResp
	16,  // 526: dm.OtaManage.otaModuleInfoRead:output_type -> dm.OtaModuleInfo
	0,   // 527: dm.userDevice.userDeviceCollectMultiCreate:output_type -> dm.Empty
	0,   // 528: dm.userDevice.userDeviceCollectMultiDelete:output_type -> dm.Empty
	35,  // 529: dm.userDevice.userDeviceCollectIndex:output_type -> dm.UserDeviceCollectSave
	8,   // 530: dm.userDevice.userDeviceShareCreate:output_type -> dm.WithID
	0,   // 531: dm.userDevice.userDeviceShareUpdate:output_type -> dm.Empty
	0,   // 532: dm.userDevice.userDeviceShareDelete:output_type -> dm.Empty
	0,   // 533: dm.userDevice.userDeviceShareMultiDelete:output_type -> dm.Empty
	27,  // 534: dm.userDevice.userDeviceShareIndex:output_type -> dm.UserDeviceShareIndexResp
	29,  // 535: dm.userDevice.userDeviceShareRead:output_type -> dm.UserDeviceShareInfo
	0,   // 536: dm.userDevice.userDeviceTransfer:output_type -> dm.Empty
	33,  // 537: dm.userDevice.userDeviceShareMultiCreate:output_type -> dm.UserDeviceShareMultiToken
	32,  // 538: dm.userDevice.userDeivceShareMultiIndex:output_type -> dm.UserDeviceShareMultiInfo
	0,   // 539: dm.userDevice.userDeivceShareMultiAccept:output_type -> dm.Empty
	384, // [384:540] is the sub-list for method output_type
	228, // [228:384] is the sub-list for method input_type
	228, // [228:228] is the sub-list for extension type_name
	228, // [228:228] is the sub-list for extension extendee
	0,   // [0:228] is the sub-list for field type_name
}

func init() { file_proto_dm_proto_init() }
func file_proto_dm_proto_init() {
	if File_proto_dm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_dm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithIDCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithIDChildren); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPathWithUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaModuleInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaModuleInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaModuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModuleVersionReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModuleVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModuleVersionIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModuleVersionIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceResetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareMultiDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharePerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceShareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareMultiInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareMultiToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareMultiAcceptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceCollectSave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategorySchemaIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategorySchemaIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategorySchemaMultiSaveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategoryIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategoryIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolScriptDebugReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolScriptDebugResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolScriptIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolScriptIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolScriptDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolScriptDeviceIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolScriptDeviceIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolServiceIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolServiceIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolConfigField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShadowIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShadowIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyGetReportSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyGetReportSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyGetReportSendMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyGetReportMultiSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyGetReportMultiSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyLogLatestIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyLogLatestIndex2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HubLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HubLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HubLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbnormalLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbnormalLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbnormalLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyControlSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRespReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyControlSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayGetFoundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayNotifyBindSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyControlMultiSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyControlSendMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyControlMultiSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRemoteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigPushAllReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigLastReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigLastReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCustomReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayBindDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewaySign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayMultiCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayMultiSaveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayCanBindIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayCanBindIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoMultiCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDeviceMultiSaveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDeviceMultiDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCustomUi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfoDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfoReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceOnlineMultiFixReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceOnlineMultiFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoMultiUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSchemaUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSchemaCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSchemaIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSchemaIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSchemaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaMultiCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaTslImportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaTslReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaTslReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSchemaMultiCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSchemaMultiDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSchemaIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSchemaIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSchemaTslReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSchemaTslReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGroupMultiSaveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProfileReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoCanBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoMultiBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoMultiBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoUnbindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceBindTokenReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceBindTokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProfileIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProfileIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTypeCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTypeCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Firmware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFileIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFileIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareInfoCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareInfoUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareJobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaJobDynamicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaJobStaticInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareJobIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareJobIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaJobByDeviceIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareDeviceIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareDeviceIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareDeviceCancelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareDeviceRetryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareDeviceConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo_OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_dm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   256,
			NumExtensions: 0,
			NumServices:   10,
		},
		GoTypes:           file_proto_dm_proto_goTypes,
		DependencyIndexes: file_proto_dm_proto_depIdxs,
		MessageInfos:      file_proto_dm_proto_msgTypes,
	}.Build()
	File_proto_dm_proto = out.File
	file_proto_dm_proto_rawDesc = nil
	file_proto_dm_proto_goTypes = nil
	file_proto_dm_proto_depIdxs = nil
}
