syntax = "proto3";
option go_package = "pb/dm";

//import "proto/schemaInfo.proto";
package dm;

import "google/protobuf/wrappers.proto";

message Empty {
}

message TimeRange{
  int64 start = 1;
  int64 end = 2;
}

message PageInfo{
  int64 page = 1;
  int64 size = 2;
  //排序信息
  repeated OrderBy orders = 3;
  message OrderBy {
    //排序的字段名
    string field = 1;
    //排序方式：1 从小到大, 2 从大到小
    int64 sort = 2;
  }
}

message CompareString{
  string CmpType =1;//"=":相等 "!=":不相等 ">":大于">=":大于等于"<":小于"<=":小于等于 "like":模糊查询
  string value =2;//值
}
message CompareInt64{
  string CmpType =1;//"=":相等 "!=":不相等 ">":大于">=":大于等于"<":小于"<=":小于等于 "like":模糊查询
  int64 value =2;//值
}

message FileCore{
  string path =1;//文件的路径
  bool isUpdate=2;//如果要更新该文件,则需要将该参数置为true
}

message SendOption {
  int64  timeoutToFail = 1;//超时失败时间
  int64  requestTimeout = 2;//请求超时,超时后会进行重试
  int64  retryInterval = 3;//重试间隔
}

message WithIDCode{
  int64 id = 1;
  string code=2;
}

message WithID{
  int64 id = 1;
}
message  WithIDChildren{
  int64 id =1;         // id
  bool withChildren =2;
}

message IDPath{
  int64 id =1;
  string idPath=2;
  int64 noParentID =3;
}

message IDsInfo{
  repeated int64 ids=1;
  repeated string  idPaths=2;
}

message IDPathWithUpdate{
  int64 id =1;
  string idPath=2;
  int64 updatedTime =3;
}


message   PublishMsg  { //发布消息结构体
    string handle =1; //对应 mqtt topic的第一个 thing ota config 等等
    string  type =2;   //操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
    bytes payload =3;
    int64 timestamp =4; //毫秒时间戳
    string  productID =5;
    string  deviceName =6;
    string  explain =7;      //内部使用的拓展字段
    string  protocolCode =8; //如果有该字段则回复的时候也会带上该字段
}

//设备管理
service DeviceManage {
  //鉴定是否是root账号(提供给mqtt broker)
  rpc rootCheck(RootCheckReq)           returns (Empty);
  //新增设备
  rpc deviceInfoCreate(DeviceInfo)     returns (Empty);
  //更新设备
  rpc deviceInfoUpdate(DeviceInfo)     returns (Empty);
  rpc deviceOnlineMultiFix(deviceOnlineMultiFixReq)returns (Empty);
  //删除设备
  rpc deviceInfoDelete(DeviceInfoDeleteReq)     returns (Empty);
  //获取设备信息列表
  rpc deviceInfoIndex(DeviceInfoIndexReq)     returns (DeviceInfoIndexResp);
  //批量更新设备状态
  rpc DeviceInfoMultiUpdate(DeviceInfoMultiUpdateReq)     returns (Empty);
  //获取设备信息详情
  rpc deviceInfoRead(DeviceInfoReadReq)     returns (DeviceInfo);
  rpc deviceInfoBind(DeviceInfoBindReq)returns(Empty);
  rpc deviceBindTokenRead(DeviceBindTokenReadReq)returns(DeviceBindTokenInfo);
  rpc deviceBindTokenCreate(Empty)returns(DeviceBindTokenInfo);
  rpc deviceInfoMultiBind(DeviceInfoMultiBindReq)returns(DeviceInfoMultiBindResp);//批量绑定
  rpc deviceInfoCanBind(DeviceInfoCanBindReq)returns(Empty);
  rpc deviceInfoUnbind(DeviceInfoUnbindReq)returns(Empty);
  rpc deviceTransfer(DeviceTransferReq)returns(Empty);
  rpc deviceReset(DeviceResetReq)returns(Empty);//设备重置
  rpc deviceMove(DeviceMoveReq)returns(Empty);//将设备信息迁移到新的设备中

  rpc deviceModuleVersionRead(DeviceModuleVersionReadReq)returns (DeviceModuleVersion);
  rpc deviceModuleVersionIndex(DeviceModuleVersionIndexReq)returns (DeviceModuleVersionIndexResp);

  //绑定网关下子设备设备
  rpc deviceGatewayMultiCreate(DeviceGatewayMultiCreateReq)     returns (Empty);
  //绑定网关下子设备设备
  rpc deviceGatewayMultiUpdate(DeviceGatewayMultiSaveReq)     returns (Empty);
  //获取绑定信息的设备信息列表
  rpc deviceGatewayIndex(DeviceGatewayIndexReq)     returns (DeviceGatewayIndexResp);
  //删除网关下子设备
  rpc deviceGatewayMultiDelete(DeviceGatewayMultiSaveReq)     returns (Empty);
  //设备计数
  rpc deviceInfoCount(DeviceInfoCountReq) returns (DeviceInfoCount);
  //设备类型
  rpc deviceTypeCount(DeviceTypeCountReq) returns (DeviceTypeCountResp);

  rpc deviceCount(DeviceCountReq) returns (DeviceCountResp);

  rpc deviceProfileRead(DeviceProfileReadReq)returns(DeviceProfile);
  rpc deviceProfileDelete(DeviceProfileReadReq)returns(Empty);
  rpc deviceProfileUpdate(DeviceProfile)returns(Empty);
  rpc deviceProfileIndex(DeviceProfileIndexReq)returns(DeviceProfileIndexResp);


  //更新设备物模型
  rpc deviceSchemaUpdate(DeviceSchema)returns (Empty);
  //新增设备
  rpc deviceSchemaCreate(DeviceSchema)     returns (Empty);
  //批量新增物模型,只新增没有的,已有的不处理
  rpc deviceSchemaMultiCreate(DeviceSchemaMultiCreateReq)     returns (Empty);
  //删除设备物模型
  rpc deviceSchemaMultiDelete(DeviceSchemaMultiDeleteReq)     returns (Empty);
  //获取设备物模型列表
  rpc deviceSchemaIndex(DeviceSchemaIndexReq)     returns (DeviceSchemaIndexResp);
  rpc deviceSchemaTslRead(DeviceSchemaTslReadReq)     returns (DeviceSchemaTslReadResp);


  //将设备加到多个分组中
  rpc deviceGroupMultiCreate(DeviceGroupMultiSaveReq)     returns (Empty);
  //更新设备所在分组
  rpc deviceGroupMultiUpdate(DeviceGroupMultiSaveReq)     returns (Empty);
  //删除设备所在分组
  rpc deviceGroupMultiDelete(DeviceGroupMultiSaveReq)     returns (Empty);
}

//产品管理
service ProductManage{
  rpc productInit(ProductInitReq)  returns (Empty);
  /*产品管理*/
  //新增产品
  rpc productInfoCreate(ProductInfo)     returns (Empty);
  //更新产品
  rpc productInfoUpdate(ProductInfo)     returns (Empty);
  //删除产品
  rpc productInfoDelete(ProductInfoDeleteReq)     returns (Empty);
  //获取产品信息列表
  rpc productInfoIndex(ProductInfoIndexReq)     returns (ProductInfoIndexResp);
  //获取产品信息详情
  rpc productInfoRead(ProductInfoReadReq)     returns (ProductInfo);
  //更新产品配置
  rpc productConfigUpdate(ProductConfig)     returns (Empty);
  /*物模型管理*/
  //更新产品物模型
  rpc productSchemaUpdate(ProductSchemaUpdateReq)returns (Empty);
  //新增产品
  rpc productSchemaCreate(ProductSchemaCreateReq)     returns (Empty);
  //批量新增物模型,只新增没有的,已有的不处理
  rpc productSchemaMultiCreate(ProductSchemaMultiCreateReq)     returns (Empty);
  //删除产品
  rpc productSchemaDelete(ProductSchemaDeleteReq)     returns (Empty);
  //获取产品信息列表
  rpc productSchemaIndex(ProductSchemaIndexReq)     returns (ProductSchemaIndexResp);
  //删除产品
  rpc productSchemaTslImport(ProductSchemaTslImportReq)     returns (Empty);
  //获取产品信息列表
  rpc productSchemaTslRead(ProductSchemaTslReadReq)     returns (ProductSchemaTslReadResp);

  /*脚本管理*/
  rpc productCustomRead(ProductCustomReadReq) returns (ProductCustom);
  rpc productCustomUpdate(ProductCustom) returns (Empty);


  /*产品类型*/
  //新增产品
  rpc productCategoryCreate(ProductCategory)     returns (WithID);
  //更新产品
  rpc productCategoryUpdate(ProductCategory)     returns (Empty);
  //删除产品
  rpc productCategoryDelete(WithID)     returns (Empty);
  //获取产品信息列表
  rpc productCategoryIndex(ProductCategoryIndexReq)     returns (ProductCategoryIndexResp);
  //获取产品信息详情
  rpc productCategoryRead(WithIDChildren)     returns (ProductCategory);
  //获取产品品类下的物模型列表,绑定的物模型会自动添加到该产品品类及子分类的产品中,并不支持删除
  rpc productCategorySchemaIndex(ProductCategorySchemaIndexReq) returns(ProductCategorySchemaIndexResp);
  rpc productCategorySchemaMultiUpdate(ProductCategorySchemaMultiSaveReq) returns(Empty);
  rpc productCategorySchemaMultiCreate(ProductCategorySchemaMultiSaveReq) returns(Empty);
  rpc productCategorySchemaMultiDelete(ProductCategorySchemaMultiSaveReq) returns(Empty);

}

//公共物模型管理
service SchemaManage{
  rpc commonSchemaInit(Empty)  returns (Empty);
  //更新产品物模型
  rpc commonSchemaUpdate(CommonSchemaUpdateReq)returns (Empty);
  //新增产品
  rpc commonSchemaCreate(CommonSchemaCreateReq)     returns (Empty);
  //删除产品
  rpc commonSchemaDelete(WithID)     returns (Empty);
  //获取产品信息列表
  rpc commonSchemaIndex(CommonSchemaIndexReq)     returns (CommonSchemaIndexResp);

}

service ProtocolManage {
  //协议列表
  rpc protocolInfoIndex(ProtocolInfoIndexReq)     returns (ProtocolInfoIndexResp);
  //协议详情
  rpc protocolInfoRead(WithIDCode)     returns (ProtocolInfo);
  //协议创建
  rpc protocolInfoCreate(ProtocolInfo)     returns (WithID);
  //协议更新
  rpc protocolInfoUpdate(ProtocolInfo)     returns (Empty);
  //协议删除
  rpc protocolInfoDelete(WithID)     returns (Empty);

  //更新服务状态,只给服务调用
  rpc protocolServiceUpdate(ProtocolService)returns(Empty);
  rpc protocolServiceDelete(WithID)returns(Empty);
  rpc protocolServiceIndex(ProtocolServiceIndexReq)returns(ProtocolServiceIndexResp);

  //协议列表
  rpc ProtocolScriptIndex(ProtocolScriptIndexReq)     returns (ProtocolScriptIndexResp);
  //协议详情
  rpc ProtocolScriptRead(WithID)     returns (ProtocolScript);
  //协议创建
  rpc ProtocolScriptCreate(ProtocolScript)     returns (WithID);
  //协议更新
  rpc ProtocolScriptUpdate(ProtocolScript)     returns (Empty);
  //协议删除
  rpc ProtocolScriptDelete(WithID)     returns (Empty);

  rpc ProtocolScriptDebug(ProtocolScriptDebugReq)     returns (ProtocolScriptDebugResp);


  //协议列表
  rpc ProtocolScriptDeviceIndex(ProtocolScriptDeviceIndexReq)     returns (ProtocolScriptDeviceIndexResp);
  //协议详情
  rpc ProtocolScriptDeviceRead(WithID)     returns (ProtocolScriptDevice);
  //协议创建
  rpc ProtocolScriptDeviceCreate(ProtocolScriptDevice)     returns (WithID);
  //协议更新
  rpc ProtocolScriptDeviceUpdate(ProtocolScriptDevice)     returns (Empty);
  //协议删除
  rpc ProtocolScriptDeviceDelete(WithID)     returns (Empty);
}

service DeviceGroup {
  //创建分组
  rpc groupInfoCreate(GroupInfo)     returns (WithID);
  rpc groupInfoMultiCreate(GroupInfoMultiCreateReq)     returns (Empty);

  //获取分组信息列表
  rpc groupInfoIndex(GroupInfoIndexReq)     returns (GroupInfoIndexResp);
  //获取分组信息详情
  rpc groupInfoRead(GroupInfoReadReq)     returns (GroupInfo);
  //更新分组
  rpc groupInfoUpdate(GroupInfo)     returns (Empty);
  //删除分组
  rpc groupInfoDelete(WithID)     returns (Empty);
  //创建分组设备
  rpc groupDeviceMultiCreate(GroupDeviceMultiSaveReq)     returns (Empty);
  //更新分组设备
  rpc groupDeviceMultiUpdate(GroupDeviceMultiSaveReq)     returns (Empty);
  //删除分组设备
  rpc groupDeviceMultiDelete(GroupDeviceMultiDeleteReq)     returns (Empty);
}

service RemoteConfig {
  rpc RemoteConfigCreate(RemoteConfigCreateReq) returns (Empty);
  rpc RemoteConfigIndex(RemoteConfigIndexReq) returns (RemoteConfigIndexResp);
  rpc RemoteConfigPushAll(RemoteConfigPushAllReq) returns (Empty);
  rpc RemoteConfigLastRead(RemoteConfigLastReadReq) returns (RemoteConfigLastReadResp);
}

//设备消息
service DeviceMsg {
  //获取设备sdk调试日志
  rpc sdkLogIndex(SdkLogIndexReq) returns (SdkLogIndexResp);
  //获取设备调试信息记录登入登出,操作
  rpc hubLogIndex(HubLogIndexReq)   returns (HubLogIndexResp);
  rpc sendLogIndex(SendLogIndexReq) returns(SendLogIndexResp);
  rpc statusLogIndex(StatusLogIndexReq) returns(StatusLogIndexResp);

  rpc abnormalLogIndex(AbnormalLogIndexReq) returns(AbnormalLogIndexResp);
  rpc abnormalLogCreate(AbnormalLogInfo) returns(Empty);

  //获取设备数据信息
  rpc propertyLogLatestIndex(PropertyLogLatestIndexReq)     returns (PropertyLogIndexResp);
  rpc propertyLogLatestIndex2(PropertyLogLatestIndex2Req)     returns (PropertyLogIndexResp);

  //获取设备数据信息
  rpc propertyLogIndex(PropertyLogIndexReq)     returns (PropertyLogIndexResp);
  //获取设备数据信息
  rpc eventLogIndex(EventLogIndexReq)     returns (EventLogIndexResp);
  //获取设备影子列表
  rpc shadowIndex(PropertyLogLatestIndexReq)     returns (ShadowIndexResp);

  //获取网关可以绑定的子设备列表
  rpc gatewayCanBindIndex(GatewayCanBindIndexReq)returns(GatewayCanBindIndexResp);
}

//设备交互
service DeviceInteract {
  //调用设备行为
  rpc actionSend(ActionSendReq)         returns(ActionSendResp);
  //获取异步调用设备行为的结果
  rpc actionRead(RespReadReq)         returns(ActionSendResp);

  //回复调用设备行为
  rpc actionResp(ActionRespReq)         returns(Empty);

  //请求设备获取设备最新属性
  rpc propertyGetReportSend(PropertyGetReportSendReq) returns(PropertyGetReportSendResp);
  //请求设备获取设备最新属性
  rpc propertyGetReportMultiSend(PropertyGetReportMultiSendReq) returns(PropertyGetReportMultiSendResp);

  //调用设备属性
  rpc propertyControlSend(PropertyControlSendReq)     returns(PropertyControlSendResp);
  //批量调用设备属性
  rpc propertyControlMultiSend(PropertyControlMultiSendReq)     returns(PropertyControlMultiSendResp);
  //获取异步调用设备属性的结果
  rpc propertyControlRead(RespReadReq)  returns(PropertyControlSendResp);
  //发送消息给设备 -- 调试使用
  rpc sendMsg(SendMsgReq)     returns(SendMsgResp);
  //获取网关拓扑关系
  rpc gatewayGetFoundSend(GatewayGetFoundReq)returns(Empty);
  //通知网关绑定子设备
  rpc gatewayNotifyBindSend(GatewayNotifyBindSendReq)returns(Empty);

  //提供给边缘端进行http访问
  rpc edgeSend(EdgeSendReq)returns(EdgeSendResp);
}

//新的ota功能实现
service OtaManage{
  //添加升级包
  rpc otaFirmwareInfoCreate(OtaFirmwareInfoCreateReq) returns (WithID);
  //修改升级包
  rpc otaFirmwareInfoUpdate(OtaFirmwareInfoUpdateReq) returns (WithID);
  //删除升级包
  rpc otaFirmwareInfoDelete(WithID) returns(Empty);
  //升级包列表
  rpc otaFirmwareInfoIndex(OtaFirmwareInfoIndexReq) returns(OtaFirmwareInfoIndexResp);
  //查询升级包
  rpc otaFirmwareInfoRead(WithID) returns(OtaFirmwareInfo);


  //创建静态升级批次
  rpc otaFirmwareJobCreate(OtaFirmwareJobInfo) returns(WithID);
  //获取升级包下的升级任务批次列表
  rpc otaFirmwareJobIndex(OtaFirmwareJobIndexReq) returns(OtaFirmwareJobIndexResp);
  //查询指定升级批次的详情
  rpc otaFirmwareJobRead(WithID) returns(OtaFirmwareJobInfo);
  //取消动态升级策略
  rpc otaFirmwareJobUpdate(OtaFirmwareJobInfo) returns (Empty);
  //查询指定升级批次下的设备升级作业列表
  rpc otaFirmwareDeviceIndex(OtaFirmwareDeviceIndexReq) returns(OtaFirmwareDeviceIndexResp);
  //取消指定批次下的设备升级作业
  rpc otaFirmwareDeviceCancel(OtaFirmwareDeviceCancelReq) returns(Empty);
  //重新升级指定批次下升级失败或升级取消的设备升级作业
  rpc otaFirmwareDeviceRetry(OtaFirmwareDeviceRetryReq) returns(Empty);
  //app确认设备升级
  rpc otaFirmwareDeviceConfirm(OtaFirmwareDeviceConfirmReq) returns(Empty);


  rpc otaModuleInfoCreate(OtaModuleInfo)returns(WithID);
  rpc otaModuleInfoUpdate(OtaModuleInfo)returns(Empty);
  rpc otaModuleInfoDelete(WithID)returns(Empty);
  rpc otaModuleInfoIndex(OtaModuleInfoIndexReq)returns(OtaModuleInfoIndexResp);
  rpc otaModuleInfoRead(WithIDCode)returns(OtaModuleInfo);
}


service userDevice{
  //用户收藏的设备
  rpc userDeviceCollectMultiCreate(UserDeviceCollectSave)returns(Empty);
  rpc userDeviceCollectMultiDelete(UserDeviceCollectSave)returns(Empty);
  rpc userDeviceCollectIndex(Empty)returns(UserDeviceCollectSave);

  //分享设备
  rpc userDeviceShareCreate(UserDeviceShareInfo)returns(WithID);
  //更新权限
  rpc userDeviceShareUpdate(UserDeviceShareInfo)returns(Empty);
  //取消分享设备
  rpc userDeviceShareDelete(UserDeviceShareReadReq)returns(Empty);
  //取消分享设备
  rpc userDeviceShareMultiDelete(UserDeviceShareMultiDeleteReq)returns(Empty);
  //获取设备分享列表(只有设备的所有者才能获取)
  rpc userDeviceShareIndex(UserDeviceShareIndexReq)returns(UserDeviceShareIndexResp);
  //获取设备分享的详情
  rpc userDeviceShareRead(UserDeviceShareReadReq)returns(UserDeviceShareInfo);

  //转让设备
  rpc userDeviceTransfer(DeviceTransferReq)returns(Empty);

//  rpc userDeviceOtaGetVersion(UserDeviceOtaGetVersionReq)returns(userDeviceOtaGetVersionResp);
//创建批量分享二维码，设备列表写入缓存
  rpc userDeviceShareMultiCreate(UserDeviceShareMultiInfo)returns(UserDeviceShareMultiToken);
  //扫码后获取设备列表
  rpc userDeivceShareMultiIndex(UserDeviceShareMultiToken)returns(UserDeviceShareMultiInfo);
  //接受批量分享的设备
  rpc userDeivceShareMultiAccept(UserDeviceShareMultiAcceptReq)returns(Empty);
}

message OtaModuleInfoIndexReq{
  PageInfo page = 1;
  string name = 2;
  string productID = 3;
}

message OtaModuleInfoIndexResp{
  int64 total = 1;
  repeated OtaModuleInfo list = 2;
}

message OtaModuleInfo{
  int64 id = 1;
  string code = 2;
  string name = 3;
  string desc = 4;
  string productID = 5;
  int64 createdTime = 6;
}


message ProductInitReq{
//  repeated string initType =1;//thing:物模型
  repeated string   productIDs = 2; //产品id,不填初始化所有产品
}

message DeviceModuleVersionReadReq{
  int64 id = 1;//填id或者以下三个参数
  string productID = 2;
  string deviceName = 3;
  string moduleCode = 4;
}
message DeviceModuleVersion{
   int64 id = 1;
   string productID = 2;
   string deviceName = 3;
   string moduleCode = 4;
   string version = 5;
}

message DeviceModuleVersionIndexReq{
  PageInfo page = 1;
  string productID = 2;
  string deviceName = 3;
  string moduleCode = 4;
}

message DeviceModuleVersionIndexResp{
  int64 total = 1;
  repeated DeviceModuleVersion list = 2;
}

message DeviceMoveReq{
  DeviceCore old = 1;//需要转移的设备
  DeviceCore new = 2;//转移的对象
  repeated string withTarget=3;//设备配置-profile,schemaAlias:profile
}

message DeviceResetReq{
  DeviceCore device = 1;//设备信息
  bool log = 2;//日志清除
  bool deviceSchema=3;//设备物模型定义清除
  bool bind =4;//绑定关系解绑
  bool info = 5;//设备信息恢复出厂设置,包含过期时间,名称,设备配置等
}

message DeviceTransferReq{
  DeviceCore device = 1;//设备信息
  repeated DeviceCore devices = 2;//设备信息
  int64 srcProjectID =3;//指定原来的项目ID,不写使用头
  int64  transferTo = 4;//转让给: 1: 某个人 2: 自己的某个项目
  int64 userID =5;//用户id
  int64 projectID =6;//项目id
  int64 areaID = 7;//转移到项目时指定区域ID
  int64 isCleanData =8;//是否清除数据:1是 2否
}

message UserDeviceShareReadReq{
  int64 id = 1;
  DeviceCore device = 2;//设备信息
}

message UserDeviceShareIndexReq{
  PageInfo page = 1;
  DeviceCore device = 2;//设备信息
}

message UserDeviceShareIndexResp{
  repeated UserDeviceShareInfo list = 1;
  int64 total = 2;
}


message UserDeviceShareMultiDeleteReq{
    repeated int64 ids =1;
    int64 projectID =2;//指定项目的情况下删除分享的所有设备
}

message UserDeviceShareInfo{
  int64 id = 1;
  DeviceCore device = 2;//设备信息
  int64 sharedUserID = 3;//分享的对象
  string sharedUserAccount =7;//分享的账号(只读)
  map<string,SharePerm>  schemaPerm = 4;//物模型权限,只需要填写需要授权并授权的物模型id
  map<string,SharePerm> accessPerm = 5;//操作权限 hubLog:设备消息记录,ota:ota升级权限,deviceTiming:设备定时
  int64 authType =9;//授权类型:1:全部授权 2:部分授权
  int64 projectID =6;//设备归属的项目
  google.protobuf.Int64Value  expTime =10; //到期时间,如果为0,则不限制
  int64 createdTime =8;
}

message SharePerm{
  int64 perm =1;//1:r(只读) 3(默认):rw(可读可写)
}

message DeviceShareInfo{
  string   productID = 1; //产品id
  string productName = 4; //产品名称 只读
  string  deviceName = 2; //设备名称
  string productImg = 3; //产品图片
  google.protobuf.StringValue  deviceAlias = 5; //设备别名 读写
}

message UserDeviceShareMultiInfo{
  repeated DeviceShareInfo devices = 1;//设备信息
  map<string,SharePerm>  schemaPerm = 2;//物模型权限,只需要填写需要授权并授权的物模型id
  map<string,SharePerm> accessPerm = 3;//操作权限 hubLog:设备消息记录,ota:ota升级权限,deviceTiming:设备定时
  int64 authType =4;//授权类型:1:全部授权 2:部分授权
  int64 projectID =5;//设备归属的项目
  int64 expTime =6; //有效期,如果为0,则不限制
  int64 createdTime =7;
  int64 userID = 8;//生成分享的人id
}

message UserDeviceShareMultiToken{
  string shareToken = 1;
}

message UserDeviceShareMultiAcceptReq{
  string shareToken = 1;
  int64 sharedUserID = 3;//分享的对象
  string sharedUserAccount =2;//分享的账号(只读)
  repeated DeviceCore devices = 4;
}

message UserDeviceCollectSave{
  repeated DeviceCore devices = 1;
}


message ProductCategory{
  int64 id = 1;
  int64 parentID =2;
  string name = 3;
  string headImg =4;
  bool isUpdateHeadImg = 5;//只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
  google.protobuf.StringValue desc = 6;
  repeated int64 idPath =9;
  int64 isLeaf =10;
  int64 deviceCount = 11;
  repeated ProductCategory children =7;//子节点
}



message ProductCategorySchemaIndexResp{
  repeated string   identifiers = 5; //过滤标识符列表
}

message ProductCategorySchemaIndexReq{
  int64 productCategoryID = 1;
  bool withFather =8;//同时返回父节点的物模型
}

message ProductCategorySchemaMultiSaveReq{
  int64 productCategoryID = 1;
  repeated string   identifiers = 5; //过滤标识符列表
}

message ProductCategoryIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  string  name = 2; //过滤名字
  int64 parentID = 3;
  repeated int64 ids = 4;
  int64 projectID =5;//项目id,只获取项目下有设备的
}

message ProductCategoryIndexResp{
  repeated ProductCategory list = 1;//产品信息
  int64  total = 2;//总数(只有分页的时候会返回)
}

message ProtocolScriptDebugReq{
  int64 triggerDir =2;    //1:up 2:down
  int64 triggerTimer =3;  //收到前处理1:before 2:after
  string script =6;//脚本内容
  PublishMsg req =8;//请求
  PublishMsg resp =9;//回复
}

message ProtocolScriptDebugResp{
  PublishMsg out =1;
  repeated string logs =2;
}

message ProtocolScript{
  int64  id = 1;
  string  name = 2; //名称
  int64 triggerDir =3;    //1:up 2:down
  int64 triggerTimer =4;  //收到前处理1:before 2:after
  string triggerHandle =5; //对应 mqtt topic的第一个 thing ota config 等等
  string triggerType =6;    // 操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
  google.protobuf.StringValue  desc = 7; //描述
  string script =8;//脚本内容
  int64 status =9;//状态:是否启用
  int64 createdTime = 10;//创建时间
}

message ProtocolScriptIndexReq{
  PageInfo page = 1;
  string  name = 2;
  int64 triggerDir =3;    //1:up 2:down
  int64 triggerTimer =4;  //收到前处理1:before 2:after
  string triggerHandle =5;
  string triggerType =6;
  int64 status =7;//状态:是否启用
}


message ProtocolScriptIndexResp{
  repeated ProtocolScript list = 1;
  int64 total = 2;
}


message ProtocolScriptDevice{
  int64  id = 1;
  int64 triggerSrc =2;    //产品:1 设备:2
  string productID =3;
  string deviceName =4;
  int64 scriptID = 5;//脚本对应的ID
  int64 priority =6;//执行优先级 大于0
  int64 status =7;//状态:是否启用
  int64 createdTime = 8;//创建时间
  ProtocolScript script =9;//脚本信息
  ProductInfo product = 10;//withDevice时,绑定的是产品返回
  DeviceInfo device =11;//withDevice时,绑定的是设备返回
}

message ProtocolScriptDeviceIndexReq{
  PageInfo page = 1;
  int64 triggerSrc = 2;    //product:1 device:2
  string productID = 3;  //
  string deviceName = 4; //
  int64 status = 5;//状态:是否启用
  int64 scriptID = 6;//脚本对应的ID
  bool withDevice = 7;//同时返回产品或设备信息
  bool withScript =8;// 同时返回脚本信息
}


message ProtocolScriptDeviceIndexResp{
  repeated ProtocolScriptDevice list = 1;
  int64 total = 2;
}


message ProtocolInfoIndexReq{
  PageInfo page = 1;
  string  name = 2;
  string  code =3;//  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
  string type =4;//协议类型
  string  transProtocol = 5;// 传输协议: mqtt,tcp,udp
  repeated string notCodes =6;//排除的协议包
  repeated string  codes =7;
}

message ProtocolInfoIndexResp{
  repeated ProtocolInfo list = 1;
  int64 total = 2;
}

message ProtocolServiceIndexReq{
  PageInfo page = 1;
  string  code =2;//  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
}

message ProtocolServiceIndexResp{
  repeated ProtocolService list = 1;
  int64 total = 2;
}

message ProtocolService {
  int64  id = 1;
  string code =2;//协议code
  string ip =3;// 协议服务的ip地址
  int64 port =4;//监听的端口,如果没有填0即可
  int64 status =5;//服务状态
  int64 updatedTime =6;//更新时间
  int64 createdTime = 7;//首次加入时间
}

message ProtocolInfo{
  int64  id = 1;
  string  name = 2;
  string code =3;//  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
  string type =4;//协议类型: 普通设备(默认):normal  音视频:media
  string  transProtocol = 5;// 传输协议: mqtt,tcp,udp
  string  desc = 6;
  repeated string  endpoints = 7;
  string  etcdKey = 8;
  int64 isEnableSyncProduct =13;//是否支持主动同步产品信息
  int64 isEnableSyncDevice =14;//是否支持主动同步设备信息
  repeated ProtocolConfigField configFields =9;//配置字段列表,没有可以不传
  repeated ProtocolConfigInfo configInfos =10;//配置列表
  repeated ProtocolConfigField productFields =11;//产品需要的配置字段列表
  repeated ProtocolConfigField deviceFields =12;//设备需要的配置字段列表
}

message ProtocolConfigField{
  int64 id =1;
  string group =2;
  string key =3;
  string label =4;
  bool isRequired =5;
  int64 sort =6;
}

message ProtocolConfigInfo{
  int64 id =1;
  map<string,string> config =2;
  string desc =3;
}

message ShadowIndexResp{
  repeated ShadowIndex  list = 1;
}
/*设备的日志数据*/
message ShadowIndex{
  string dataID = 1;//属性id
  string value = 2;//获取到的值
  int64 updatedDeviceTime = 3;//更新到设备的时间
}

message PropertyGetReportSendReq{
  string productID = 1; //产品id (必填)
  string deviceName = 2; //设备名(必填)
  repeated string dataIDs = 3; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
}

message PropertyGetReportSendResp{
  int64   code = 1;//设备返回状态码
  string  msg = 2;//返回状态
  string msgToken = 3;//调用id
  int64 timestamp = 4;//上报时间戳(毫秒时间戳)
  string params = 5;//获取到的值
}

message PropertyGetReportSendMsg{
  int64   code = 1;//设备返回状态码
  string  msg = 2;//返回状态
  string msgToken = 3;//调用id
  int64 timestamp = 4;//上报时间戳(毫秒时间戳)
  string params = 5;//获取到的值
  string productID = 6; //产品id (必填)
  string deviceName = 7; //设备名(必填)
  string sysMsg = 8;//系统错误信息
  int64  sysCode = 9;//系统错误码
}

message PropertyGetReportMultiSendReq{
  repeated string dataIDs = 1; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
  string  productID = 2; //产品id
  repeated string deviceNames = 3; //设备名
  repeated DeviceCore devices =4;//如果是不同的产品,则传这个字段,上面两个参数填了优先使用
  int64 areaID =5;//控制一个区域的设备
  string areaIDPath = 6;//根据区域路径控制设备
  int64 groupID =7;//控制一个组的设备
}

message PropertyGetReportMultiSendResp{
  repeated PropertyGetReportSendMsg list = 1; //批量设备返回结果列表
}

/*获取对应日志信息*/
message PropertyLogIndexReq{
  PageInfo page = 1;//使用了聚合函数及间隔的时候无效
  string tenantCode = 21;//租户号,只有管理员有权限
  int64 projectID =20;//只有管理员有权限
  int64 areaID =14;//只有管理员有权限
  string areaIDPath =15;//只有管理员有权限
  repeated int64 areaIDs =16;//只有管理员有权限
  int64  productCategoryID = 17;//产品品类id
  map<string,IDsInfo> BelongGroup =18;//key是group的purpose, value是里面包含的分组id

  string deviceName=2;//设备ID
  repeated string deviceNames=3;
  string productID = 4; //产品id (必填)
  string dataID = 5; //获取的具体标识符的数据(必填)
  int64 timeStart = 6;//获取时间的开始(毫秒时间戳)
  int64 timeEnd = 7;//时间的结束(毫秒时间戳)
  int64 interval = 8;//间隔 如果这个值不为零值 则时间的开始和结束必须有效及聚合函数不应该为空
  string intervalUnit = 12;//间隔单位 a (毫秒,默认), d (天), h (小时), m (分钟), n (月), s (秒), u (微秒), w (周), y (年)
  string argFunc = 9;//聚合函数 avg:平均值 first:第一个参数 last:最后一个参数 count:总数 twa: 时间加权平均函数 参考:https://docs.taosdata.com/reference/taos-sql/function
  //  /*
  //  FILL 语句指定某一窗口区间数据缺失的情况下的填充模式。填充模式包括以下几种：
  //    不进行填充：NONE（默认填充模式）。
  //    VALUE 填充：固定值填充，此时需要指定填充的数值。例如：FILL(VALUE, 1.23)。
  //    PREV 填充：使用前一个非 NULL 值填充数据。例如：FILL(PREV)。
  //    NULL 填充：使用 NULL 填充数据。例如：FILL(NULL)。
  //    LINEAR 填充：根据前后距离最近的非 NULL 值做线性插值填充。例如：FILL(LINEAR)。
  //    NEXT 填充：使用下一个非 NULL 值填充数据。例如：FILL(NEXT)。
  //  */
  string fill = 10; //填充模式 参考:https://docs.taosdata.com/reference/taos-sql/distinguished/#fill-%E5%AD%90%E5%8F%A5
  int64 order = 11; //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
  string partitionBy =13;//切分数据,可以填写deviceName
  bool noFirstTs =22;//时间戳填充不填充最早的值,聚合模式使用
}

/*获取对应日志信息*/
message PropertyLogLatestIndexReq{
  string productID = 2; //产品id (必填)
  string deviceName = 1; //设备名(必填)
  repeated string dataIDs = 3; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

message PropertyLogLatestIndex2Req{
  repeated DeviceData devices = 4;//
}

/*设备的日志数据*/
message PropertyLogInfo{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string productID = 5;//产品名称
  string deviceName = 2;//设备名称
  string dataID = 3;//属性id
  string value = 4;//获取到的值
  string dataName =6;//属性名称
  string tenantCode = 7;//租户号,只有partitionBy 传该参数的时候才会返回
  int64 projectID = 8;//租户号,只有partitionBy 传该参数的时候才会返回
  int64 areaID =9;//租户号,只有partitionBy 传该参数的时候才会返回
  string areaIDPath =10;//租户号,只有partitionBy 传该参数的时候才会返回
  map<string,IDsInfo> BelongGroup =18;//key是group的purpose, value是里面包含的分组id 只有partitionBy 传该参数的时候才会返回

}




/*获取对应日志信息*/
message PropertyLogIndexResp{
  int64 total = 1; //总数
  repeated PropertyLogInfo list = 2;
}

/*获取对应日志信息*/
message EventLogIndexReq{
  PageInfo page = 1;//使用了聚合函数及间隔的时候无效
  string productID = 2; //产品id (必填)
  string deviceName = 3; //设备名(不填获取产品下所有设备)
  repeated string deviceNames = 8; //废弃
  string dataID = 4; //获取的具体标识符的数据(必填)
  int64 timeStart = 5;//获取时间的开始(毫秒时间戳)
  int64 timeEnd = 6;//时间的结束(毫秒时间戳)
  repeated string types = 7; //类型 事件类型: 信息:info  告警alert  故障:fault
}

/*设备的日志数据*/
message EventLogInfo{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string type = 2 ;// 事件类型: 信息:info  告警alert  故障:fault
  string dataID = 3;//属性id
  string params = 4;//获取到的值
  string deviceName = 5; //设备名(不填获取产品下所有设备)
}

/*获取对应日志信息*/
message EventLogIndexResp{
  int64 total = 1; //总数
  repeated EventLogInfo list = 2;
}

/*实时获取对应信息*/
message HubLogIndexReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始(毫秒时间戳)
  int64   timeEnd = 4;//时间的结束(毫秒时间戳)
  PageInfo   page = 5;//分页信息
  repeated string actions = 6;//过滤操作类型 connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
  repeated string topics = 7;//过滤主题
  string content = 8;//过滤内容
  string requestID = 9;//过滤请求ID
}

/*实时获取对应信息*/
message HubLogIndexResp{
  int64 total = 1; //总数
  repeated HubLogInfo list = 2;
}

/*设备的日志数据*/
message HubLogInfo{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string action = 2 ;//操作类型;connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
  string requestID = 3;//请求ID
  string traceID = 4;//服务器端事务id
  string topic = 5;//主题
  string content = 6;//具体内容
  int64 resultCode = 7;//请求结果状态
  string respPayload =8;//返回的内容
}





/*实时获取对应信息*/
message StatusLogIndexReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始(毫秒时间戳)
  int64   timeEnd = 4;//时间的结束(毫秒时间戳)
  PageInfo   page = 5;//分页信息
  int64 status = 9;//在线状态
}

/*实时获取对应信息*/
message StatusLogIndexResp{
  int64 total = 1; //总数
  repeated StatusLogInfo list = 2;
}

/*设备的日志数据*/
message StatusLogInfo{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  int64 status = 2;//设备状态
  string  productID = 3; //产品id
  string  deviceName = 4; //设备名
}




/*实时获取对应信息*/
message SendLogIndexReq{
  int64 projectID =13;//只有管理员有权限
  int64 areaID =14;//只有管理员有权限
  string areaIDPath =15;//只有管理员有权限
 repeated int64 areaIDs =16;//只有管理员有权限
  map<string,IDsInfo> BelongGroup =17;//key是group的purpose, value是里面包含的分组id

  int64  productCategoryID = 11;//产品品类id
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始(毫秒时间戳)
  int64   timeEnd = 4;//时间的结束(毫秒时间戳)
  PageInfo   page = 5;//分页信息
  int64 userID = 9;
  repeated string actions =10;
  int64 resultCode = 12;//请求结果状态,200为成功
  string dataID = 8;//identify
  repeated string dataIDs =7;
}

/*实时获取对应信息*/
message SendLogIndexResp{
  int64 total = 1; //总数
  repeated SendLogInfo list = 2;
}

/*设备的日志数据*/
message SendLogInfo{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string account = 2;//账号
  int64 userID = 4;//
  string productID = 5;//
  string deviceName = 6;//
  string action = 7;//操作类型 propertySend:属性控制 actionSend:操作控制 propertyGetReportSend:获取最新属性请求
  string dataID = 8;//identify
  string traceID = 9;//服务器端事务id
  string content = 10;//操作的内容
  int64 resultCode = 11;//请求结果状态,200为成功
}


/*实时获取对应信息*/
message AbnormalLogIndexReq{
  int64 projectID =13;//只有管理员有权限
  int64 areaID =14;//只有管理员有权限
  string areaIDPath =15;//只有管理员有权限
  repeated int64 areaIDs =16;//只有管理员有权限
  int64  productCategoryID = 17;//产品品类id
  map<string,IDsInfo> BelongGroup =18;//key是group的purpose, value是里面包含的分组id
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始(毫秒时间戳)
  int64   timeEnd = 4;//时间的结束(毫秒时间戳)
  PageInfo   page = 5;//分页信息
  int64 userID = 9;
  int64 action =10;
  string type =11;//异常类型
  int64 resultCode = 12;//请求结果状态,200为成功
}

/*实时获取对应信息*/
message AbnormalLogIndexResp{
  int64 total = 1; //总数
  repeated AbnormalLogInfo list = 2;
}

/*设备的日志数据*/
message AbnormalLogInfo{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  int64 action = 2;//触发1还是解除2
  string type = 4;//异常类型
  string productID = 5;//
  string deviceName = 6;//
  string Reason = 7;//原因
  string traceID = 9;//服务器端事务id
}

/*获取sdk调试日志信息*/
message SdkLogIndexReq {
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始
  int64   timeEnd = 4;//时间的结束
  int64   logLevel = 5; //日志等级
  PageInfo page = 6;//分页信息 只获取一个则不填
}
/*sdk调试日志信息*/
message SdkLogIndexResp {
  int64 total = 1; //总数
  repeated SdkLogInfo list = 2;
}
message SdkLogInfo {
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  int64 loglevel = 2 ;//操作类型;显示相应的操作名称、API名称、服务的method
  string content = 3;//具体内容
}


message ActionSendReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string actionID = 3;//产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
  string inputParams = 4;//输入参数
  bool isAsync = 5;//是否异步获取
  SendOption option = 6;//异步选项
}

message ActionSendResp{
  string msgToken = 1;//调用id
  string outputParams = 2;//输出参数 注意：此字段可能返回 null，表示取不到有效值。
  string  msg = 3;//返回状态
  int64   code = 4;//设备返回状态码
}

//获取异步消息的请求
message RespReadReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  string  msgToken = 3;//调用id
}

message PropertyControlSendReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  string data = 3;//属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
  //设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错
  // 2:如果有设备影子只修改影子,没有的也不下发 3: 只修改云端的值,不下发设备
  int64 shadowControl = 4;
  bool isAsync = 6;//是否异步操作 异步情况通过获取接口来获取
  WithProfile withProfile =7;
  int64 syncTimeout =8;//同步超时时间(单位:秒)
}

message WithProfile{
  string code =1;
  string params=2;
}

message ActionRespReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string msgToken = 3;//调用id
  string outputParams = 4;//输出参数 注意：此字段可能返回 null，表示取不到有效值。
  string  msg = 5;//返回状态
  int64   code = 6;//设备返回状态码
}


message PropertyControlSendResp{
  int64   code = 1;//设备返回状态码
  string  msg = 2;//返回状态
  string msgToken = 3;//调用id
}

message GatewayGetFoundReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
}

message EdgeSendReq{
  string handle = 1;//对应 mqtt topic的第一个 thing ota config 等等
  string type = 2;//操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
  bytes payload = 3;
  string productID = 4;
  string deviceName = 5;
}


message EdgeSendResp{
  bytes payload = 3;
}

message GatewayNotifyBindSendReq{
  DeviceCore gateway =1;
  repeated DeviceCore subDevices =2;
}

message SendMsgReq{
  string topic = 1; //发送的topic
  bytes payload = 2;//发送的数据
}

message SendMsgResp{

}



message PropertyControlMultiSendReq{
  string  productID = 1; //产品id
  repeated string deviceNames = 2; //设备名
  repeated DeviceCore devices =3;//如果是不同的产品,则传这个字段,上面两个参数填了优先使用
  int64 shadowControl = 4;//设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
  string data = 5;//属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
  bool isAsync = 6;//是否异步操作 异步情况通过获取接口来获取
  int64 areaID =7;//控制一个区域的设备
  string areaIDPath = 10;//根据区域路径控制设备
  int64 groupID =8;//控制一个组的设备
  int64 syncTimeout =9;//同步超时时间(单位:秒,不填默认3秒)
}

message PropertyControlSendMsg{
  string productID =1;
  string  deviceName = 2; //设备名
  int64   code = 3;//设备返回状态码
  string  msg = 4;//返回状态
  string msgToken = 5;//调用id
  string sysMsg = 6;//系统错误信息
  int64  sysCode = 7;//系统错误码
}

message PropertyControlMultiSendResp{
  repeated PropertyControlSendMsg list = 1; //批量设备返回结果列表
}



message ProductRemoteConfig{
  int64 id = 1;
  string productID = 2;
  string content = 3;
  int64 createdTime = 4;
}

message RemoteConfigCreateReq{
  string productID = 1;
  string content = 2;
}

message RemoteConfigIndexReq{
  PageInfo page = 1;
  string productID = 2;
}

message RemoteConfigIndexResp{
  repeated ProductRemoteConfig list = 1;
  int64 total = 2;
}

message RemoteConfigPushAllReq{
  string productID = 1;
}

message RemoteConfigLastReadReq{
  string productID = 1;
}

message RemoteConfigLastReadResp{
  ProductRemoteConfig info = 1;
}

message ProductCustomReadReq{
  string productID = 1;
}

message ProductCustom{
  string productID = 1;
  int64 scriptLang = 3;//脚本语言类型（默认JavaScript） 1:JavaScript 2:lua 3:python
  google.protobuf.StringValue transformScript = 2;//协议转换脚本
  google.protobuf.StringValue loginAuthScript = 5;//登录认证脚本
  repeated CustomTopic customTopics = 4;//自定义topic信息 只有mqtt协议有用
}

message CustomTopic{
  string topic = 1;//自定义主题需要以$custom 并包含设备名称{deviceName}及产品名称{productID}
  int64 direction = 2; //1:上行 2:下行 3:双向
}

message DeviceGatewayBindDevice{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备id
  string deviceAlias =4;//设备名称,如果填写了则会更新设备的名称
  DeviceGatewaySign sign = 3;//签名
}

message DeviceGatewaySign{
  /*
     子设备绑定签名串。 签名算法：
     1. 签名原串，将产品 ID 设备名称，随机数，时间戳拼接：text=${product_id}${device_name};${random};${expiration_time}
     2. 使用设备 Psk 密钥，或者证书的 Sha1 摘要，进行签名：hmac_sha1(device_secret, text)
   */
  string signature = 3;
  int64  random = 4; //随机数。
  int64 timestamp = 5; //时间戳，单位：秒。
  string    signMethod = 6; //签名算法。支持 hmacsha1、hmacsha256
}

message DeviceGatewayMultiCreateReq{
  DeviceCore gateway = 1;//
  bool isNotNotify =2;//不通知网关设备状态做了调整
  bool isAuthSign = 3;//是否校验设备签名
  repeated DeviceGatewayBindDevice list = 4;
}


message DeviceGatewayIndexReq{
  PageInfo page = 1;
  DeviceCore gateway = 2;//获取网关下子设备列表
  DeviceCore subDevice = 3; //获取子设备绑定的网关列表
}

message DeviceGatewayIndexResp{
  repeated DeviceCore list = 1;
  int64 total = 2;
}

message DeviceGatewayMultiSaveReq{
  DeviceCore gateway = 1;
  bool isNotNotify =2;//不通知网关设备状态做了调整
  repeated DeviceCore list = 3;
}

message GatewayCanBindIndexReq{
  DeviceCore gateway = 1;
}

message GatewayCanBindIndexResp{
  repeated DeviceCore subDevices = 1;
  int64 updatedTime =2;//更新时间
}

message GroupInfoMultiCreateReq{
  repeated GroupInfo groups=1;
}

message GroupInfo{
  string purpose =15;//用途 不填默认为default
  int64 areaID = 10;//分组可以属于某个区域下
  int64 projectID = 3;
  int64 id = 1;
  int64 parentID = 2;
  string idPath =17;
  string name = 4;
  string desc = 5;
  int64 createdTime = 6;
  map<string, string> tags = 7;
  string productID = 8;
  string productName = 9;
  repeated DeviceCore devices =11;
  int64 deviceCount = 12;
  int64 isLeaf =13;
  map<string,string> files =16;//key 是用途, value是 是文件的路径,如果要更新该文件, 传filePath即可
  repeated GroupInfo children =14;
//  DeviceInfoCount deviceInfoCount =11;
}

message GroupCore{
  int64 id = 1;
  int64 parentID = 2;
  string name = 4;
}

message GroupInfoCreateReq{
  string purpose =6;//用途 不填默认为default
  int64 areaID = 5;//分组可以属于某个区域下
  string name = 1;
  int64 parentID = 2;
  string productID = 3;
  string desc = 4;
}

message  GroupInfoReadReq{
  int64 id =1;         // id
  bool withChildren =2;
  string purpose =15;//用途 不填默认为default
}


message GroupInfoIndexReq{
  int64 areaID = 5;//分组可以属于某个区域下
  PageInfo page = 1;
  string name = 2;
  repeated string names =6;
  int64 parentID = 3;
  map<string, string> tags = 4;
  string purpose =15;//用途 不填默认为default
  repeated string purposes =16;//用途
   DeviceCore hasDevice=17;
}

message GroupInfoIndexResp{
  repeated GroupInfo list = 1;
  int64 total = 2;
 // repeated GroupInfo listAll = 3;
}



message GroupInfoUpdateReq{
  int64 id = 1;
  string name = 2;
  string desc = 3;
  map<string, string> tags = 4;
  string productID = 5;
}



message GroupDeviceMultiSaveReq{
  int64 groupID = 1;
  repeated DeviceCore list = 2;
}


message GroupDeviceMultiDeleteReq{
  int64 groupID = 1;
  string purpose =2;//用途 不填默认为default
  repeated DeviceCore list = 3;
}

message Point{
  double  longitude = 1;//经度
  double  latitude = 2;//纬度
}


message DeviceInfo {
  int64 id =34;
  string tenantCode =26;//租户号,只有default租户能查到这个字段
  string productID = 1; //产品id 只读
  int64 projectID = 2; //项目id 只读
  int64 areaID = 3; //项目区域id
  string areaIDPath = 42; //区域id 路径
  string productName = 4; //产品名称 只读
  string deviceName = 5; //设备名称 读写
  int64 createdTime = 6; //创建时间 只读
  string secret = 7; //设备秘钥 只读
  string cert = 8;// 设备证书  只读
  string imei = 9; //IMEI号信息 只读
  string mac = 10; //MAC号信息 只读
  google.protobuf.StringValue version = 11; // 固件版本  读写
  string hardInfo = 12; //模组硬件型号 只读
  string softInfo = 13; //模组软件版本 只读
  Point Position = 14;   //设备定位,默认百度坐标系
  google.protobuf.StringValue address = 15; // 所在地址 读写
  google.protobuf.StringValue adcode = 45; // 地区编码 读写
  map<string, string> tags = 16;//设备标签
  int64 isOnline = 17; //在线状态  1离线 2在线 只读
  int64 firstLogin = 18; //激活时间 只读
  int64 firstBind = 37; //第一次绑定的时间
  int64 lastBind =50;//最后一次绑定时间
  int64 lastLogin = 19; //最后上线时间 只读
  int64 logLevel = 20; // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
  google.protobuf.StringValue  deviceAlias = 21; //设备别名 读写
  int64 mobileOperator = 22;//移动运营商:1)移动 2)联通 3)电信 4)广电
  google.protobuf.StringValue phone = 23;//手机号
  google.protobuf.StringValue iccid = 24;//SIM卡卡号
  map<string,string> schemaAlias = 25;//设备物模型别名,如果是结构体类型则key为xxx.xxx
  google.protobuf.Int64Value  rssi = 27; // 设备信号（信号极好[-55— 0]，信号好[-70— -55]，信号一般[-85— -70]，信号差[-100— -85]）
  int64  ratedPower =28;// 额定功率:单位w/h
  map<string,string>protocolConf =29;
  map<string,string>subProtocolConf =51;
  int64 status =30 ;//设备状态 1-未激活，2-在线，3-离线 4-异常(频繁上下线,告警中)
  int64 isEnable =31;//是否启用
  int64  deviceType = 33; //设备类型:1:设备,2:网关,3:子设备
  int64 netType =35;//网络类型
  IDPathWithUpdate distributor =36;//过滤分销商的数据
  google.protobuf.Int64Value  expTime =38; //到期时间,如果为0,则不限制
  int64 NeedConfirmJobID =39;//需要app确认升级的任务ID,为0是没有
  string NeedConfirmVersion =40;//待确认升级的版本
  int64 userID =41;//拥有者的用户ID
  string productImg = 43; //产品图片
  int64   categoryID = 44;//产品品类
  string lastIp = 49;//最后登录的ip,只读
  google.protobuf.StringValue desc=47;
  IDPathWithUpdate dept =52;//过滤分销商的数据
  DeviceInfo Gateway =46;//子设备绑定的网关
  int64 sort =53; //排序
  string groupPurpose =58;//更新的时候使用,将设备该用途下的分组进行更新
  repeated int64 groupIDs =59; //如果要更新分组,必须填写groupPurpose
  map<string,IDsInfo> BelongGroup =61;//key是group的purpose, value是里面包含的分组id

  string deviceImg = 54; //设备图片
  bool isUpdateDeviceImg = 55;//只有这个参数为true的时候才会更新设备图片,传参为图片的file path

  string file = 56; //设备文件
  bool isUpdateFile = 57;//只有这个参数为true的时候才会更新设备文件,传参为文件的file path
}

message ProductConfig{
  string   productID = 1; //产品id 只读
  DevInit DevInit =2;//设备初始化配置
}
message DevInit{
  string tenantCode =1;//设备创建默认分配给的租户
  int64 projectID =2;//设备创建默认分配给的项目
  int64 areaID=3;//设备创建默认分配给的区域ID
  int64 deptID=4;//设备创建默认分配给的部门
}

message ProductInfo{
  int64   createdTime = 1; //创建时间 只读
  string   productID = 2; //产品id 只读
  string  productName = 3; //产品名称
  int64   authMode = 4;//认证方式:1:账密认证,2:秘钥认证
  int64   deviceType = 5;//设备类型:1:设备,2:网关,3:子设备
  int64   categoryID = 6;//产品品类
  int64   netType = 7;//通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
  string protocolCode =8;//协议code,默认urMqtt,设备下发只会发送给主协议  urMqtt,urHttp,wumei,aliyun,huaweiyun,tuya
  google.protobuf.StringValue subProtocolCode =24;//子协议,主协议和子协议传输类型必须不相同, 设备控制下发只会发送给主协议, 当设备是音视频设备但是控制协议需要单独走的时候就可以把主协议定义为普通协议,子协议定义为音视频协议,这样就能实现音视频走音视频协议,控制走子协议
  int64   autoRegister = 9;//动态注册:1:关闭,2:打开,3:打开并自动创建设备
  string   secret = 10;//动态注册产品秘钥 只读
  google.protobuf.StringValue   desc = 11;//描述
  map<string, string> tags = 13; //产品标签
  string productImg = 14; //产品图片
  bool isUpdateProductImg = 15;//只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
  ProtocolInfo protocol = 16; //主协议信息
  ProtocolInfo subProtocol = 39;//子协议信息
  ProductCategory category = 17;
  map<string,string>protocolConf =18;
  map<string,string>subProtocolConf =25;
  google.protobuf.Int64Value  trialTime =38; //试用时间(单位为天,为0不限制)
  string  sceneMode =19;//场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
  int64 status =20; //产品状态 1:启用 2:禁用 3:开发中
  map<string,ProductCustomUi> customUi=21;//自定义ui
  int64 deviceSchemaMode =22;// 设备物模型模式:1:关闭,2:设备自动创建3: 设备自动创建及上报无定义自动创建
  int64 bindLevel = 23;//绑定级别: 1:强绑定(默认,只有用户解绑之后才能绑定) 2:中绑定(可以通过token强制绑定设备) 3:弱绑定(app可以内部解绑被绑定的设备)
  ProductConfig config =30;//产品配置
}

message ProductCustomUi{
  string path =2;
  int64 version =3;//版本号,递增
  bool isUpdateUi=4;
}

message ProductInfoDeleteReq{
  string   productID = 1; //产品id
}

message ProductInfoReadReq{
  string   productID = 1; //产品id
  bool withProtocol =2;
  bool withCategory=3;
}

message ProductInfoIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  int64  deviceType = 2; //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
  repeated int64 deviceTypes =10;
  string  productName = 3; //过滤条件: 产品名称
  repeated string   productIDs = 4; //过滤产品id列表
  map<string, string> tags = 5;//key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
  map<string,string> protocolConf = 6; //协议配置查询
  string protocolCode =7;
  string protocolType = 25; //协议类型
  string protocolTrans = 26;//传输层协议类型
  bool withProtocol =8;
  bool withCategory=9;
  string  sceneMode =16;//场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
  repeated string  sceneModes =17;//场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
  int64 status =20; //产品状态 1:启用 2:禁用 3:开发中
  repeated int64 statuses =21; //产品状态 1:启用 2:禁用 3:开发中
  int64   netType = 11;//通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
  int64 projectID =12;//项目id,只获取项目下有设备的
  int64 areaID = 22;//区域下有设备的产品列表
  string areaIDPath=24; //区域路径过滤
  repeated int64   categoryIDs = 23;//产品品类
}

message ProductInfoIndexResp{
  repeated ProductInfo list = 1;//产品信息
  int64  total = 2;//总数(只有分页的时候会返回)
}

message deviceOnlineMultiFixReq{
    repeated deviceOnlineMultiFix devices =1;
}

message deviceOnlineMultiFix{
  DeviceCore device =1;
  int64 isOnline =2;
  int64 connectAt =3;
}

message DeviceInfoDeleteReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceCore{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceData{
  string productID = 1; //产品id
  string deviceName = 2; //设备名称
  string dataID = 3;//属性id
}

message DeviceError{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
  int64 code =3;
  string msg =4;
}

message DeviceInfoReadReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
  bool withGateway =3;//同时返回子设备的网关
}

message DeviceInfoMultiUpdateReq {
  repeated DeviceCore   devices = 1; //产品id
  CompareInt64 FilterDistributorID=2;

  int64 areaID = 4; //项目区域id
  IDPath distributor =20;//分销商的数据
  int64  ratedPower =28;// 额定功率:单位w/h
}

message DeviceInfoIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  string  productID = 2; //过滤条件: 产品id
  repeated string  productIDs = 23; //过滤条件: 产品id
  string deviceName = 3;//过滤条件:模糊查询 设备名
  repeated string deviceNames = 4;//过滤条件:精准查询 设备名
  map<string, string> tags = 5;//key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
  map<string, string> tagsLike = 46;//key tag过滤查询,模糊查询 为tag的名,value为tag对应的值
  int64 range = 6; //过滤条件:取距离坐标点固定范围内的设备
  Point Position = 7;   //设备定位,默认百度坐标系
  repeated int64 areaIDs = 8;//区域ids
  string areaIDPath=32; //区域路径过滤
  string deviceAlias = 9; //过滤条件:模糊查询 设备别名
  int64 isOnline = 10; //在线状态过滤  1离线 2在线
  int64  productCategoryID = 11;//产品品类id
  repeated int64  productCategoryIDs = 33;//产品品类id
  repeated DeviceCore devices =12;
  int64 withShared = 13;//过滤分享的设备(这里只获取分享的设备) 1: 同时获取分享的设备 2:只获取分享的设备
  int64 withCollect = 24;//过滤收藏的设备(这里只获取收藏的设备) 1: 同时获取收藏的设备 2:只获取收藏的设备
  int64   netType = 25;//通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
  string tenantCode = 14;//租户过滤
  repeated string versions =15;//版本列表
  string notVersion =39;//非版本
  int64  deviceType = 16; //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
  repeated int64 deviceTypes =21;
  DeviceCore gateway = 17;//获取网关下子设备列表
  int64 groupID =18;
  int64 notGroupID =19;
  int64 parentGroupID = 42;
  string groupPurpose =45;//设备分组用途 不填默认为default
  string groupName =43;//模糊查询
  int64 notAreaID =29;
  IDPath distributor =20;//过滤分销商的数据
  int64 status =22;
  repeated int64 statuses =35;
  CompareInt64 ratedPower =28;// 额定功率:单位w/h
  int64 hasOwner = 30;//是否被人拥有
  int64 userID =31;//用户id查询
  CompareInt64  expTime =38; //到期时间
  string iccid = 40;//SIM卡卡号
  bool withGateway =41;//同时返回子设备的网关
  string protocolCode =51;//协议查询
  CompareInt64 rssi=52;
  IDPath dept =53;//过滤分销商的数据
  map<string,CompareString> Property =54;//设备最新属性过滤,key为属性的id,如果是结构体则key为 aaa.bbb 数组为aaa.1
}

message DeviceInfoIndexResp{
  repeated DeviceInfo list = 1;//设备信息
  int64  total = 2;//总数(只有分页的时候会返回)
}




/*
上面是设备管理模块的消息
*/




/*
下面是设备管理模块的消息
*/


message RootCheckReq{
  string username = 1;//用户名
  string password = 2;//密码
  string clientID = 3;//clientID
  string ip = 4;//访问的ip地址
  bytes certificate = 5;//客户端证书
}

message CommonSchemaUpdateReq{
  CommonSchemaInfo info = 1;//物模型信息

}



message CommonSchemaCreateReq{
  CommonSchemaInfo info = 1;//物模型信息
}



message CommonSchemaIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  repeated string productIDs = 2; //有这个属性的产品id列表
  int64  type = 3; //物模型类型 1:property属性 2:event事件 3:action行为
  repeated int64 types =20;
  repeated string   identifiers = 5; //过滤标识符列表
  string name =6;//标识符名字过滤
  bool withProductCategory =4;
  int64 productCategoryID = 7;//过滤属于该产品品类的物模型
  bool productCategoryWithFather =8;//同时返回父节点的物模型
  int64 isCanSceneLinkage =9;//是否支持场景联动控制
  int64 funcGroup =14; // 功能分类: 1:普通功能 2:系统功能
  int64 userPerm =15;//用户权限操作: 1:r(只读) 3:rw(可读可写)
  int64 areaID =16;//过滤区域下设备共有的物模型
  string areaIDPath=23; //区域路径过滤
  int64 projectID =24;//过滤项目下设备共有的物模型
  int64 groupID =17;//过滤分组下设备共有的物模型
  repeated int64 groupIDs =18;//过滤分组下设备共有的物模型
  string  propertyMode =19;//属性类型可用 读写类型: 1:r(只读) 2:rw(可读可写)
  int64 controlMode = 21;  //控制模式: 1: 可以群控,可以单控  2:只能单控
  string  productSceneMode =22;//产品场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
}

message CommonSchemaIndexResp{
  repeated CommonSchemaInfo list = 1;
  int64  total = 2;//总数(只有分页的时候会返回)
}


message CommonSchemaInfo{
  int64 id =1;
  int64 type = 2;         //物模型类型 1:property属性 2:event事件 3:action行为
  string identifier = 4;           //标识符
  google.protobuf.StringValue name = 5;       //功能名称
  google.protobuf.StringValue desc = 6;       //描述
  int64 required = 7;  //是否必须 1:是 2:否
  int64 isCanSceneLinkage =8;//是否支持场景联动控制
  int64 funcGroup =14; // 功能分类: 1:普通功能 2:系统功能
  int64 userPerm =15;//用户权限操作: 1:r(只读) 3:rw(可读可写)
  int64 isHistory = 10;// 是否存储历史记录
  int64 isPassword = 17;// 是否是密码类型,密码类型需要加掩码
  google.protobuf.StringValue affordance = 11;//各功能类型的详细参数定义
  string extendConfig = 12; //拓展参数
  int64 order =13;//排序
  int64 controlMode = 16;  //控制模式: 1: 可以群控,可以单控  2:只能单控
  repeated ProductCategory productCategories =3; //绑定的产品品类(如果绑定了,则该品类下的产品会自动新增并不允许删除)
}

/*********************************/


message ProductSchemaUpdateReq{
  ProductSchemaInfo info = 1;//物模型信息

}

message ProductSchemaMultiCreateReq{
  string productID = 1;
  repeated ProductSchemaInfo list = 2;//物模型信息
}

message ProductSchemaCreateReq{
  ProductSchemaInfo info = 1;//物模型信息
}

message ProductSchemaDeleteReq{
  string productID = 1; //产品id  如果为空返回所有产品的信息
  string identifier = 2;           //标识符

}

message ProductSchemaIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  string productID = 2; //产品id  必填
  int64  type = 3; //物模型类型 1:property属性 2:event事件 3:action行为
  repeated int64 types =17;
  int64  tag = 4; //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
  repeated string   identifiers = 5; //过滤标识符列表
  string name =6;//标识符名字过滤
  int64 isCanSceneLinkage =8;//是否支持场景联动控制
  int64 funcGroup =14; // 功能分类: 1:普通功能 2:系统功能
  int64 userPerm =15;//用户权限操作: 1:r(只读) 3:rw(可读可写)
  string  propertyMode =16;//属性类型可用 读写类型: 1:r(只读) 2:rw(可读可写)
  int64 controlMode = 18;  //控制模式: 1: 可以群控,可以单控  2:只能单控

}

message ProductSchemaIndexResp{
  repeated ProductSchemaInfo list = 1;
  int64  total = 2;//总数(只有分页的时候会返回)
}

message ProductSchemaInfo{
  string productID = 1; //产品id  必填
  int64 type = 2;         //物模型类型 1:property属性 2:event事件 3:action行为
  int64 tag = 3;         //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
  string identifier = 4;           //标识符
  google.protobuf.StringValue name = 5;       //功能名称
  google.protobuf.StringValue desc = 6;       //描述
  int64 required = 7;  //是否必须 1:是 2:否
  int64 isCanSceneLinkage =8;//是否支持场景联动控制
  int64 funcGroup =14; // 功能分类: 1:普通功能 2:系统功能
  int64 userPerm =15;//用户权限操作: 1:r(只读) 3:rw(可读可写)
  int64 controlMode = 16;  //控制模式: 1: 可以群控,可以单控  2:只能单控
  int64 isHistory = 10;// 是否存储历史记录
  int64 isPassword = 17;// 是否是密码类型,密码类型需要加掩码
  google.protobuf.StringValue affordance = 11;//各功能类型的详细参数定义
  string extendConfig = 12; //拓展参数
  int64 order =13;//排序
}



message ProductSchemaTslImportReq{
  string   productID = 1; //产品id
  string   tsl = 2;//物模型tsl
}

message ProductSchemaTslReadReq{
  string   productID = 1; //产品id
}

message ProductSchemaTslReadResp{
  string   tsl = 1;//物模型tsl
}





message DeviceSchemaMultiCreateReq{
  string productID = 1;
  string deviceName =3;
  repeated DeviceSchema list = 2;//物模型信息
}



message DeviceSchemaMultiDeleteReq{
  string productID = 1; //产品id  如果为空返回所有产品的信息
  string deviceName =3;
  repeated string identifiers = 2;           //标识符
}

message DeviceSchemaIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  string productID = 2; //产品id  必填
  string deviceName = 19;
  int64  type = 3; //物模型类型 1:property属性 2:event事件 3:action行为
  repeated int64 types =17;
  int64  tag = 4; //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
  repeated string   identifiers = 5; //过滤标识符列表
  string name =6;//标识符名字过滤
  int64 isCanSceneLinkage =8;//是否支持场景联动控制
  int64 funcGroup =14; // 功能分类: 1:普通功能 2:系统功能
  int64 userPerm =15;//用户权限操作: 1:r(只读) 3:rw(可读可写)
  string  propertyMode =16;//属性类型可用 读写类型: 1:r(只读) 2:rw(可读可写)
  int64 controlMode = 18;  //控制模式: 1: 可以群控,可以单控  2:只能单控
  bool withProductSchema = 20;//同时获取产品物模型
}

message DeviceSchemaIndexResp{
  repeated DeviceSchema list = 1;
  int64  total = 2;//总数(只有分页的时候会返回)
}

message DeviceSchema{
  string productID = 1; //产品id  必填
  string deviceName =17;//设备ID 必填
  int64 tag = 3;         //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
  int64 type = 2;         //物模型类型 1:property属性 2:event事件 3:action行为
  string identifier = 4;           //标识符
  google.protobuf.StringValue name = 5;       //功能名称
  google.protobuf.StringValue desc = 6;       //描述
  int64 required = 7;  //是否必须 1:是 2:否
  int64 isCanSceneLinkage =8;//是否支持场景联动控制
  int64 funcGroup =14; // 功能分类: 1:普通功能 2:系统功能
  int64 userPerm =15;//用户权限操作: 1:r(只读) 3:rw(可读可写)
  int64 controlMode = 16;  //控制模式: 1: 可以群控,可以单控  2:只能单控
  int64 isHistory = 10;// 是否存储历史记录
  int64 isPassword = 18;// 是否是密码类型,密码类型需要加掩码
  google.protobuf.StringValue affordance = 11;//各功能类型的详细参数定义
  string extendConfig = 12; //拓展参数
  int64 order =13;//排序
}

message DeviceSchemaTslReadReq{
  string   productID = 1; //产品id
  string deviceName =17;//设备ID 必填
  bool withProductSchema = 20;//同时获取产品物模型
}

message DeviceSchemaTslReadResp{
  string   tsl = 1;//物模型tsl
}


message DeviceGroupMultiSaveReq{
  string   productID = 1; //产品id
  string deviceName =2;//设备ID 必填
  repeated int64 groupIDs = 3;
  string purpose =4;
}




message DeviceProfile{
  DeviceCore device =1;
  string code =2;
  string params =3;
}


message DeviceProfileReadReq{
  DeviceCore device =1;
  string code=2;
}

message DeviceInfoCanBindReq{
  DeviceCore device =1;
}

message DeviceInfoMultiBindReq{
  repeated DeviceCore devices =1;
  int64 areaID =2;
}



message DeviceInfoMultiBindResp{
 repeated DeviceError errs =1;
}

message DeviceInfoUnbindReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
  /*
  中绑定,强制解绑参数
  对参数（deviceName、nonce、productID、timestamp）按字典序升序排序。
  将以上参数，按参数名称 = 参数值 & 参数名称 = 参数值拼接成字符串, 如："deviceName=xxx&nonce=2125656451&productID=xxx&timestamp=1687525491"。
  使用 HMAC-sha1 算法对上一步中获得的字符串进行计算，密钥取secretType   取设备的物模型密码类型的属性。
  将生成的结果使用 Base64 进行编码，即可获得最终的签名串放入 signature。
  */
  string secretType =3;//采用秘钥的类型
  string signature =4;//签名
  int64 timestamp = 5;//秒时间戳
  string signType=6;//hmacsha256 hmacsha1 hmacmd5(默认)
  int64 nonce = 7;//随机数
}
message DeviceBindTokenReadReq{
  string token =1;//配网token
}
message DeviceBindTokenInfo{
  string token =1;//配网token
  int64 status =2;//token状态 1:初始状态 2: 设备已上报
}

message DeviceInfoBindReq{
  DeviceCore device =1;
  int64 areaID =2;
  string token =3;//中绑定的token
}

message DeviceProfileIndexReq{
  DeviceCore device =1;
  repeated string codes =2;
}

message DeviceProfileIndexResp{
  repeated DeviceProfile profiles =1;
}

message DeviceCountReq {
  repeated string countTypes =1;//在线设备数:status,设备类型: deviceType
  int64  rangeType =2;//0:全部 1:area 2:group
  repeated int64  rangeIDs =3;////统计的id列表, areaID或者groupID
}

message DeviceCountResp{
  repeated DeviceCountInfo list = 1;
}

message DeviceCountInfo{
    int64 rangeID =1;
    map<string,int64> count=2;
}

message DeviceInfoCountReq {
    TimeRange timeRange =1;
    repeated int64  areaIDs =2;
    repeated int64  groupIDs =3;
}

message DeviceTypeCountReq{
  TimeRange timeRange =1;
  repeated int64  areaIDs =2;
  repeated int64  groupIDs =3;
}

message DeviceInfoCount{
  int64 online = 1;
  int64 offline = 2;
  int64 inactive = 3;
  int64 unknown = 4;
  int64 total =5;
}

message DeviceTypeCountResp{
  int64 device = 1;
  int64 gateway = 2;
  int64 subset = 3;
  int64 unknown = 4;
}



//----------------------------------------------------------------------------------------------


/*
下面是ota固件管理模块的消息
*/
message Firmware {
  int64   createdTime = 1; //创建时间 只读
  int64 firmwareID = 2;
  string productID = 3;
  string name = 4; //升级包名称
  string version = 5; //升级包版本
  int32 isDiff = 6; //是否差分包,1:整包,2:差分
  string signMethod = 7; //签名方法 MD5/SHA
  google.protobuf.StringValue   desc = 8;//描述
  google.protobuf.StringValue   extData = 9;//自定义数据
  repeated OtaFirmwareFile files = 10;//产品信息
}
message FirmwareResp{
  int64 firmwareID = 1;
}
message FirmwareInfo {
  int64   createdTime = 1; //创建时间 只读
  int64 firmwareID = 2;
  string productID = 3;
  string productName = 4;
  string name = 5; //升级包名称
  string version = 6; //升级包版本
  int32 isDiff = 7; //是否差分包,1:整包,2:差分
  string signMethod = 8; //签名方法 MD5/SHA
  google.protobuf.StringValue   desc = 9;//描述
  google.protobuf.StringValue   extData = 10;//自定义数据
  repeated OtaFirmwareFile files = 11;//产品信息
}
message OtaFirmwareFile {
  string filePath = 1;
  string name = 2;
}
message FirmwareInfoDeleteReq {
  int64 firmwareID = 1;
}
message FirmwareInfoDeleteResp {
  repeated string paths = 1;
}
message FirmwareInfoIndexReq {
  PageInfo page = 1;//分页信息 只获取一个则不填
  int64 firmwareID = 2;
  string productID = 3;
}
message FirmwareInfoIndexResp {
  repeated FirmwareInfo list = 1;//固件信息
  int64  total = 2;//总数(只有分页的时候会返回)
}
message FirmwareInfoReadReq {
  int64 firmwareID = 1;
}
message OtaFirmwareFileReq{
  int64 fileID = 1;
  string name = 2;
  string host = 3;
  string filePath = 4;
  int64 size = 5;
  string storage = 6;
  string signMethod = 7;
  string signature = 8;
}
message OtaFirmwareFileInfo{
  int64 fileID = 1;
  int64 firmwareID = 2;
  string name = 3;
  string host = 4;
  string filePath = 5;
  int64 size = 6;
  string storage = 7;
  string signMethod = 8;
  string signature = 9;
}
message OtaFirmwareFileResp{
  int64 fileID = 1;
  string name = 2;
  string host = 3;
  string filePath = 4;
  int64 size = 5;
  string storage = 6;
  //string signMethod = 7;
  string signature = 7;
}
message OtaFirmwareFileIndexReq{
  PageInfo page = 1;
  int64 firmwareID = 2;
  google.protobuf.Int64Value size = 3;
}
message OtaFirmwareFileIndexResp{
  repeated OtaFirmwareFileInfo list = 1;
  int64 total = 2;
}
message FirmwareInfoReadResp{
  int64   createdTime = 1; //创建时间 只读
  int64 firmwareID = 2;
  string productID = 3;
  string productName = 4;
  string name = 5; //升级包名称
  string version = 6; //升级包版本
  int32 isDiff = 7; //是否差分包,1:整包,2:差分
  string signMethod = 8;
  google.protobuf.StringValue   desc = 10;//描述
  google.protobuf.StringValue   extData = 11;//自定义数据
  repeated OtaFirmwareFileResp files = 12;//产品信息
}




message FirmwareFile {
  string name = 1;
  int64 size = 2;
  string filePath = 3;
  string signature = 4;
  string fileMd5 = 5;
}

message OtaFirmwareInfoCreateReq {
  string productID = 2; //产品id
  string name = 3; //固件升级包名称
  /**
  当前OTA升级包的版本号，仅支持英文字母、数字、半角句号（.）、短划线（-）和下划线（_）。长度限制为1~64个字符。
   */
  string version = 4; //版本号
  /**
  OTA升级包签名方法。取值：
  MD5（默认）：MD5签名。
  SHA256：SHA256签名。
   */
  string signMethod = 6; //签名方法
  string desc = 9; //文件描述
  /**
  OTA升级包类型。可选：
  0：整包升级包，您上传的升级包文件包含完整的升级包，将推送整包升级包给设备进行升级。
  1：差分升级包，您上传的升级包文件仅包含新版本升级包与之前版本的差异部分，仅推送差异部分给设备进行升级。
  不传入此参数，则默认值为0。
   */
  int64 isDiff = 10; //升级包类型
  string srcVersion = 12;
  int64 isNeedToVerify = 13;//是否需要验证
  google.protobuf.StringValue extra = 14;//自定义数据
  repeated string filePaths = 15;
  string moduleCode =16;//模块编码
}


message OtaFirmwareInfoUpdateReq {
  int64 id = 1; //固件id
  string name = 2; //固件升级包名称
  string desc = 3; //文件描述
  google.protobuf.StringValue extra = 14;//推送设备端的信息
}



message OtaFirmwareInfoIndexReq{
  PageInfo page = 1; //分页
  string productID = 2; //产品id
  string name = 3; //产品名称
}

message OtaFirmwareInfoIndexResp{
  repeated OtaFirmwareInfo list = 1;
  int64 total = 2;
}



message OtaFirmwareInfo{
  int64 id = 1; //固件id
  string name = 2; //固件升级包名称
  string version = 3; //版本号
  string productID = 4;//产品id
  string productName = 5; //产品名称
  int64 status = 6; //状态
  int64 createdTime = 7; //添加时间
  string signMethod = 8; //签名方式:MD5/SHA256
  string desc = 9; //文件描述
  string extra = 10; //推给设备端端消息
  repeated FirmwareFile fileList = 11; //文件列表
  int64 isDiff = 12; //整包or差包
  int64 isNeedToVerify = 13;//是否需要验证
  string moduleCode = 14;//模块编码
}





message OtaFirmwareJobInfo{
  int64 id          =1;
  int64 firmwareID  =2; // 升级包ID，升级包的唯一标识符。
  int64 type        =3; // 升级包所属产品的JobType。 验证升级包:1  批量升级:2
  int64 status   =4; // 批次状态,计划中:1  执行中:2  已完成:3  已取消:4
  int64 upgradeType =5; // 升级策略，1-静态，2-动态
  /*
    待升级版本号列表。
      发起全量升级（TargetSelection=ALL）和灰度升级（TargetSelection=GRAY）任务时，可以传入该参数。
      使用差分升级包发起全量升级和灰度升级任务时，该参数值需指定为差分升级包的待升级版本号（SrcVersion）。
      发起定向升级（TargetSelection=SPECIFIC）或分组升级（TargetSelection=GROUP）任务时，不能传入该参数。
      可以调用 QueryDeviceDetail ，查看设备 OTA 模块版本号（FirmwareVersion）。
      列表中不能有重复的版本号。
      最多可传入 10 个版本号。
  */
  repeated string srcVersions =6; // 待升级版本号列表。最多可传入10个版本号。用逗号分隔多个版本号
  int64 retryInterval =7;         // 设备升级失败后，自动重试的时间间隔，单位为分钟。 动态升级 静态升级 -1 为不重试
  int64 retryCount =8;               // 自动重试次数。1/2/5次 动态升级 静态升级
  int64 timeoutInMinutes =9;  // 设备升级超时时间，单位为分钟。 动态升级 静态升级
  int64 maximumPerMinute =10;  // 每分钟最多向多少个设备推送升级包下载URL。 动态升级 静态升级
  /*
      是否覆盖之前的升级任务。取值：

      2（默认）：不覆盖。若设备已有升级任务，则只执行已有任务。
      1：覆盖。设备只执行新的升级任务。此时 MultiModuleMode 不能传入 true。
    动态升级 静态升级
  */
    int64 isOverwriteMode =11; // 是否覆盖之前的升级任务。取值：1（不覆盖）、2（覆盖）。
  /*
        物联网平台是否主动向设备推送升级任务。
      1（默认）：是。批次任务创建完成后，物联网平台主动将升级任务，直接推送给升级范围内的在线设备。
        此时，设备仍可主动向物联网平台发起请求，来获取 OTA 升级任务信息。
      2：否。设备必须通过向物联网平台发起请求，来获取 OTA 升级任务信息。
    动态升级
  */
    int64 isNeedPush =12;  // 物联网平台是否主动向设备推送升级任务。
  /*
    如需自主控制设备 OTA 升级时，可配置此参数，通过手机 App 来控制，设备是否可进行 OTA 升级。手机 App 需您自行开发。
      2（默认）：否。直接按照 NeedPush 设置，获取 OTA 升级任务信息。
      1：是。设备无法获取 OTA 升级任务，需 App 侧确认 OTA 升级后，才能按照 NeedPush 设置，获取 OTA 升级任务信息。
  */
  int64 isNeedConfirm  =13;
  int64 targetSelection =14;//升级范围。 1：全量升级。 2：定向升级。 3：灰度升级。 4：分组升级(不做) 5: 区域升级(不做)
  OtaJobDynamicInfo dynamic =15;
  OtaJobStaticInfo static=16;
  string target =17;//分组升级和区域升级填写对应的id
  repeated string tenantCodes = 18;//指定租户
  int64 createdTime =19;
}

message OtaJobDynamicInfo{
  /*
    动态升级模式。取值范围：
    1（默认）：除了升级当前满足升级条件的设备，还将持续检查设备是否满足升级条件，对满足升级条件的设备进行升级。
    2：仅对后续上报新版本号的设备生效。
  动态升级
*/
    int64 dynamicMode =1;  //
}
message OtaJobStaticInfo{
  /*
        定向升级的设备名称列表。
        使用差分升级包进行定向升级时，要升级的设备的当前 OTA 模块版本号需与差分升级包的待升级版本号（SrcVersion）相同。
        可以调用 QueryDeviceDetail ，查看设备 OTA 模块版本号（FirmwareVersion）。
        列表中的设备所属的产品必须与升级包所属产品一致。
        列表中不能有重复的设备名称。
        最多可传入 200 个设备名称。
      静态升级
    */
 repeated string targetDeviceNames =1; // 定向升级的设备名称列表。最多可传入200个设备名称。以逗号分隔
  /*
      指定结束升级的时间。
      结束时间距发起时间（ScheduleTime）最少 1 小时，最多为 30 天。取值为 13 位毫秒值时间戳。
      不传入该参数，则表示不会强制结束升级。
    静态升级
  */
    int64 scheduleFinishTime  =2; // 指定结束升级的时间，单位为毫秒。
  /*
      指定发起 OTA 升级的时间。
      定时时间范围需为当前时间的 5 分钟后至 7 天内。取值为秒时间戳。
      不传入该参数，则表示立即升级。
    静态升级
  */
  int64 scheduleTime =3;
  int64 grayPercent = 4;//灰度的范围,小数点后两位, 1.23%为 123
}

message OtaFirmwareJobIndexReq{
  PageInfo page = 1;
  int64 firmwareID = 2;
  string productID = 3;
  string deviceName = 4;
}

message OtaFirmwareJobIndexResp{
  repeated OtaFirmwareJobInfo list = 1;
  int64 total = 2;
}

message OtaJobByDeviceIndexReq{
  PageInfo pageInfo = 1;
  int64 firmwareID = 2;
  string productID = 3;
  string deviceName = 4;
}


message OtaFirmwareDeviceIndexReq{
  PageInfo page = 1;
  int64 firmwareID =2;
  int64 jobID = 3;
  string deviceName = 4;
  string srcVersion = 7;
  int64 status = 11;//设备升级作业状态。1：待确认。 2：待推送。 3：已推送。  4：升级中。 5:升级成功 6: 升级失败. 7:已取消
  int64 isOnline =15;// 设备是否在线
}
message OtaFirmwareDeviceInfo{
  int64 id =1;
  int64 firmwareID = 2;
  int64 jobID =3 ;
  string productID = 4;
  string productName = 5;
  string deviceName = 6;
  string srcVersion = 7;
  string destVersion = 8;
  int64 step =9;// 当前的升级进度  0-100%    -1：升级失败。-2：下载失败。-3：校验失败。-4：烧写失败。
  string detail = 10;//详情
  int64 status = 11;//设备升级作业状态。1：待确认。 2：待推送。 3：已推送。  4：升级中。 5:升级成功 6: 升级失败. 7:已取消
  int64 createdTime = 13;
  int64 updatedTime = 14;
  int64 isOnline =15;//只读 设备是否在线
}
message OtaFirmwareDeviceIndexResp{
  repeated OtaFirmwareDeviceInfo list = 1;
  int64 total=2;
}

message OtaFirmwareDeviceCancelReq{
  int64 firmwareID = 1;
  int64 jobID = 2;
  repeated string deviceNames = 3;
}


message OtaFirmwareDeviceRetryReq{
  int64 firmwareID = 1;
  int64 jobID = 2;
  repeated string deviceNames = 3;
}

message OtaFirmwareDeviceConfirmReq{
  string productID =1;
  string deviceName =2;
}








