// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.1
// Source: dm.proto

package server

import (
	"context"

	"gitee.com/unitedrhino/things/service/dmsvr/internal/logic/schemamanage"
	"gitee.com/unitedrhino/things/service/dmsvr/internal/svc"
	"gitee.com/unitedrhino/things/service/dmsvr/pb/dm"
)

type SchemaManageServer struct {
	svcCtx *svc.ServiceContext
	dm.UnimplementedSchemaManageServer
}

func NewSchemaManageServer(svcCtx *svc.ServiceContext) *SchemaManageServer {
	return &SchemaManageServer{
		svcCtx: svcCtx,
	}
}

func (s *SchemaManageServer) CommonSchemaInit(ctx context.Context, in *dm.Empty) (*dm.Empty, error) {
	l := schemamanagelogic.NewCommonSchemaInitLogic(ctx, s.svcCtx)
	return l.CommonSchemaInit(in)
}

// 更新产品物模型
func (s *SchemaManageServer) CommonSchemaUpdate(ctx context.Context, in *dm.CommonSchemaUpdateReq) (*dm.Empty, error) {
	l := schemamanagelogic.NewCommonSchemaUpdateLogic(ctx, s.svcCtx)
	return l.CommonSchemaUpdate(in)
}

// 新增产品
func (s *SchemaManageServer) CommonSchemaCreate(ctx context.Context, in *dm.CommonSchemaCreateReq) (*dm.Empty, error) {
	l := schemamanagelogic.NewCommonSchemaCreateLogic(ctx, s.svcCtx)
	return l.CommonSchemaCreate(in)
}

// 删除产品
func (s *SchemaManageServer) CommonSchemaDelete(ctx context.Context, in *dm.WithID) (*dm.Empty, error) {
	l := schemamanagelogic.NewCommonSchemaDeleteLogic(ctx, s.svcCtx)
	return l.CommonSchemaDelete(in)
}

// 获取产品信息列表
func (s *SchemaManageServer) CommonSchemaIndex(ctx context.Context, in *dm.CommonSchemaIndexReq) (*dm.CommonSchemaIndexResp, error) {
	l := schemamanagelogic.NewCommonSchemaIndexLogic(ctx, s.svcCtx)
	return l.CommonSchemaIndex(in)
}

func (s *SchemaManageServer) CommonSchemaMultiImport(ctx context.Context, in *dm.CommonSchemaImportReq) (*dm.ImportResp, error) {
	l := schemamanagelogic.NewCommonSchemaMultiImportLogic(ctx, s.svcCtx)
	return l.CommonSchemaMultiImport(in)
}

func (s *SchemaManageServer) CommonSchemaMultiExport(ctx context.Context, in *dm.CommonSchemaExportReq) (*dm.CommonSchemaExportResp, error) {
	l := schemamanagelogic.NewCommonSchemaMultiExportLogic(ctx, s.svcCtx)
	return l.CommonSchemaMultiExport(in)
}
