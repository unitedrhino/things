// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/ud.proto

package ud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rule_SceneInfoCreate_FullMethodName       = "/ud.rule/sceneInfoCreate"
	Rule_SceneInfoUpdate_FullMethodName       = "/ud.rule/sceneInfoUpdate"
	Rule_SceneInfoDelete_FullMethodName       = "/ud.rule/sceneInfoDelete"
	Rule_SceneInfoIndex_FullMethodName        = "/ud.rule/sceneInfoIndex"
	Rule_SceneInfoRead_FullMethodName         = "/ud.rule/sceneInfoRead"
	Rule_SceneManuallyTrigger_FullMethodName  = "/ud.rule/sceneManuallyTrigger"
	Rule_SceneLogIndex_FullMethodName         = "/ud.rule/sceneLogIndex"
	Rule_AlarmInfoCreate_FullMethodName       = "/ud.rule/alarmInfoCreate"
	Rule_AlarmInfoUpdate_FullMethodName       = "/ud.rule/alarmInfoUpdate"
	Rule_AlarmInfoDelete_FullMethodName       = "/ud.rule/alarmInfoDelete"
	Rule_AlarmInfoIndex_FullMethodName        = "/ud.rule/alarmInfoIndex"
	Rule_AlarmInfoRead_FullMethodName         = "/ud.rule/alarmInfoRead"
	Rule_AlarmSceneMultiCreate_FullMethodName = "/ud.rule/alarmSceneMultiCreate"
	Rule_AlarmSceneDelete_FullMethodName      = "/ud.rule/alarmSceneDelete"
	Rule_AlarmSceneIndex_FullMethodName       = "/ud.rule/alarmSceneIndex"
	Rule_AlarmRecordIndex_FullMethodName      = "/ud.rule/alarmRecordIndex"
	Rule_AlarmRecordCreate_FullMethodName     = "/ud.rule/alarmRecordCreate"
	Rule_AlarmRecordDeal_FullMethodName       = "/ud.rule/alarmRecordDeal"
)

// RuleClient is the client API for Rule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleClient interface {
	// 场景
	SceneInfoCreate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*WithID, error)
	SceneInfoUpdate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*Empty, error)
	SceneInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	SceneInfoIndex(ctx context.Context, in *SceneInfoIndexReq, opts ...grpc.CallOption) (*SceneInfoIndexResp, error)
	SceneInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*SceneInfo, error)
	SceneManuallyTrigger(ctx context.Context, in *SceneManuallyTriggerReq, opts ...grpc.CallOption) (*Empty, error)
	SceneLogIndex(ctx context.Context, in *SceneLogIndexReq, opts ...grpc.CallOption) (*SceneLogIndexResp, error)
	AlarmInfoCreate(ctx context.Context, in *AlarmInfo, opts ...grpc.CallOption) (*WithID, error)
	AlarmInfoUpdate(ctx context.Context, in *AlarmInfo, opts ...grpc.CallOption) (*Empty, error)
	AlarmInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	AlarmInfoIndex(ctx context.Context, in *AlarmInfoIndexReq, opts ...grpc.CallOption) (*AlarmInfoIndexResp, error)
	AlarmInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*AlarmInfo, error)
	// 告警关联场景联动
	AlarmSceneMultiCreate(ctx context.Context, in *AlarmSceneMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	AlarmSceneDelete(ctx context.Context, in *AlarmSceneDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	AlarmSceneIndex(ctx context.Context, in *AlarmSceneIndexReq, opts ...grpc.CallOption) (*AlarmSceneIndexResp, error)
	// 告警记录
	AlarmRecordIndex(ctx context.Context, in *AlarmRecordIndexReq, opts ...grpc.CallOption) (*AlarmRecordIndexResp, error)
	AlarmRecordCreate(ctx context.Context, in *AlarmRecordCreateReq, opts ...grpc.CallOption) (*Empty, error)
	AlarmRecordDeal(ctx context.Context, in *AlarmRecordDealReq, opts ...grpc.CallOption) (*Empty, error)
}

type ruleClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleClient(cc grpc.ClientConnInterface) RuleClient {
	return &ruleClient{cc}
}

func (c *ruleClient) SceneInfoCreate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, Rule_SceneInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) SceneInfoUpdate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Rule_SceneInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) SceneInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Rule_SceneInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) SceneInfoIndex(ctx context.Context, in *SceneInfoIndexReq, opts ...grpc.CallOption) (*SceneInfoIndexResp, error) {
	out := new(SceneInfoIndexResp)
	err := c.cc.Invoke(ctx, Rule_SceneInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) SceneInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*SceneInfo, error) {
	out := new(SceneInfo)
	err := c.cc.Invoke(ctx, Rule_SceneInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) SceneManuallyTrigger(ctx context.Context, in *SceneManuallyTriggerReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Rule_SceneManuallyTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) SceneLogIndex(ctx context.Context, in *SceneLogIndexReq, opts ...grpc.CallOption) (*SceneLogIndexResp, error) {
	out := new(SceneLogIndexResp)
	err := c.cc.Invoke(ctx, Rule_SceneLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmInfoCreate(ctx context.Context, in *AlarmInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, Rule_AlarmInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmInfoUpdate(ctx context.Context, in *AlarmInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Rule_AlarmInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Rule_AlarmInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmInfoIndex(ctx context.Context, in *AlarmInfoIndexReq, opts ...grpc.CallOption) (*AlarmInfoIndexResp, error) {
	out := new(AlarmInfoIndexResp)
	err := c.cc.Invoke(ctx, Rule_AlarmInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*AlarmInfo, error) {
	out := new(AlarmInfo)
	err := c.cc.Invoke(ctx, Rule_AlarmInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmSceneMultiCreate(ctx context.Context, in *AlarmSceneMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Rule_AlarmSceneMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmSceneDelete(ctx context.Context, in *AlarmSceneDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Rule_AlarmSceneDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmSceneIndex(ctx context.Context, in *AlarmSceneIndexReq, opts ...grpc.CallOption) (*AlarmSceneIndexResp, error) {
	out := new(AlarmSceneIndexResp)
	err := c.cc.Invoke(ctx, Rule_AlarmSceneIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmRecordIndex(ctx context.Context, in *AlarmRecordIndexReq, opts ...grpc.CallOption) (*AlarmRecordIndexResp, error) {
	out := new(AlarmRecordIndexResp)
	err := c.cc.Invoke(ctx, Rule_AlarmRecordIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmRecordCreate(ctx context.Context, in *AlarmRecordCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Rule_AlarmRecordCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleClient) AlarmRecordDeal(ctx context.Context, in *AlarmRecordDealReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Rule_AlarmRecordDeal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleServer is the server API for Rule service.
// All implementations must embed UnimplementedRuleServer
// for forward compatibility
type RuleServer interface {
	// 场景
	SceneInfoCreate(context.Context, *SceneInfo) (*WithID, error)
	SceneInfoUpdate(context.Context, *SceneInfo) (*Empty, error)
	SceneInfoDelete(context.Context, *WithID) (*Empty, error)
	SceneInfoIndex(context.Context, *SceneInfoIndexReq) (*SceneInfoIndexResp, error)
	SceneInfoRead(context.Context, *WithID) (*SceneInfo, error)
	SceneManuallyTrigger(context.Context, *SceneManuallyTriggerReq) (*Empty, error)
	SceneLogIndex(context.Context, *SceneLogIndexReq) (*SceneLogIndexResp, error)
	AlarmInfoCreate(context.Context, *AlarmInfo) (*WithID, error)
	AlarmInfoUpdate(context.Context, *AlarmInfo) (*Empty, error)
	AlarmInfoDelete(context.Context, *WithID) (*Empty, error)
	AlarmInfoIndex(context.Context, *AlarmInfoIndexReq) (*AlarmInfoIndexResp, error)
	AlarmInfoRead(context.Context, *WithID) (*AlarmInfo, error)
	// 告警关联场景联动
	AlarmSceneMultiCreate(context.Context, *AlarmSceneMultiSaveReq) (*Empty, error)
	AlarmSceneDelete(context.Context, *AlarmSceneDeleteReq) (*Empty, error)
	AlarmSceneIndex(context.Context, *AlarmSceneIndexReq) (*AlarmSceneIndexResp, error)
	// 告警记录
	AlarmRecordIndex(context.Context, *AlarmRecordIndexReq) (*AlarmRecordIndexResp, error)
	AlarmRecordCreate(context.Context, *AlarmRecordCreateReq) (*Empty, error)
	AlarmRecordDeal(context.Context, *AlarmRecordDealReq) (*Empty, error)
	mustEmbedUnimplementedRuleServer()
}

// UnimplementedRuleServer must be embedded to have forward compatible implementations.
type UnimplementedRuleServer struct {
}

func (UnimplementedRuleServer) SceneInfoCreate(context.Context, *SceneInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SceneInfoCreate not implemented")
}
func (UnimplementedRuleServer) SceneInfoUpdate(context.Context, *SceneInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SceneInfoUpdate not implemented")
}
func (UnimplementedRuleServer) SceneInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SceneInfoDelete not implemented")
}
func (UnimplementedRuleServer) SceneInfoIndex(context.Context, *SceneInfoIndexReq) (*SceneInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SceneInfoIndex not implemented")
}
func (UnimplementedRuleServer) SceneInfoRead(context.Context, *WithID) (*SceneInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SceneInfoRead not implemented")
}
func (UnimplementedRuleServer) SceneManuallyTrigger(context.Context, *SceneManuallyTriggerReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SceneManuallyTrigger not implemented")
}
func (UnimplementedRuleServer) SceneLogIndex(context.Context, *SceneLogIndexReq) (*SceneLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SceneLogIndex not implemented")
}
func (UnimplementedRuleServer) AlarmInfoCreate(context.Context, *AlarmInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmInfoCreate not implemented")
}
func (UnimplementedRuleServer) AlarmInfoUpdate(context.Context, *AlarmInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmInfoUpdate not implemented")
}
func (UnimplementedRuleServer) AlarmInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmInfoDelete not implemented")
}
func (UnimplementedRuleServer) AlarmInfoIndex(context.Context, *AlarmInfoIndexReq) (*AlarmInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmInfoIndex not implemented")
}
func (UnimplementedRuleServer) AlarmInfoRead(context.Context, *WithID) (*AlarmInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmInfoRead not implemented")
}
func (UnimplementedRuleServer) AlarmSceneMultiCreate(context.Context, *AlarmSceneMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmSceneMultiCreate not implemented")
}
func (UnimplementedRuleServer) AlarmSceneDelete(context.Context, *AlarmSceneDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmSceneDelete not implemented")
}
func (UnimplementedRuleServer) AlarmSceneIndex(context.Context, *AlarmSceneIndexReq) (*AlarmSceneIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmSceneIndex not implemented")
}
func (UnimplementedRuleServer) AlarmRecordIndex(context.Context, *AlarmRecordIndexReq) (*AlarmRecordIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmRecordIndex not implemented")
}
func (UnimplementedRuleServer) AlarmRecordCreate(context.Context, *AlarmRecordCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmRecordCreate not implemented")
}
func (UnimplementedRuleServer) AlarmRecordDeal(context.Context, *AlarmRecordDealReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmRecordDeal not implemented")
}
func (UnimplementedRuleServer) mustEmbedUnimplementedRuleServer() {}

// UnsafeRuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleServer will
// result in compilation errors.
type UnsafeRuleServer interface {
	mustEmbedUnimplementedRuleServer()
}

func RegisterRuleServer(s grpc.ServiceRegistrar, srv RuleServer) {
	s.RegisterService(&Rule_ServiceDesc, srv)
}

func _Rule_SceneInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).SceneInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_SceneInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).SceneInfoCreate(ctx, req.(*SceneInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_SceneInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).SceneInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_SceneInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).SceneInfoUpdate(ctx, req.(*SceneInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_SceneInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).SceneInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_SceneInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).SceneInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_SceneInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).SceneInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_SceneInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).SceneInfoIndex(ctx, req.(*SceneInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_SceneInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).SceneInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_SceneInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).SceneInfoRead(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_SceneManuallyTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneManuallyTriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).SceneManuallyTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_SceneManuallyTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).SceneManuallyTrigger(ctx, req.(*SceneManuallyTriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_SceneLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).SceneLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_SceneLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).SceneLogIndex(ctx, req.(*SceneLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmInfoCreate(ctx, req.(*AlarmInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmInfoUpdate(ctx, req.(*AlarmInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmInfoIndex(ctx, req.(*AlarmInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmInfoRead(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmSceneMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmSceneMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmSceneMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmSceneMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmSceneMultiCreate(ctx, req.(*AlarmSceneMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmSceneDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmSceneDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmSceneDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmSceneDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmSceneDelete(ctx, req.(*AlarmSceneDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmSceneIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmSceneIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmSceneIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmSceneIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmSceneIndex(ctx, req.(*AlarmSceneIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmRecordIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmRecordIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmRecordIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmRecordIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmRecordIndex(ctx, req.(*AlarmRecordIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmRecordCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmRecordCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmRecordCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmRecordCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmRecordCreate(ctx, req.(*AlarmRecordCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rule_AlarmRecordDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmRecordDealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleServer).AlarmRecordDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rule_AlarmRecordDeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleServer).AlarmRecordDeal(ctx, req.(*AlarmRecordDealReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Rule_ServiceDesc is the grpc.ServiceDesc for Rule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ud.rule",
	HandlerType: (*RuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sceneInfoCreate",
			Handler:    _Rule_SceneInfoCreate_Handler,
		},
		{
			MethodName: "sceneInfoUpdate",
			Handler:    _Rule_SceneInfoUpdate_Handler,
		},
		{
			MethodName: "sceneInfoDelete",
			Handler:    _Rule_SceneInfoDelete_Handler,
		},
		{
			MethodName: "sceneInfoIndex",
			Handler:    _Rule_SceneInfoIndex_Handler,
		},
		{
			MethodName: "sceneInfoRead",
			Handler:    _Rule_SceneInfoRead_Handler,
		},
		{
			MethodName: "sceneManuallyTrigger",
			Handler:    _Rule_SceneManuallyTrigger_Handler,
		},
		{
			MethodName: "sceneLogIndex",
			Handler:    _Rule_SceneLogIndex_Handler,
		},
		{
			MethodName: "alarmInfoCreate",
			Handler:    _Rule_AlarmInfoCreate_Handler,
		},
		{
			MethodName: "alarmInfoUpdate",
			Handler:    _Rule_AlarmInfoUpdate_Handler,
		},
		{
			MethodName: "alarmInfoDelete",
			Handler:    _Rule_AlarmInfoDelete_Handler,
		},
		{
			MethodName: "alarmInfoIndex",
			Handler:    _Rule_AlarmInfoIndex_Handler,
		},
		{
			MethodName: "alarmInfoRead",
			Handler:    _Rule_AlarmInfoRead_Handler,
		},
		{
			MethodName: "alarmSceneMultiCreate",
			Handler:    _Rule_AlarmSceneMultiCreate_Handler,
		},
		{
			MethodName: "alarmSceneDelete",
			Handler:    _Rule_AlarmSceneDelete_Handler,
		},
		{
			MethodName: "alarmSceneIndex",
			Handler:    _Rule_AlarmSceneIndex_Handler,
		},
		{
			MethodName: "alarmRecordIndex",
			Handler:    _Rule_AlarmRecordIndex_Handler,
		},
		{
			MethodName: "alarmRecordCreate",
			Handler:    _Rule_AlarmRecordCreate_Handler,
		},
		{
			MethodName: "alarmRecordDeal",
			Handler:    _Rule_AlarmRecordDeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ud.proto",
}
