// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.1

package types

type AreaInfo struct {
	ProjectID int64  `json:"projectID,string,optional"` //项目id（只读）
	AreaID    int64  `json:"areaID,string,optional"`    //项目区域id（只读）
	AreaName  string `json:"areaName,optional"`         //项目区域名称（读写）
}

type CodeReq struct {
	Code string `json:"code"`
}

type CommonResp struct {
	ID int64 `json:"id,optional"` // id
}

type CommonSchemaCreateReq struct {
	*CommonSchemaInfo
}

type CommonSchemaDeleteReq struct {
	ID int64 `json:"id"` //产品id
}

type CommonSchemaIndexReq struct {
	Page                      *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
	Type                      int64     `json:"type,optional"` //物模型类型 1:property属性 2:event事件 3:action行为
	Types                     []int64   `json:"types,optional"`
	Identifiers               []string  `json:"identifiers,optional"` //过滤标识符列表
	ProductIDs                []string  `json:"productIDs,optional"`  //提取产品共有的物模型
	Name                      string    `json:"name,optional"`
	ProductCategoryID         int64     `json:"productCategoryID,optional"`
	ProductCategoryWithFather bool      `json:"productCategoryWithFather,optional"`
	IsCanSceneLinkage         int64     `json:"isCanSceneLinkage,optional"` //是否可以场景联动
	FuncGroup                 int64     `json:"funcGroup,optional"`         // 功能分类: 1:普通功能 2:系统功能
	UserPerm                  int64     `json:"userPerm,optional"`          //用户权限操作: 1:r(只读) 3:rw(可读可写)
	GroupID                   int64     `json:"groupID,optional"`
	GroupIDs                  []int64   `json:"groupIDs,optional"`
	ProjectID                 int64     `json:"projectID,optional,string"` //过滤项目下共有的物模型
	AreaID                    int64     `json:"areaID,optional,string"`
	AreaIDPath                string    `json:"areaIDPath,optional"`       //过滤区域id路径下有设备的产品
	PropertyMode              string    `json:"propertyMode,optional"`     //属性类型可用 读写类型: r(只读) rw(可读可写)
	ControlMode               int64     `json:"controlMode,optional"`      //控制模式: 1: 可以群控,可以单控  2:只能单控
	ProductSceneMode          string    `json:"productSceneMode,optional"` //产品场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
}

type CommonSchemaIndexResp struct {
	List []*CommonSchemaInfo `json:"list"` //分页信息,只获取一个则不填
	PageResp
}

type CommonSchemaInfo struct {
	ID                int64   `json:"id,optional"`                //产品id
	Type              int64   `json:"type,optional"`              //物模型类型 1:property属性 2:event事件 3:action行为
	Identifier        string  `json:"identifier,optional"`        //标识符
	ExtendConfig      string  `json:"extendConfig,optional"`      //拓展参数
	Name              *string `json:"name,optional"`              //功能名称
	Desc              *string `json:"desc,optional"`              //描述
	Required          int64   `json:"required,optional"`          //是否必须 1:是 2:否
	Affordance        *string `json:"affordance,optional"`        //各功能类型的详细参数定义
	IsCanSceneLinkage int64   `json:"isCanSceneLinkage,optional"` //是否可以场景联动
	FuncGroup         int64   `json:"funcGroup,optional"`         // 功能分类: 1:普通功能 2:系统功能
	UserPerm          int64   `json:"userPerm,optional"`          //用户权限操作: 1:r(只读) 3:rw(可读可写)
	IsHistory         int64   `json:"isHistory,optional"`         // 是否存储历史记录
	IsPassword        int64   `json:"isPassword,optional"`        //是否是密码类型,密码类型需要加掩码
	Order             int64   `json:"order,optional"`             // 排序
	ControlMode       int64   `json:"controlMode,optional"`       //控制模式: 1: 可以群控,可以单控  2:只能单控
}

type CommonSchemaUpdateReq struct {
	*CommonSchemaInfo
}

type CompareInt64 struct {
	CmpType string `json:"cmpType"` //"=":相等 "!=":不相等 ">":大于">=":大于等于"<":小于"<=":小于等于 "like":模糊查询
	Value   int64  `json:"value,string"`
}

type CompareString struct {
	CmpType string `json:"cmpType,optional"` //默认为=,"=":相等 "!=":不相等 ">":大于">=":大于等于"<":小于"<=":小于等于 "like":模糊查询
	Value   string `json:"value"`
}

type DateRange struct {
	Start string `json:"start,optional"` //开始时间 格式：yyyy-mm-dd
	End   string `json:"end,optional"`   //结束时间 格式：yyyy-mm-dd
}

type DevInit struct {
	TenantCode string `json:"tenantCode,optional"`       //设备创建默认分配给的租户
	ProjectID  int64  `json:"projectID,string,optional"` //设备创建默认分配给的项目
	AreaID     int64  `json:"areaID,string,optional"`    //设备创建默认分配给的区域ID
	DeptID     int64  `json:"deptID,string,optional"`    //设备创建默认分配给的部门
}

type DeviceAuth5AccessReq struct {
	Username string `json:"username,omitempty"` //用户名
	Topic    string `json:"topic,omitempty"`    //主题
	ClientID string `json:"clientID,omitempty"` //clientID
	Action   string `json:"action,omitempty"`   //操作
	Ip       string `json:"ip,omitempty"`       //访问的ip地址
}

type DeviceAuth5AccessResp struct {
	Result string `json:"result"` //验证结果 "allow" | "deny" | "ignore"
}

type DeviceAuth5LoginReq struct {
	Username    string `json:"username"`                       //用户名
	Password    string `json:"password,optional"`              //密码
	ClientID    string `json:"clientID"`                       //clientID
	Ip          string `json:"ip"`                             //访问的ip地址
	Certificate string `json:"certificate,optional,omitempty"` //客户端证书 base64后传过来
}

type DeviceAuth5LoginResp struct {
	Result      string `json:"result"`                //验证结果 "allow" | "deny" | "ignore"
	IsSuperuser bool   `json:"is_superuser,optional"` //是否为超级用户，可选 true | false，该项为空时默认为 false
}

type DeviceAuthAccessReq struct {
	Username string `json:"username,omitempty"` //用户名
	Topic    string `json:"topic,omitempty"`    //主题
	ClientID string `json:"clientID,omitempty"` //clientID
	Access   string `json:"access,omitempty"`   //操作
	Ip       string `json:"ip,omitempty"`       //访问的ip地址
}

type DeviceAuthLoginReq struct {
	Username    string `json:"username"`                       //用户名
	Password    string `json:"password,optional"`              //密码
	ClientID    string `json:"clientID"`                       //clientID
	Ip          string `json:"ip"`                             //访问的ip地址
	Certificate string `json:"certificate,optional,omitempty"` //客户端证书 base64后传过来
}

type DeviceAuthRootCheckReq struct {
	Username    string `json:"username,omitempty"`             //用户名
	Password    string `json:"password,optional,omitempty"`    //密码
	ClientID    string `json:"clientID,omitempty"`             //clientID
	Ip          string `json:"ip,omitempty"`                   //访问的ip地址
	Certificate []byte `json:"certificate,optional,omitempty"` //客户端证书
}

type DeviceBindTokenInfo struct {
	Token  string `json:"token,optional"`  //配网token
	Status int64  `json:"status,optional"` //token状态 1:初始状态 2: 设备已上报
}

type DeviceBindTokenReadReq struct {
	Token string `json:"token"` //配网token
}

type DeviceCore struct {
	ProductID   string `json:"productID"` //产品ID
	ProductName string `json:"productName,optional,omitempty"`
	DeviceName  string `json:"deviceName"` //设备名称
}

type DeviceCountInfo struct {
	RangeID int64            `json:"rangeID,string"`
	Count   map[string]int64 `json:"count"`
}

type DeviceCountReq struct {
	CountTypes []string `json:"countTypes"`       //总数:total,在线设备数:status,设备类型: deviceType
	RangeType  int64    `json:"rangeType,string"` //0:全部 1:area 2:group
	RangeIDs   []int64  `json:"rangeIDs,string"`  //统计的id列表, areaID或者groupID
}

type DeviceCountResp struct {
	List []*DeviceCountInfo `json:"list"`
}

type DeviceError struct {
	ProductID  string `json:"productID,omitempty"`  //产品id
	DeviceName string `json:"deviceName,omitempty"` //设备名称
	Code       int64  `json:"code,omitempty"`
	Msg        string `json:"msg,omitempty"`
}

type DeviceGateWayIndexReq struct {
	Page              *PageInfo `json:"page,optional"`     //分页信息 只获取一个则不填
	GateWayProductID  string    `json:"gateWayProductID"`  //产品ID
	GateWayDeviceName string    `json:"gateWaydeviceName"` //设备名称
}

type DeviceGateWayIndexResp struct {
	List []*DeviceInfo `json:"list"` //分组信息
	PageResp
}

type DeviceGateWayMultiCreateReq struct {
	GateWayProductID  string        `json:"gateWayProductID"`  //产品ID
	GateWayDeviceName string        `json:"gateWaydeviceName"` //设备名称
	List              []*DeviceCore `json:"list,optional"`     //分组tag
}

type DeviceGateWayMultiDeleteReq struct {
	GateWayProductID  string        `json:"gateWayProductID"`  //产品ID
	GateWayDeviceName string        `json:"gateWaydeviceName"` //设备名称
	List              []*DeviceCore `json:"list,optional"`     //分组tag
}

type DeviceGroupMultiSaveReq struct {
	ProductID  string  `json:"productID"`        //产品id
	DeviceName string  `json:"deviceName"`       //设备名称
	Purpose    string  `json:"purpose,optional"` //用途 不填默认为default
	GroupIDs   []int64 `json:"groupIDs,string"`
}

type DeviceInfo struct {
	ID                 int64                              `json:"id,optional,omitempty"`
	TenantCode         string                             `json:"tenantCode,optional,omitempty"`
	ProductID          string                             `json:"productID"`                 //产品id 只读
	ProjectID          int64                              `json:"projectID,string,optional"` //项目id 只读
	ProductName        string                             `json:"productName,optional,omitempty"`
	DeviceType         int64                              `json:"deviceType,optional,omitempty"`                  //设备类型:1:直连设备,2:网关,3:子设备,4:监控设备
	ProductImg         string                             `json:"productImg,optional,omitempty"`                  //产品图片
	AreaID             int64                              `json:"areaID,string,optional,omitempty"`               //项目区域id 只读
	DeviceName         string                             `json:"deviceName"`                                     //设备名称 读写
	DeviceAlias        *string                            `json:"deviceAlias,optional"`                           //设备别名 读写
	Secret             string                             `json:"secret,optional,omitempty"`                      //设备秘钥 只读
	Cert               string                             `json:"cert,optional,omitempty"`                        // 设备证书  只读
	Imei               string                             `json:"imei,optional,omitempty"`                        // IMEI号信息 只读
	Mac                string                             `json:"mac,optional,omitempty"`                         // MAC号信息 只读
	CategoryID         int64                              `json:"categoryID,optional,omitempty"`                  //产品品类
	Version            *string                            `json:"version,optional,omitempty"`                     // 固件版本  读写
	HardInfo           string                             `json:"hardInfo,optional,omitempty"`                    // 模组硬件型号 只读
	SoftInfo           string                             `json:"softInfo,optional,omitempty"`                    // 模组软件版本 只读
	MobileOperator     int64                              `json:"mobileOperator,optional,range=[0:10],omitempty"` //移动运营商:1)移动 2)联通 3)电信 4)广电
	Phone              *string                            `json:"phone,optional,omitempty"`                       //手机号
	Iccid              *string                            `json:"iccid,optional,omitempty"`                       //SIM卡卡号
	Position           *Point                             `json:"position,optional,omitempty"`                    //设备定位,默认百度坐标系
	Address            *string                            `json:"address,optional,omitempty"`                     //所在地址
	Adcode             *string                            `json:"adcode,optional,omitempty"`                      //地区编码
	Tags               []*Tag                             `json:"tags,optional,omitempty"`                        // 设备tag
	SchemaAlias        map[string]string                  `json:"schemaAlias,optional,omitempty"`                 //设备物模型别名,如果是结构体类型则key为xxx.xxx
	IsOnline           int64                              `json:"isOnline,optional,range=[0:2],omitempty"`        // 在线状态  1离线 2在线 只读
	FirstLogin         int64                              `json:"firstLogin,optional,string,omitempty"`           //激活时间 只读
	FirstBind          int64                              `json:"firstBind,optional,string,omitempty"`
	LastBind           int64                              `json:"lastBind,optional,string,omitempty"`      //最后绑定时间 只读
	LastLogin          int64                              `json:"lastLogin,optional,string,omitempty"`     //最后上线时间 只读
	ExpTime            *int64                             `json:"expTime,optional,string,omitempty"`       //到期时间
	LogLevel           int64                              `json:"logLevel,optional,range=[0:5],omitempty"` // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	Rssi               int64                              `json:"rssi,optional,omitempty"`                 //信号强度
	CreatedTime        int64                              `json:"createdTime,optional,string,omitempty"`   //创建时间 只读
	Status             int64                              `json:"status,optional,omitempty"`               //设备状态 1-未激活，2-在线，3-离线 4-异常(频繁上下线,告警中)
	IsEnable           int64                              `json:"isEnable,optional,omitempty"`             //是否启用
	WithProperties     map[string]*DeviceInfoWithProperty `json:"withProperties,optional,omitempty"`       //获取的属性列表,如果不传withProperty,则不会返回
	ProtocolConf       []*Tag                             `json:"protocolConf,optional,omitempty"`         //协议配置
	SubProtocolConf    []*Tag                             `json:"subProtocolConf,optional,omitempty"`      //子协议配置
	Profiles           map[string]string                  `json:"profiles,optional,omitempty"`
	Owner              *UserCore                          `json:"owner,optional,omitempty"`
	RatedPower         int64                              `json:"ratedPower,optional,omitempty"`
	NetType            int64                              `json:"netType,optional,range=[0:10],omitempty"` //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN,7:wifi+ble,8:有线网,9:4G+BLE
	NeedConfirmVersion string                             `json:"needConfirmVersion,optional,omitempty"`   //待确认升级的版本
	UserID             int64                              `json:"userID,string,optional,omitempty"`
	LastIp             string                             `json:"lastIp,optional,omitempty"`            //最后登录的ip地址
	Sort               int64                              `json:"sort,optional,omitempty"`              //排序
	DeviceImg          string                             `json:"deviceImg,omitempty,optional"`         //设备图片
	IsUpdateDeviceImg  bool                               `json:"isUpdateDeviceImg,omitempty,optional"` //只有这个参数为true的时候才会更新设备图片,传参为设备图片的file path
	File               string                             `json:"file,omitempty,optional"`              //设备相关文件
	IsUpdateFile       bool                               `json:"isUpdateFile,omitempty,optional"`      //只有这个参数为true的时候才会更新设备文件,传参为设备文件的file path
	Desc               *string                            `json:"desc,optional,omitempty"`
	Distributor        *IDPath                            `json:"distributor,optional,omitempty"`
	Gateway            *DeviceInfo                        `json:"gateway,optional,omitempty"`         //子设备绑定的网关信息,只读
	Area               *AreaInfo                          `json:"area,optional,omitempty"`            //区域信息,只读
	Groups             []*GroupCore                       `json:"groups,optional,omitempty"`          //所在分组信息,只读
	GroupPurpose       string                             `json:"groupPurpose,optional,omitempty"`    //更新的时候使用,将设备该用途下的分组进行更新
	GroupIDs           []int64                            `json:"groupIDs,optional,string,omitempty"` //如果要更新分组,必须填写groupPurpose
}

type DeviceInfoBindReq struct {
	Device DeviceCore `json:"device"`
	AreaID int64      `json:"areaID,optional,string"`
	Token  string     `json:"token,optional"` //配网token,中绑定需要
}

type DeviceInfoCanBindReq struct {
	Device DeviceCore `json:"device"`
}

type DeviceInfoDeleteReq struct {
	ProductID  string `json:"productID"`  //产品id 只读
	DeviceName string `json:"deviceName"` //设备名称 读写
}

type DeviceInfoIndexReq struct {
	Page               *PageInfo                 `json:"page,optional"` //分页信息 只获取一个则不填
	TenantCode         string                    `json:"tenantCode,optional"`
	ProductID          string                    `json:"productID,optional"`            //产品id 为空时获取所有产品
	ProductIDs         []string                  `json:"productIDs,optional"`           //产品id 为空时获取所有产品
	DeviceName         string                    `json:"deviceName,optional"`           //过滤条件:模糊查询 设备名
	DeviceNames        []string                  `json:"deviceNames,optional"`          //过滤条件:精准查询 设备名
	ExpTime            *CompareInt64             `json:"expTime,optional"`              //到期时间
	RatedPower         *CompareInt64             `json:"ratedPower,optional"`           //额定功率:单位w/h
	Rssi               *CompareInt64             `json:"rssi,optional"`                 //信号强度
	DeviceAlias        string                    `json:"deviceAlias,optional"`          //过滤条件:模糊查询 设备别名
	DeviceTypes        []int64                   `json:"deviceTypes,optional"`          //设备类型:1:设备,2:网关,3:子设备//设备类型:1:设备,2:网关,3:子设备
	Position           *Point                    `json:"position,optional"`             //设备定位,默认百度坐标系，用于获取以该点为中心，Range范围内的设备列表，与Range连用
	Range              int64                     `json:"range,optional"`                //过滤条件:距离坐标点固定范围内的设备 单位：米
	Tags               []*Tag                    `json:"tags,optional"`                 // key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
	WithProperties     []string                  `json:"withProperties,optional"`       //如果不为nil,如果为空,获取设备所有最新属性 如果传了属性列表,则会返回属性列表,如果没有匹配的则不会返回
	WithProfiles       []string                  `json:"withProfiles,optional"`         //
	AreaIDs            []int64                   `json:"areaIDs,string,optional"`       //项目区域ids
	AreaIDPath         string                    `json:"areaIDPath,optional"`           //区域路径过滤
	IsOnline           int64                     `json:"isOnline,optional,range=[0:2]"` // 在线状态过滤  1离线 2在线
	ProductCategoryID  int64                     `json:"productCategoryID,optional"`
	ProductCategoryIDs []int64                   `json:"productCategoryIDs,optional"`
	WithShared         int64                     `json:"withShared,optional,range=[0:2]"`  // 过滤分享的设备1: 同时获取分享的设备 2:只获取分享的设备
	WithCollect        int64                     `json:"withCollect,optional,range=[0:2]"` // 过滤收藏的设备(这里只获取收藏的设备) 1: 同时获取收藏的设备 2:只获取收藏的设备
	Versions           []string                  `json:"versions,optional"`
	NotVersion         string                    `json:"notVersion,optional"`
	Gateway            *DeviceCore               `json:"gateway,optional"` //过滤网关
	GroupID            int64                     `json:"groupID,optional,string"`
	NotGroupID         int64                     `json:"notGroupID,optional,string"`
	ParentGroupID      int64                     `json:"parentGroupID,optional,string"`
	GroupPurpose       string                    `json:"groupPurpose,optional"` //设备分组用途 不填默认为default
	GroupName          string                    `json:"groupName,optional"`
	NotAreaID          int64                     `json:"notAreaID,optional,string"`
	Devices            []*DeviceCore             `json:"devices,optional"`
	Status             int64                     `json:"status,optional"` //设备状态 1-未激活，2-在线，3-离线 4-异常(频繁上下线,告警中)
	Statuses           []int64                   `json:"statuses,optional"`
	WithOwner          bool                      `json:"withOwner,optional"`   //同时获取拥有人的信息
	WithGateway        bool                      `json:"withGateway,optional"` //同时返回子设备绑定的网关信息
	HasOwner           int64                     `json:"hasOwner,optional"`    //是否被人拥有,1为是 2为否
	UserID             int64                     `json:"userID,string,optional"`
	NetType            int64                     `json:"netType,optional,range=[0:8]"` //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN,7:wifi+ble,8:有线网
	WithArea           bool                      `json:"withArea,optional"`            //同时返回区域信息
	IsOnlyCore         bool                      `json:"isOnlyCore,optional"`          //只返回核心信息
	Iccid              string                    `json:"iccid,optional,omitempty"`     //SIM卡卡号
	WithGroups         []string                  `json:"withGroups,optional"`
	Property           map[string]*CompareString `json:"property,optional"` //设备最新属性过滤,key为属性的id,如果是结构体则key为 aaa.bbb 数组为aaa.1
}

type DeviceInfoIndexResp struct {
	List []*DeviceInfo `json:"list"` //设备信息
	PageResp
}

type DeviceInfoMultiBindReq struct {
	Devices []*DeviceCore `json:"devices"`
	AreaID  int64         `json:"areaID,optional,string"`
}

type DeviceInfoMultiBindResp struct {
	Errs []*DeviceError `json:"errs"`
}

type DeviceInfoMultiUpdateReq struct {
	Devices    []*DeviceCore `json:"devices"`
	AreaID     int64         `json:"areaID,string,optional"`
	RatedPower int64         `json:"ratedPower,optional,omitempty"`
}

type DeviceInfoReadReq struct {
	ProductID      string   `json:"productID,optional"`      //产品id 为空时获取所有产品
	DeviceName     string   `json:"deviceName"`              //设备名称 读写
	WithProperties []string `json:"withProperties,optional"` //如果不为nil,如果为空,获取设备所有最新属性 如果传了属性列表,则会返回属性列表
	WithProfiles   []string `json:"withProfiles,optional"`   //
	WithOwner      bool     `json:"withOwner,optional"`      //同时获取拥有人的信息
	WithGateway    bool     `json:"withGateway,optional"`    //同时返回子设备绑定的网关信息
	WithArea       bool     `json:"withArea,optional"`       //同时返回区域信息
}

type DeviceInfoSaveReq struct {
	ProductID      string            `json:"productID"`                           //产品id 只读
	DeviceName     string            `json:"deviceName"`                          //设备名称 读写
	DeviceAlias    *string           `json:"deviceAlias,optional"`                //设备别名 读写
	LogLevel       int64             `json:"logLevel,optional,range=[0:5]"`       // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	Address        *string           `json:"address,optional"`                    //所在地址
	Position       *Point            `json:"position,optional"`                   //设备定位,默认百度坐标系
	Tags           []*Tag            `json:"tags,optional"`                       // 设备tag
	Phone          *string           `json:"phone,optional"`                      //手机号
	Iccid          *string           `json:"iccid,optional"`                      //SIM卡卡号
	UserID         int64             `json:"userID,string,optional"`              // 用户id
	MobileOperator int64             `json:"mobileOperator,optional,range=[0:4]"` //移动运营商:1)移动 2)联通 3)电信 4)广电
	AreaID         int64             `json:"areaID,string,optional"`              //项目区域id 只读（1: root节点 2: 未分类节点 其他:子节点）
	SchemaAlias    map[string]string `json:"schemaAlias,optional"`                //设备物模型别名,如果是结构体类型则key为xxx.xxx
}

type DeviceInfoTransferReq struct {
	Device       *DeviceCore   `json:"device,optional"`
	Devices      []*DeviceCore `json:"devices,optional"`
	SrcProjectID int64         `json:"srcProjectID,string,optional"` //指定原来的项目ID,不写使用头
	TransferTo   int64         `json:"transferTo"`                   //转让给: 1: 某个人 2: 自己的某个项目
	UserID       int64         `json:"userID,string,optional"`
	ProjectID    int64         `json:"projectID,string,optional"`
	AreaID       int64         `json:"areaID,string,optional"` //转移到项目时指定区域ID
	IsCleanData  int64         `json:"isCleanData"`            //是否清除数据:1是 2否
}

type DeviceInfoUnbindReq struct {
	ProductID  string `json:"productID"`           //产品id 只读
	DeviceName string `json:"deviceName"`          //设备名称 读写
	SecretType string `json:"secretType,optional"` //采用秘钥的类型
	Signature  string `json:"signature,optional"`  //签名
	Timestamp  int64  `json:"timestamp,optional"`  //秒时间戳
	SignType   string `json:"signType,optional"`   //hmacsha256 hmacsha1 hmacmd5(默认)
	Nonce      int64  `json:"nonce,optional"`      //随机数
}

type DeviceInfoWithProperty struct {
	Value     string `json:"value"`            //获取到的值
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
}

type DeviceInteractEdgeSendReq struct {
	Handle        string `path:"handle"`                //对应 mqtt topic的第一个 thing ota config 等等
	Type          string `path:"type"`                  //操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
	ProductID     string `header:"productID,optional"`  //如果网关类型要操作子设备的topic,需要指定子设备的产品ID和设备ID,如果没有填写则默认是账号里的设备
	DeviceName    string `header:"deviceName,optional"` //如果网关类型要操作子设备的topic,需要指定子设备的产品ID和设备ID,如果没有填写则默认是账号里的设备
	Authorization string `header:"authorization"`       //basic auth  账号密码使用mqtt格式生成的账号密码
}

type DeviceInteractEdgeSendResp struct {
}

type DeviceInteractMultiSendPropertyMsg struct {
	ProductID  string `json:"productID"`  //产品id
	DeviceName string `json:"deviceName"` //设备名
	Code       int64  `json:"code"`       //设备返回状态码
	Msg        string `json:"msg"`        //返回状态
	MsgToken   string `json:"msgToken"`   //调用id
	SysCode    int64  `json:"sysCode"`    //系统错误码
	SysMsg     string `json:"sysMsg"`     //系统错误信息
}

type DeviceInteractMultiSendPropertyReq struct {
	AreaID        int64         `json:"areaID,string,optional"`  //项目区域id,传了优先从项目区域中获取设备列表
	AreaIDPath    string        `json:"areaIDPath,optional"`     //根据区域路径控制设备
	GroupID       int64         `json:"groupID,string,optional"` //分组ID,传了会从分组下获取设备
	ProductID     string        `json:"productID,optional"`      //产品id
	DeviceNames   []string      `json:"deviceNames,optional"`    //设备名列表
	Devices       []*DeviceCore `json:"devices,optional"`        //如果是不同的产品,则传这个字段,上面两个参数填了优先使用
	IsAsync       bool          `json:"isAsync,optional"`        //是否异步操作 异步情况通过获取接口来获取
	SyncTimeout   int64         `json:"syncTimeout,optional"`    //同步超时时间(单位:秒,不填默认3秒)
	ShadowControl int64         `json:"shadowControl,optional"`  //设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
	Data          string        `json:"data"`                    //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
}

type DeviceInteractMultiSendPropertyResp struct {
	List []*DeviceInteractMultiSendPropertyMsg `json:"list"` //批量设备返回结果列表
}

type DeviceInteractPropertyGetReportMultiSendReq struct {
	DataIDs     []string      `json:"dataIDs,optional"`        //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
	ProductID   string        `json:"productID,optional"`      //产品id
	DeviceNames []string      `json:"deviceNames,optional"`    //设备名
	Devices     []*DeviceCore `json:"devices,optional"`        //如果是不同的产品,则传这个字段,上面两个参数填了优先使用
	AreaID      int64         `json:"areaID,string,optional"`  //控制一个区域的设备
	AreaIDPath  string        `json:"areaIDPath,optional"`     //根据区域路径控制设备
	GroupID     int64         `json:"groupID,string,optional"` //控制一个组的设备
}

type DeviceInteractPropertyGetReportMultiSendResp struct {
	List []*DeviceInteractPropertyGetReportSendMsg `json:"list"` //批量设备返回结果列表
}

type DeviceInteractPropertyGetReportSendMsg struct {
	Code       int64  `json:"code"`       //设备返回状态码
	Msg        string `json:"msg"`        //返回状态
	MsgToken   string `json:"msgToken"`   //调用id
	Timestamp  int64  `json:"timestamp"`  //上报时间戳(毫秒时间戳)
	Params     string `json:"params"`     //获取到的值
	ProductID  string `json:"productID"`  //产品id
	DeviceName string `json:"deviceName"` //设备名
	SysCode    int64  `json:"sysCode"`    //系统错误码
	SysMsg     string `json:"sysMsg"`     //系统错误信息
}

type DeviceInteractPropertyGetReportSendReq struct {
	ProductID  string   `json:"productID"`        //产品id (必填)
	DeviceName string   `json:"deviceName"`       //设备名(必填)
	DataIDs    []string `json:"dataIDs,optional"` //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
}

type DeviceInteractPropertyGetReportSendResp struct {
	Code      int64  `json:"code"`      //设备返回状态码
	Msg       string `json:"msg"`       //返回状态
	MsgToken  string `json:"msgToken"`  //调用id
	Timestamp int64  `json:"timestamp"` //上报时间戳(毫秒时间戳)
	Params    string `json:"params"`    //获取到的值
}

type DeviceInteractRespReadReq struct {
	ProductID  string `json:"productID"`  //产品id
	DeviceName string `json:"deviceName"` //设备名
	MsgToken   string `json:"msgToken"`   //调用id
}

type DeviceInteractSendActionReq struct {
	ProductID   string      `json:"productID"`            //产品id
	DeviceName  string      `json:"deviceName"`           //设备名
	ActionID    string      `json:"actionID"`             //产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
	InputParams string      `json:"inputParams,optional"` //输入参数
	IsAsync     bool        `json:"isAsync,optional"`     //是否异步操作 异步情况通过获取接口来获取
	Option      *SendOption `json:"option,optional"`      //异步重试选项
}

type DeviceInteractSendActionResp struct {
	MsgToken     string `json:"msgToken"`     //调用id
	OutputParams string `json:"outputParams"` //输出参数 注意：此字段可能返回 null，表示取不到有效值。
	Msg          string `json:"msg"`          //返回状态
	Code         int64  `json:"code"`         //设备返回状态码
}

type DeviceInteractSendMsgReq struct {
	Topic   string `json:"topic"`   //发送的topic
	Payload string `json:"payload"` //发送的数据
}

type DeviceInteractSendPropertyReq struct {
	ProductID     string       `json:"productID"`              //产品id
	DeviceName    string       `json:"deviceName"`             //设备名
	Data          string       `json:"data"`                   //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
	IsAsync       bool         `json:"isAsync,optional"`       //是否异步操作 异步情况通过获取接口来获取
	SyncTimeout   int64        `json:"syncTimeout,optional"`   //同步超时时间(单位:秒,不填默认3秒)
	ShadowControl int64        `json:"shadowControl,optional"` //设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发 3:只修改云端的值 4:只修改云端的值并记录操作日志
	WithProfile   *WithProfile `json:"withProfile,optional"`   //同时修改该设备的配置信息
}

type DeviceInteractSendPropertyResp struct {
	Code     int64  `json:"code"`     //设备返回状态码
	Msg      string `json:"msg"`      //返回状态
	MsgToken string `json:"msgToken"` //调用id
}

type DeviceModuleVersion struct {
	ID          int64  `json:"id,optional,omitempty"`
	ProductID   string `json:"productID,optional"` //产品id 只读
	ProductName string `json:"productName,optional"`
	ModuleCode  int64  `json:"moduleCode,optional"`
	Version     string `json:"version,optional"`
}

type DeviceModuleVersionIndexReq struct {
	Page        *PageInfo `json:"page,optional"`      //分页信息 只获取一个则不填
	ProductID   string    `json:"productID,optional"` //产品id 只读
	ProductName string    `json:"productName,optional"`
	ModuleCode  int64     `json:"moduleCode,optional"`
}

type DeviceModuleVersionIndexResp struct {
	List []*DeviceModuleVersion `json:"list"` //设备信息
	PageResp
}

type DeviceModuleVersionReadReq struct {
	ID          int64  `json:"id,optional,omitempty"`
	ProductID   string `json:"productID,optional"` //产品id 只读
	ProductName string `json:"productName,optional"`
	ModuleCode  int64  `json:"moduleCode,optional"`
}

type DeviceMoveReq struct {
	Old        *DeviceCore `json:"old"`                 //需要转移的设备
	New        *DeviceCore `json:"new"`                 //转移的对象
	WithTarget []string    `json:"withTarget,optional"` //设备配置-profile,schemaAlias:profile
}

type DeviceMsgAbnormalLogIndexReq struct {
	ProductCategoryID int64              `json:"productCategoryID,optional"`          //只有管理员有权限
	ProjectID         int64              `json:"projectID,string,optional,omitempty"` //只有管理员有权限
	AreaID            int64              `json:"areaID,string,optional,omitempty"`    //只有管理员有权限
	AreaIDPath        string             `json:"areaIDPath,optional,omitempty"`       //只有管理员有权限
	AreaIDs           []int64            `json:"areaIDs,string,optional,omitempty"`   //只有管理员有权限
	BelongGroup       map[string]IDsInfo `json:"belongGroup,optional,omitempty"`      //key是group的purpose, value是里面包含的分组id 只有partitionBy 传该参数的时候才会返回
	ProductID         string             `json:"productID,optional"`                  //产品id
	DeviceName        string             `json:"deviceName,optional"`                 //设备名
	TimeStart         int64              `json:"timeStart,string,optional"`           //获取时间的开始(毫秒时间戳)
	TimeEnd           int64              `json:"timeEnd,string,optional"`             //时间的结束(毫秒时间戳)
	Page              *PageInfo          `json:"page,optional"`                       //分页信息
	Type              string             `json:"type,optional"`                       //异常类型
	Action            int64              `json:"action,optional"`                     //触发1 还是解除2
}

type DeviceMsgAbnormalLogIndexResp struct {
	List []*DeviceMsgAbnormalLogInfo `json:"list"` //数据
	PageResp
}

type DeviceMsgAbnormalLogInfo struct {
	Timestamp  int64  `json:"timestamp,string,optional"` //发生时间戳(毫秒时间戳)
	ProductID  string `json:"productID,optional"`        //
	DeviceName string `json:"deviceName,optional"`       //
	Action     int64  `json:"action,optional"`           //触发1 还是解除2
	Type       string `json:"type,optional"`             //异常类型
	TraceID    string `json:"traceID,optional"`          //服务器端事务id
	Reason     string `json:"reason,optional"`           //原因
}

type DeviceMsgEventLogIndexReq struct {
	DeviceNames []string  `json:"deviceNames,optional"`                //设备名(不填获取产品下所有设备)
	ProductID   string    `json:"productID,optional"`                  //产品id 获取产品id下的所有设备信息
	DataID      string    `json:"dataID,optional,omitempty"`           //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
	TimeStart   int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd     int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page        *PageInfo `json:"page,optional"`                       //分页信息
	Types       []string  `json:"types,optional"`                      //类型 事件类型: 信息:info  告警alert  故障:fault
}

type DeviceMsgEventLogIndexResp struct {
	List []*DeviceMsgEventLogInfo `json:"list"` //数据
	PageResp
}

type DeviceMsgEventLogInfo struct {
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
	Type      string `json:"type,omitempty"`   //类型 事件类型: 信息:info  告警alert  故障:fault
	DataID    string `json:"dataID"`           //获取的具体属性值
	Params    string `json:"params,omitempty"` //获取到的值
}

type DeviceMsgHubLogIndexReq struct {
	DeviceName string    `json:"deviceName,optional,omitempty"`       //设备名
	ProductID  string    `json:"productID,optional,omitempty"`        //产品id 获取产品id下的所有设备信息
	TimeStart  int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd    int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page       *PageInfo `json:"page,optional"`                       //分页信息
	Actions    []string  `json:"actions,optional"`                    //过滤操作类型 connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
	Topics     []string  `json:"topics,optional"`                     //过滤主题
	Content    string    `json:"content,optional"`                    //过滤内容
	RequestID  string    `json:"requestID,optional"`                  //过滤请求ID
}

type DeviceMsgHubLogIndexResp struct {
	List []*DeviceMsgHubLogInfo `json:"list"` //数据
	PageResp
}

type DeviceMsgHubLogInfo struct {
	Timestamp   int64  `json:"timestamp,string"`
	Action      string `json:"action"` //connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
	RequestID   string `json:"requestID"`
	TraceID     string `json:"traceID"`
	Topic       string `json:"topic"`
	Content     string `json:"content"`
	ResultCode  int64  `json:"resultCode,string"`
	RespPayload string `json:"respPayload"`
}

type DeviceMsgPropertyIndexResp struct {
	List []*DeviceMsgPropertyLogInfo `json:"list"` //数据
	PageResp
}

type DeviceMsgPropertyLogIndexReq struct {
	TenantCode        string             `json:"tenantCode,optional,omitempty"`       //只有管理员有权限
	ProjectID         int64              `json:"projectID,string,optional,omitempty"` //只有管理员有权限
	AreaID            int64              `json:"areaID,string,optional,omitempty"`    //只有管理员有权限
	AreaIDPath        string             `json:"areaIDPath,optional,omitempty"`       //只有管理员有权限
	AreaIDs           []int64            `json:"areaIDs,string,optional,omitempty"`   //只有管理员有权限
	BelongGroup       map[string]IDsInfo `json:"belongGroup,optional,omitempty"`      //key是group的purpose, value是里面包含的分组id 只有partitionBy 传该参数的时候才会返回
	DeviceName        string             `json:"deviceName,optional,omitempty"`       //设备名(不填获取产品下所有设备)
	DeviceNames       []string           `json:"deviceNames,optional,omitempty"`      //设备名(不填获取产品下所有设备,只有管理员有权限)
	ProductID         string             `json:"productID,omitempty,optional"`        //产品id 获取产品id下的所有设备信息
	ProductCategoryID int64              `json:"productCategoryID,optional"`          //产品品类id,通用物模型有效
	DataID            string             `json:"dataID,omitempty"`                    //获取的具体标识符的数据
	TimeStart         int64              `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd           int64              `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page              *PageInfo          `json:"page,optional"`                       //分页信息
	Interval          int64              `json:"interval,optional"`                   //间隔 如果这个值不为零值 则时间的开始和结束必须有效及聚合函数不应该为空
	IntervalUnit      string             `json:"intervalUnit,optional"`               //间隔单位 a (毫秒,默认), d (天), h (小时), m (分钟), n (月), s (秒), u (微秒), w (周), y (年)  则时间的开始和结束必须有效及聚合函数不应该为空
	ArgFunc           string             `json:"argFunc,optional"`                    //聚合函数 avg:平均值 first:第一个参数 last:最后一个参数 count:总数 twa: 时间加权平均函数 参考: https://docs.taosdata.com/reference/taos-sql/function/#apercentile
	Fill              string             `json:"fill,optional"`                       //指定窗口区间数据缺失的情况下的填充模式 参考: https://docs.taosdata.com/reference/taos-sql/distinguished/#fill-%E5%AD%90%E5%8F%A5
	Order             int64              `json:"order,optional"`                      //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
	PartitionBy       string             `json:"partitionBy,optional"`                //切分数据,可以填写deviceName
	NoFirstTs         bool               `json:"noFirstTs,optional"`                  //时间戳填充不填充最早的值,聚合模式使用
}

type DeviceMsgPropertyLogInfo struct {
	Timestamp   int64              `json:"timestamp,string"`                    //发生时间戳
	DeviceName  string             `json:"deviceName,omitempty"`                //设备名称
	DataID      string             `json:"dataID"`                              //获取的具体属性值
	Value       string             `json:"value,omitempty"`                     //获取到的值
	TenantCode  string             `json:"tenantCode,optional,omitempty"`       //只有partitionBy 传该参数的时候才会返回
	ProjectID   int64              `json:"projectID,string,optional,omitempty"` //只有partitionBy 传该参数的时候才会返回
	AreaID      int64              `json:"areaID,string,optional,omitempty"`    //只有partitionBy 传该参数的时候才会返回
	AreaIDPath  string             `json:"areaIDPath,optional,omitempty"`       //只有partitionBy 传该参数的时候才会返回
	AreaIDs     []int64            `json:"areaIDs,string,optional,omitempty"`   //只有partitionBy 传该参数的时候才会返回
	BelongGroup map[string]IDsInfo `json:"belongGroup,optional,omitempty"`      //key是group的purpose, value是里面包含的分组id 只有partitionBy 传该参数的时候才会返回
}

type DeviceMsgPropertyLogLatestIndexReq struct {
	DeviceName string   `json:"deviceName,omitempty"`       //设备名
	ProductID  string   `json:"productID,omitempty"`        //产品id 获取产品id下的所有设备信息
	DataIDs    []string `json:"dataIDs,optional,omitempty"` //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

type DeviceMsgPropertyLogMultiIndexReq struct {
	Reqs []*DeviceMsgPropertyLogIndexReq `json:"reqs"`
}

type DeviceMsgPropertyMultiIndexResp struct {
	Lists [][]*DeviceMsgPropertyLogInfo `json:"lists"` //数据
}

type DeviceMsgSdkIndexResp struct {
	List []*DeviceMsgSdkInfo `json:"list"` //数据
	PageResp
}

type DeviceMsgSdkInfo struct {
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
	Loglevel  int64  `json:"loglevel"`         //日志级别 1)关闭 2)错误 3)告警 4)信息 5)调试
	Content   string `json:"content"`          //具体内容
}

type DeviceMsgSdkLogIndexReq struct {
	DeviceName string    `json:"deviceName,omitempty"`                //设备名
	ProductID  string    `json:"productID,omitempty"`                 //产品id 获取产品id下的所有设备信息
	TimeStart  int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd    int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	LogLevel   int       `json:"logLevel,optional"`                   //等级
	Page       *PageInfo `json:"page,optional"`                       //分页信息
}

type DeviceMsgSendLogIndexReq struct {
	ProductCategoryID int64     `json:"productCategoryID,optional"`          //只有管理员有权限
	ProjectID         int64     `json:"projectID,string,optional,omitempty"` //只有管理员有权限
	AreaID            int64     `json:"areaID,string,optional,omitempty"`    //只有管理员有权限
	AreaIDPath        string    `json:"areaIDPath,optional,omitempty"`       //只有管理员有权限
	AreaIDs           []int64   `json:"areaIDs,string,optional,omitempty"`   //只有管理员有权限
	GroupIDPaths      []string  `json:"groupIDPaths,optional,omitempty"`     //只有管理员有权限
	GroupIDs          []int64   `json:"groupIDs,optional,omitempty"`         //只有管理员有权限
	ProductID         string    `json:"productID,optional"`                  //产品id
	DeviceName        string    `json:"deviceName,optional"`                 //设备名
	TimeStart         int64     `json:"timeStart,string,optional"`           //获取时间的开始(毫秒时间戳)
	TimeEnd           int64     `json:"timeEnd,string,optional"`             //时间的结束(毫秒时间戳)
	Page              *PageInfo `json:"page,optional"`                       //分页信息
	UserID            int64     `json:"userID,string,optional"`
	Actions           []string  `json:"actions,optional"`
	ResultCode        int64     `json:"resultCode,optional"` //请求结果状态,200为成功
	DataID            string    `json:"dataID,optional"`     //模糊查询
	DataIDs           []string  `json:"dataIDs,optional"`    //精确查询
	WithUser          bool      `json:"withUser,optional"`   //同时返回用户信息
}

type DeviceMsgSendLogIndexResp struct {
	List []*DeviceMsgSendLogInfo `json:"list"` //数据
	PageResp
}

type DeviceMsgSendLogInfo struct {
	Timestamp  int64     `json:"timestamp,string,optional"` //发生时间戳(毫秒时间戳)
	Account    string    `json:"account,optional"`
	UserID     int64     `json:"userID,string,optional"` //
	ProductID  string    `json:"productID,optional"`     //
	DeviceName string    `json:"deviceName,optional"`    //
	Action     string    `json:"action,optional"`        //操作类型 propertySend:属性控制 actionSend:操作控制 propertyGetReportSend:获取最新属性请求
	DataID     string    `json:"dataID,optional"`        //identify
	TraceID    string    `json:"traceID,optional"`       //服务器端事务id
	Content    string    `json:"content,optional"`       //操作的内容
	ResultCode int64     `json:"resultCode,optional"`    //请求结果状态,200为成功
	User       *UserCore `json:"user,optional,omitempty"`
}

type DeviceMsgShadowIndex struct {
	DataID            string `json:"dataID"`            //属性id
	Value             string `json:"value"`             //获取到的值
	UpdatedDeviceTime int64  `json:"updatedDeviceTime"` //更新到设备的时间
}

type DeviceMsgShadowIndexResp struct {
	List []*DeviceMsgShadowIndex `json:"list"`
}

type DeviceMsgStatusLogIndexReq struct {
	ProductID  string    `json:"productID,optional"`        //产品id
	DeviceName string    `json:"deviceName,optional"`       //设备名
	TimeStart  int64     `json:"timeStart,string,optional"` //获取时间的开始(毫秒时间戳)
	TimeEnd    int64     `json:"timeEnd,string,optional"`   //时间的结束(毫秒时间戳)
	Page       *PageInfo `json:"page,optional"`             //分页信息
	Status     int64     `json:"status,optional"`           //在线状态
}

type DeviceMsgStatusLogIndexResp struct {
	List []*DeviceMsgStatusLogInfo `json:"list"` //数据
	PageResp
}

type DeviceMsgStatusLogInfo struct {
	Timestamp  int64  `json:"timestamp,optional,string"` //发生时间戳(毫秒时间戳)
	Status     int64  `json:"status,optional"`           //过滤请求ID
	DeviceName string `json:"deviceName,omitempty"`
	ProductID  string `json:"productID,omitempty"`
}

type DeviceMultiImportErrdata struct {
	Row int64  `json:"row"` //错误所在表格行
	Msg string `json:"msg"` //详细错误信息
}

type DeviceMultiImportReq struct {
}

type DeviceMultiImportResp struct {
	Total   int64                   `json:"total"`   //当前表格数据量
	Headers *DeviceMultiImportRow   `json:"headers"` //表格表头信息
	Errdata []*DeviceMultiImportRow `json:"errdata"` //批量导入错误清单
}

type DeviceMultiImportRow struct {
	Row               int64  `json:"row"`               //【提示】数据所在表格行
	ProductID         string `json:"productID"`         //【必填】产品ID
	DeviceName        string `json:"deviceName"`        //【必填】设备名称
	DeviceAlias       string `json:"deviceAlias"`       //【选填】设备别名
	Secret            string `json:"secret"`            //【选填】设备秘钥
	GatewayProductID  string `json:"gatewayProductID"`  //【选填】绑定的网关产品ID(网关的设备ID全局唯一可不填)
	GatewayDeviceName string `json:"gatewayDeviceName"` //【选填】绑定的网关设备ID
	LogLevel          string `json:"logLevel"`          //【选填】日志级别（关闭/错误/告警/信息/调试）
	Tags              string `json:"tags"`              //【选填】设备标签（格式k1:v1;k2:v2;...）
	Position          string `json:"position"`          //【选填】设备位置百度坐标（格式:经,纬）
	Address           string `json:"address"`           //【选填】设备所在详细地址
	Tips              string `json:"tips"`              //【提示】模板使用提示
}

type DeviceMultiUpdateImportError struct {
	Device DeviceCore `json:"device"`
	Code   int64      `json:"code"`
	Msg    string     `json:"msg"`
}

type DeviceMultiUpdateImportReq struct {
}

type DeviceMultiUpdateImportResp struct {
	Total       int64                          `json:"total"`       //导入总接口数
	ErrCount    int64                          `json:"errCount"`    //失败数
	ErrDetail   []DeviceMultiUpdateImportError `json:"errDetail"`   //失败详情
	IgnoreCount int64                          `json:"ignoreCount"` //忽略数
	SuccCount   int64                          `json:"succCount"`   //成功数
}

type DeviceProfile struct {
	Device DeviceCore `json:"device"`
	Code   string     `json:"code"`
	Params string     `json:"params"`
}

type DeviceProfileIndexReq struct {
	Device *DeviceCore `json:"device"`
	Codes  []string    `json:"codes,optional"`
}

type DeviceProfileIndexResp struct {
	Profiles []*DeviceProfile `json:"profiles,omitempty"`
}

type DeviceProfileReadReq struct {
	Device DeviceCore `json:"device"`
	Code   string     `json:"code"`
}

type DeviceRegisterReq struct {
	ProductID  string `json:"productID"`  //产品id 只读
	DeviceName string `json:"deviceName"` //设备名称 读写
	Nonce      int64  `json:"nonce"`      //随机数
	Timestamp  int64  `json:"timestamp"`  //秒级时间戳
	Signature  string `json:"signature"`  //签名信息
}

type DeviceRegisterResp struct {
	Len     int64  `json:"len"` //payload加密前信息的长度
	Payload string `json:"payload"`
}

type DeviceSchema struct {
	ProductID         string  `json:"productID"` //产品id 只读
	DeviceName        string  `json:"deviceName"`
	Type              int64   `json:"type"`                       //物模型类型 1:property属性 2:event事件 3:action行为
	Tag               int64   `json:"tag"`                        //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
	Identifier        string  `json:"identifier"`                 //标识符
	ExtendConfig      string  `json:"extendConfig,optional"`      //拓展参数
	Name              *string `json:"name,optional"`              //功能名称
	Desc              *string `json:"desc,optional"`              //描述
	Required          int64   `json:"required,optional"`          //是否必须 1:是 2:否
	Affordance        *string `json:"affordance,optional"`        //各功能类型的详细参数定义
	IsCanSceneLinkage int64   `json:"isCanSceneLinkage,optional"` //是否可以场景联动
	FuncGroup         int64   `json:"funcGroup,optional"`         // 功能分类: 1:普通功能 2:系统功能
	UserPerm          int64   `json:"userPerm,optional"`          //用户权限操作: 1:r(只读) 3:rw(可读可写)
	IsHistory         int64   `json:"isHistory,optional"`         // 是否存储历史记录
	IsPassword        int64   `json:"isPassword,optional"`        //是否是密码类型,密码类型需要加掩码
	Order             int64   `json:"order,optional"`             // 排序
	ControlMode       int64   `json:"controlMode,optional"`       //控制模式: 1: 可以群控,可以单控  2:只能单控
}

type DeviceSchemaDeleteReq struct {
	ProductID  string `json:"productID"` //产品id
	DeviceName string `json:"deviceName"`
	Identifier string `json:"identifier"` //标识符
}

type DeviceSchemaIndexReq struct {
	Page              *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
	ProductID         string    `json:"productID"`     //产品id
	DeviceName        string    `json:"deviceName"`
	Type              int64     `json:"type,optional"` //物模型类型 1:property属性 2:event事件 3:action行为
	Types             []int64   `json:"types,optional"`
	Tag               int64     `json:"tag,optional"`         //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
	Identifiers       []string  `json:"identifiers,optional"` //过滤标识符列表
	Name              string    `json:"name,optional"`
	IsCanSceneLinkage int64     `json:"isCanSceneLinkage,optional"` //是否可以场景联动
	FuncGroup         int64     `json:"funcGroup,optional"`         // 功能分类: 1:普通功能 2:系统功能
	UserPerm          int64     `json:"userPerm,optional"`          //用户权限操作: 1:r(只读) 3:rw(可读可写)
	PropertyMode      string    `json:"propertyMode,optional"`      //属性类型可用 读写类型: 1:r(只读) 2:rw(可读可写)
	ControlMode       int64     `json:"controlMode,optional"`       //控制模式: 1: 可以群控,可以单控  2:只能单控
	WithProductSchema bool      `json:"withProductSchema,optional"` //同时获取产品物模型
}

type DeviceSchemaIndexResp struct {
	List []*DeviceSchema `json:"list"` //分页信息,只获取一个则不填
	PageResp
}

type DeviceSchemaMultiCreateReq struct {
	ProductID  string          `json:"productID"` //产品id
	DeviceName string          `json:"deviceName"`
	List       []*DeviceSchema `json:"list"` //分页信息,只获取一个则不填
}

type DeviceSchemaMultiDeleteReq struct {
	ProductID   string   `json:"productID"` //产品id
	DeviceName  string   `json:"deviceName"`
	Identifiers []string `json:"identifiers"` //物模型ID列表
}

type DeviceSchemaTslReadReq struct {
	ProductID  string `json:"productID"` //产品id
	DeviceName string `json:"deviceName"`
}

type DeviceSchemaTslReadResp struct {
	Tsl string `json:"tsl"` //物模型tsl
}

type DeviceSchemaUpdateReq struct {
	*DeviceSchema
}

type DeviceShareInfo struct {
	ProductID   string `json:"productID"` //产品ID
	ProductName string `json:"productName,optional,omitempty"`
	ProductImg  string `json:"productImg,optional,omitempty"` //产品图片
	DeviceName  string `json:"deviceName"`                    //设备名称
	DeviceAlias string `json:"deviceAlias,optional"`          //设备别名 读写
}

type FileCore struct {
	Path     string `json:"path,optional,omitempty"`     //文件的路径
	IsUpdate bool   `json:"isUpdate,optional,omitempty"` //如果要更新该文件,则需要将该参数置为true
}

type FirmwareCreateReq struct {
	ProductID      string   `json:"productID"`
	Name           string   `json:"name"`
	Version        string   `json:"version"`
	SignMethod     string   `json:"signMethod"`
	Desc           string   `json:"desc,optional"`
	IsDiff         int64    `json:"isDiff"`
	SrcVersion     string   `json:"srcVersion"`
	IsNeedToVerify int64    `json:"isNeedToVerify"`
	Extra          string   `json:"extra,optional"`
	ModuleCode     string   `json:"moduleCode,optional"`
	FilePaths      []string `json:"filePaths"`
}

type FirmwareFile struct {
	Name      string `json:"name"`
	FilePath  string `json:"filePath"`
	FileMd5   string `json:"fileMd5"`
	Signature string `json:"signature"`
}

type FirmwareIndexReq struct {
	Page      *PageInfo `json:"page,optional"`
	ProductID string    `json:"productID,optional"`
	Name      string    `json:"name,optional"`
}

type FirmwareIndexResp struct {
	List []FirmwareInfo `json:"list"`
	PageResp
}

type FirmwareInfo struct {
	ID             int64           `json:"id"`             //固件id
	Name           string          `json:"name"`           //固件升级包名称
	Version        string          `json:"version"`        //版本号
	ProductID      string          `json:"productID"`      //产品id
	ProductName    string          `json:"productName"`    //产品名称
	Status         int64           `json:"status"`         //状态
	CreatedTime    int64           `json:"createdTime"`    //添加时间
	SignMethod     string          `json:"signMethod"`     //签名方式:MD5/SHA256
	Desc           string          `json:"desc"`           //文件描述
	Extra          string          `json:"extra"`          //推给设备端端消息
	IsDiff         int64           `json:"isDiff"`         //整包or差包
	IsNeedToVerify int64           `json:"isNeedToVerify"` //是否需要验证
	ModuleCode     string          `json:"moduleCode"`     //模块编码
	FileList       []*FirmwareFile `json:"fileList"`       //文件列表
}

type FirmwareUpdateReq struct {
	ID    int64   `json:"id"`
	Name  string  `json:"name,optional"`
	Desc  string  `json:"desc,optional"`
	Extra *string `json:"extra,optional"`
}

type GatewayCanBindIndexReq struct {
	Gateway *DeviceCore `json:"gateway"` //如果是不同的产品,则传这个字段,上面两个参数填了优先使用
}

type GatewayCanBindIndexResp struct {
	SubDevices  []*DeviceCore `json:"subDevices"`  //如果是不同的产品,则传这个字段,上面两个参数填了优先使用
	UpdatedTime int64         `json:"updatedTime"` //
}

type GatewayGetFoundReq struct {
	ProductID  string `json:"productID"`  //产品id (必填)
	DeviceName string `json:"deviceName"` //设备名(必填)
}

type GatewayNotifyBindSendReq struct {
	Gateway    *DeviceCore   `json:"gateway"`    //如果是不同的产品,则传这个字段,上面两个参数填了优先使用
	SubDevices []*DeviceCore `json:"subDevices"` //如果是不同的产品,则传这个字段,上面两个参数填了优先使用
}

type GroupCore struct {
	ID       int64  `json:"id"`
	ParentID int64  `json:"parentID"`
	Name     string `json:"name"`
	Purpose  string `json:"purpose"` //用途
}

type GroupDeviceMultiDeleteReq struct {
	GroupID int64         `json:"groupID"`       //分组ID
	List    []*DeviceCore `json:"list,optional"` //分组tag
}

type GroupDeviceMultiSaveReq struct {
	GroupID int64         `json:"groupID"`       //分组ID
	List    []*DeviceCore `json:"list,optional"` //分组tag
}

type GroupInfo struct {
	ID          int64             `json:"id,optional"`                         //分组ID
	IDPath      string            `json:"idPath,optional"`                     //分组ID路径
	Purpose     string            `json:"purpose,optional"`                    //用途 不填默认为default
	ParentID    int64             `json:"parentID,optional"`                   //父组ID
	ProjectID   int64             `json:"projectID,string,optional,omitempty"` //项目ID
	AreaID      int64             `json:"areaID,string,optional,omitempty"`    //区域ID
	Name        string            `json:"name,optional"`                       //分组名称
	ProductID   string            `json:"productID,optional"`                  //产品ID
	ProductName string            `json:"productName,optional,omitempty"`      //产品ID
	CreatedTime int64             `json:"createdTime,string,optional"`         //创建时间
	Desc        string            `json:"desc,optional,omitempty"`             //分组描述
	DeviceCount int64             `json:"deviceCount,optional,omitempty"`      //设备数量统计
	IsLeaf      int64             `json:"isLeaf,optional"`
	Tags        []*Tag            `json:"tags,optional,omitempty"`  //分组tag
	Files       map[string]string `json:"files,optional,omitempty"` //key 是用途, value是文件的路径,
	Devices     []*DeviceCore     `json:"devices,optional,omitempty"`
	Children    []*GroupInfo      `json:"children,optional,omitempty"`
}

type GroupInfoIndexReq struct {
	Page      *PageInfo `json:"page,optional"`          //分页信息 只获取一个则不填
	AreaID    int64     `json:"areaID,string,optional"` //区域ID
	ParentID  int64     `json:"parentID,optional"`      //父组ID
	ProductID string    `json:"productID,optional"`     //产品ID
	Name      string    `json:"name,optional"`          //分组名称
	Tags      []*Tag    `json:"tags,optional"`          //分组tag
	Purpose   string    `json:"purpose,optional"`       //用途 不填默认为default
}

type GroupInfoIndexResp struct {
	List []*GroupInfo `json:"list"` //分组信息
	PageResp
}

type GroupInfoReadReq struct {
	ID           int64  `json:"id"`               // id
	Purpose      string `json:"purpose,optional"` //用途 不填默认为default
	WithChildren bool   `json:"withChildren,optional"`
}

type IDPath struct {
	ID     int64  `json:"id,optional"`
	IDPath string `json:"idPath,optional"`
}

type IDsInfo struct {
	IDs     []int64  `json:"ids,string,optional,omitempty"`
	IDPaths []string `json:"idPaths,optional,omitempty"`
}

type OrderBy struct {
	Field string `json:"field,optional"` ////排序的字段名
	Sort  int64  `json:"sort,optional"`  //排序方式：1 从小到大, 2 从大到小
}

type OtaFirmwareCreateReq struct {
	Name       string             `json:"name"`               //升级包名称
	ProductID  string             `json:"productID"`          //产品id
	Version    string             `json:"version"`            //升级包版本
	IsDiff     int32              `json:"isDiff" enums:"1,2"` //是否差分包,1:整包,2:差分
	SignMethod string             `json:"signMethod"`         //签名方法 MD5/SHA@256
	Desc       *string            `json:"desc"`               //描述
	ExtData    *string            `json:"extData"`            //自定义数据
	Files      []*OtaFirmwareFile `json:"files"`              //升级包附件列表，最多支持上传20个文件，总文件大小不能超过1,000 MB。
}

type OtaFirmwareDeviceCancelReq struct {
	FirmwareID  int64    `json:"firmwareID"`
	JobID       int64    `json:"jobID"`
	DeviceNames []string `json:"deviceNames"`
}

type OtaFirmwareDeviceConfirmReq struct {
	ProductID  string `json:"productID"`
	DeviceName string `json:"deviceName"`
}

type OtaFirmwareDeviceIndexReq struct {
	Page       *PageInfo `json:"page,optional"`       // 分页信息
	JobID      int64     `json:"jobID,optional"`      // 作业ID
	FirmwareID int64     `json:"firmwareID,optional"` // 任务状态
	DeviceName string    `json:"deviceName,optional"` // 设备名称
	SrcVersion string    `json:"srcVersion,optional"`
	Status     int64     `json:"status,optional"`   //设备升级作业状态。1：待确认。 2：待推送。 3：已推送。  4：升级中。 5:升级成功 6: 升级失败. 7:已取消
	IsOnline   int64     `json:"isOnline,optional"` //设备是否在线
}

type OtaFirmwareDeviceIndexResp struct {
	List []*OtaFirmwareDeviceInfo `json:"list"` // OTA任务信息列表
	PageResp
}

type OtaFirmwareDeviceInfo struct {
	ID          int64  `json:"id"`
	FirmwareID  int64  `json:"firmwareID"`
	JobID       int64  `json:"jobID"`
	ProductID   string `json:"productID"`
	ProductName string `json:"productName"`
	DeviceName  string `json:"deviceName"`
	SrcVersion  string `json:"srcVersion"`
	DestVersion string `json:"destVersion"`
	Step        int64  `json:"step"`
	Detail      string `json:"detail"`
	Status      int64  `json:"status"`
	CreatedTime int64  `json:"createdTime"`
	UpdatedTime int64  `json:"updatedTime"`
	IsOnline    int64  `json:"isOnline,optional"` //设备是否在线
}

type OtaFirmwareDeviceInfoResp struct {
	Versions string `json:"versions"`
}

type OtaFirmwareDeviceRetryReq struct {
	FirmwareID  int64    `json:"firmwareID"`
	JobID       int64    `json:"jobID"`
	DeviceNames []string `json:"deviceNames"`
}

type OtaFirmwareFile struct {
	Filepath string `json:"filePath"` //附件地址，上传附件后接口应该返回
	Name     string `json:"name"`     //附件原名，上传附件后接口应该返回
}

type OtaFirmwareFileInfo struct {
	Uri       string `json:"uri"`       //附件地址
	Name      string `json:"name"`      //附件原名
	Size      int64  `json:"size"`      //文件大小
	Signature string `json:"signature"` //签名值
}

type OtaFirmwareIndex struct {
	ID          int64  `json:"id"`                 //固件升级包编号
	Name        string `json:"name"`               //升级包名称
	Version     string `json:"version"`            //升级包版本
	ProductID   string `json:"productID"`          //产品id
	ProductName string `json:"productName"`        //产品名称
	IsDiff      int32  `json:"isDiff" enums:"1,2"` //是否差分包,1:整包,2:差分
	CreatedTime int64  `json:"createdTime"`        //创建时间 只读
	SignMethod  string `json:"signMethod"`         //签名方法
}

type OtaFirmwareIndexReq struct {
	ProductID string    `json:"productID,optional,omitempty"`        //产品id 获取产品id下的所有升级包
	TimeStart int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd   int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page      *PageInfo `json:"page,optional"`                       //分页信息
}

type OtaFirmwareIndexResp struct {
	List []*OtaFirmwareIndex `json:"list"` //数据
	PageResp
}

type OtaFirmwareInfo struct {
	FirmwareID  int64   `json:"firmwareID"`         //固件升级包编号
	Name        string  `json:"name"`               //升级包名称
	Version     string  `json:"version"`            //升级包版本
	ProductID   string  `json:"productID"`          //产品id
	ProductName string  `json:"productName"`        //产品名称
	IsDiff      int32   `json:"isDiff" enums:"1,2"` //是否差分包,1:整包,2:差分
	CreatedTime int64   `json:"createdTime"`        //创建时间 只读
	SignMethod  string  `json:"signMethod"`         //签名方法
	Desc        *string `json:"desc"`               //描述
	ExtData     *string `json:"extData"`            //自定义数据
}

type OtaFirmwareInfoUpdateReq struct {
	ID      int64   `json:"id"`      //固件升级包编号
	Name    string  `json:"name"`    //升级包名称
	Desc    *string `json:"desc"`    //描述
	ExtData *string `json:"extData"` //自定义数据
}

type OtaFirmwareJobDynamic struct {
	DynamicMode int64 `json:"dynamicMode,optional,range=[0:2]"` //
}

type OtaFirmwareJobIndexReq struct {
	Page       *PageInfo `json:"page"`       // 分页信息
	FirmwareID int64     `json:"firmwareID"` // 固件ID
}

type OtaFirmwareJobInfo struct {
	ID               int64    `json:"id,optional"`
	FirmwareID       int64    `json:"firmwareID,optional"`                  // 升级包ID，升级包的唯一标识符。
	Type             int64    `json:"type,optional,range=[0:2]"`            // 升级包所属产品的JobType。 验证升级包:1  批量升级:2
	Status           int64    `json:"status,optional,range=[0:4]"`          // 批次状态,计划中:1  执行中:2  已完成:3  已取消:4
	UpgradeType      int64    `json:"upgradeType,optional,range=[0:2]"`     // 升级策略，1-静态，2-动态
	SrcVersions      []string `json:"srcVersions,optional"`                 // 待升级版本号列表。最多可传入10个版本号。用逗号分隔多个版本号
	RetryInterval    int64    `json:"retryInterval,optional"`               // 设备升级失败后，自动重试的时间间隔，单位为分钟。 动态升级 静态升级
	RetryCount       int64    `json:"retryCount,optional"`                  // 自动重试次数。1/2/5次 动态升级 静态升级
	TimeoutInMinutes int64    `json:"timeoutInMinutes,optional"`            // 设备升级超时时间，单位为分钟。 动态升级 静态升级
	MaximumPerMinute int64    `json:"maximumPerMinute,optional"`            // 每分钟最多向多少个设备推送升级包下载URL。 动态升级 静态升级
	IsOverwriteMode  int64    `json:"isOverwriteMode,optional,range=[0:2]"` // 是否覆盖之前的升级任务。取值：2（不覆盖）、1（覆盖）。
	IsNeedPush       int64    `json:"isNeedPush,optional,range=[0:2]"`      // 物联网平台是否主动向设备推送升级任务。
	IsNeedConfirm    int64    `json:"isNeedConfirm,optional,range=[0:2]"`
	Target           string   `json:"target,optional"`                      // 分组升级和区域升级填写对应的id
	TargetSelection  int64    `json:"targetSelection,optional,range=[0:4]"` //升级范围。 1：全量升级。 2：定向升级。 3：灰度升级。 4：分组升级(不做) 5: 区域升级(不做)
	TenantCodes      []string `json:"tenantCodes,optional"`                 //指定租户
	CreatedTime      int64    `json:"createdTime,optional"`
	OtaFirmwareJobDynamic
	OtaFirmwareJobStatic
}

type OtaFirmwareJobInfoIndexResp struct {
	List []*OtaFirmwareJobInfo `json:"list"` // OTA作业信息列表
	PageResp
}

type OtaFirmwareJobStatic struct {
	TargetDeviceNames  []string `json:"targetDeviceNames,optional"`  // 定向升级的设备名称列表。最多可传入200个设备名称。以逗号分隔
	ScheduleFinishTime int64    `json:"scheduleFinishTime,optional"` // 指定结束升级的时间，单位为毫秒。
	ScheduleTime       int64    `json:"scheduleTime,optional"`
	GrayPercent        int64    `json:"grayPercent,optional"` //灰度的范围,小数点后两位, 1.23%为 123
}

type OtaFirmwareReadResp struct {
	ID             int64                  `json:"id"`                 //固件升级包编号
	Name           string                 `json:"name"`               //升级包名称
	Version        string                 `json:"version"`            //升级包版本
	ProductID      string                 `json:"productID"`          //产品id
	ProductName    string                 `json:"productName"`        //产品名称
	IsDiff         int32                  `json:"isDiff" enums:"1,2"` //是否差分包,1:整包,2:差分
	IsNeedToVerify int64                  `json:"isNeedToVerify"`
	CreatedTime    int64                  `json:"createdTime"` //创建时间 只读
	SignMethod     string                 `json:"signMethod"`  //签名方法
	Desc           *string                `json:"desc"`        //描述
	ExtData        *string                `json:"extData"`     //自定义数据
	Files          []*OtaFirmwareFileInfo `json:"files"`
}

type OtaModuleInfo struct {
	ID          int64  `json:"id,optional"`
	Code        string `json:"code,optional"`
	Name        string `json:"name,optional"`
	Desc        string `json:"desc,optional"`
	ProductID   string `json:"productID,optional"`
	CreatedTime int64  `json:"createdTime,optional"`
}

type OtaModuleInfoIndexReq struct {
	Page      *PageInfo `json:"page,optional"` // 分页信息
	Name      string    `json:"name,optional"`
	ProductID string    `json:"productID,optional"`
}

type OtaModuleInfoIndexResp struct {
	List []*OtaModuleInfo `json:"list"` // OTA作业信息列表
	PageResp
}

type PageInfo struct {
	Page   int64      `json:"page,optional" form:"page,optional"` // 页码
	Size   int64      `json:"size,optional" form:"size,optional"` // 每页大小
	Orders []*OrderBy `json:"orders,optional"`                    //排序
}

type PageResp struct {
	Page     int64 `json:"page,optional"`     // 页码
	PageSize int64 `json:"pageSize,optional"` // 每页大小
	Total    int64 `json:"total"`
}

type Point struct {
	Longitude float64 `json:"longitude,range=[0:180]"` //经度
	Latitude  float64 `json:"latitude,range=[0:90]"`   //纬度
}

type ProductCategory struct {
	ID              int64              `json:"id,optional"`
	ParentID        int64              `json:"parentID,optional"`
	IDPath          []int64            `json:"idPath,optional"` //只读
	Name            string             `json:"name,optional"`
	Desc            *string            `json:"desc,optional"`                      //描述
	HeadImg         string             `json:"headImg,optional"`                   // 用户头像
	IsUpdateHeadImg bool               `json:"isUpdateHeadImg,omitempty,optional"` // 用户头像
	IsLeaf          int64              `json:"isLeaf,optional"`
	DeviceCount     int64              `json:"deviceCount,optional"` //设备数量
	Children        []*ProductCategory `json:"children,optional"`
}

type ProductCategoryIndexReq struct {
	Page      *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
	Name      string    `json:"name,optional"` //过滤产品名称
	ParentID  int64     `json:"parentID,optional"`
	IDs       []int64   `json:"ids,optional"`              //id过滤
	ProjectID int64     `json:"projectID,string,optional"` //项目id,只获取项目下有设备的
}

type ProductCategoryIndexResp struct {
	List  []*ProductCategory `json:"list"`           //产品信息
	Total int64              `json:"total,optional"` //拥有的总数
	Num   int64              `json:"num,optional"`   //返回的数量
}

type ProductCategorySchemaIndexReq struct {
	ProductCategoryID int64 `json:"productCategoryID"`
	WithFather        bool  `json:"withFather,optional"`
}

type ProductCategorySchemaIndexResp struct {
	Identifiers []string `json:"identifiers"`
}

type ProductCategorySchemaMultiSaveReq struct {
	ProductCategoryID int64    `json:"productCategoryID"`
	Identifiers       []string `json:"identifiers"`
}

type ProductConfig struct {
	ProductID string  `json:"productID"`
	DevInit   DevInit `json:"devInit,optional"` //设备初始化配置
}

type ProductCustom struct {
	ProductID       string                `json:"productID"`
	TransformScript *string               `json:"transformScript,optional"` //协议转换脚本
	LoginAuthScript *string               `json:"loginAuthScript,optional"` //登录认证脚本
	ScriptLang      int64                 `json:"scriptLang,optional"`      //脚本语言类型（默认JavaScript） 1:JavaScript 2:lua 3:python
	CustomTopics    []*ProductCustomTopic `json:"customTopics,optional"`    //自定义topic数组
}

type ProductCustomReadReq struct {
	ProductID string `json:"productID"` //产品id 只读
}

type ProductCustomTopic struct {
	Topic     string `json:"topic"`     //自定义主题需要以$custom 并包含设备名称{deviceName}及产品名称{productID}
	Direction int64  `json:"direction"` //1:上行 2:下行 3:双向
}

type ProductCustomUi struct {
	Path       string `json:"path"`             //前端路径
	Version    int64  `json:"version,optional"` //版本号
	IsUpdateUi bool   `json:"isUpdateUi,optional,omitempty"`
}

type ProductInfo struct {
	CreatedTime        int64                       `json:"createdTime,optional,string"`           //创建时间 只读
	ProductID          string                      `json:"productID,optional"`                    //产品id 只读
	ProductName        string                      `json:"productName,optional"`                  //产品名称
	ProductImg         string                      `json:"productImg,optional"`                   //产品图片
	IsUpdateProductImg bool                        `json:"isUpdateProductImg,omitempty,optional"` //只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
	AuthMode           int64                       `json:"authMode,optional,range=[0:2]"`         //认证方式:1:账密认证,2:秘钥认证
	DeviceType         int64                       `json:"deviceType,optional,range=[0:4]"`       //设备类型:1:直连设备,2:网关,3:子设备,4:监控设备
	DeviceSchemaMode   int64                       `json:"deviceSchemaMode,optional,range=[0:4]"` // 设备物模型模式:1:手动创建,2:设备自动创建 3: 设备自动创建及上报无定义自动创建 4: 设备自动创建及上报无定义自动创建(数字类型只使用浮点)
	CategoryID         int64                       `json:"categoryID,optional"`                   //产品品类
	NetType            int64                       `json:"netType,optional,range=[0:10]"`         //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN,7:wifi+ble,8:有线网,9:4G+BLE
	ProtocolCode       string                      `json:"protocolCode,optional"`                 //协议code,默认urMqtt,设备下发只会发送给主协议  urMqtt,urHttp,wumei,aliyun,huaweiyun,tuya
	SubProtocolCode    *string                     `json:"subProtocolCode,optional"`              //子协议,主协议和子协议传输类型必须不相同, 设备控制下发只会发送给主协议, 当设备是音视频设备但是控制协议需要单独走的时候就可以把主协议定义为普通协议,子协议定义为音视频协议,这样就能实现音视频走音视频协议,控制走子协议
	AutoRegister       int64                       `json:"autoRegister,optional,range=[0:3]"`     //动态注册:1:关闭,2:打开,3:打开并自动创建设备
	Secret             string                      `json:"secret,optional"`                       //动态注册产品秘钥 只读
	TrialTime          int64                       `json:"trialTime,optional,string"`             //试用时间(单位为天,为0不限制)
	Desc               *string                     `json:"desc,optional,optional"`                //描述
	Tags               []*Tag                      `json:"tags,optional,optional"`                // 产品tag
	SceneMode          string                      `json:"sceneMode,optional,optional"`           //场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
	Status             int64                       `json:"status,optional,optional"`              //产品状态 1:启用 2:禁用 3:开发中
	BindLevel          int64                       `json:"bindLevel,optional,optional"`           //绑定级别: 1:强绑定(默认,只有用户解绑之后才能绑定) 2:中绑定(可以通过token强制解绑设备) 3:弱绑定(app可以内部解绑被绑定的设备)
	ProtocolConf       []*Tag                      `json:"protocolConf,optional,omitempty"`       //协议配置
	SubProtocolConf    []*Tag                      `json:"subProtocolConf,optional,omitempty"`    //子协议协议配置
	Protocol           *ProtocolInfo               `json:"protocol,optional,omitempty"`
	Category           *ProductCategory            `json:"category,optional,omitempty"`
	Config             *ProductConfig              `json:"config,optional,omitempty"`   //产品配置,只有管理员会返回该字段
	CustomUi           map[string]*ProductCustomUi `json:"customUi,optional,omitempty"` //自定义ui,key是端的类型(web-client  mini-client) value是以下类型的对象{version:123(版本号,只读),isUpdateUi:bool(是否更新ui),path:string(前端路径,如果需要修改,需要将isUpdateUi置为true并在这个参数中传入压缩包的filePath)}
}

type ProductInfoDeleteReq struct {
	ProductID string `json:"productID"` //产品id 只读
}

type ProductInfoIndexReq struct {
	Page         *PageInfo `json:"page,optional"`                   //分页信息,只获取一个则不填
	ProductName  string    `json:"productName,optional"`            //过滤产品名称
	DeviceType   int64     `json:"deviceType,optional,range=[0:3]"` //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
	DeviceTypes  []int64   `json:"deviceTypes,optional"`            //设备类型:1:设备,2:网关,3:子设备//设备类型:1:设备,2:网关,3:子设备
	ProductIDs   []string  `json:"productIDs,optional"`             //过滤产品id列表
	Tags         []*Tag    `json:"tags,optional"`                   // key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
	ProtocolCode string    `json:"protocolCode,optional"`           //协议code
	ProtocolType string    `json:"protocolType,optional"`           //协议类型
	WithProtocol bool      `json:"withProtocol,optional"`           //同时返回协议详情
	WithCategory bool      `json:"withCategory,optional"`           //同时返回品类详情
	SceneModes   []string  `json:"sceneModes,optional"`             //场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
	SceneMode    string    `json:"sceneMode,optional"`              //场景模式 读写类型: r(只读) rw(可读可写) none(不参与场景)
	Status       int64     `json:"status,optional"`                 //产品状态 1:启用 2:禁用 3:开发中
	Statuses     []int64   `json:"statuses,optional"`               //产品状态 1:启用 2:禁用 3:开发中
	NetType      int64     `json:"netType,optional,range=[0:10]"`   //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN,7:wifi+ble,8:有线网,9:4G+BLE
	ProjectID    int64     `json:"projectID,string,optional"`       //项目id,只获取项目下有设备的
	AreaID       int64     `json:"areaID,string,optional"`          //过滤区域下有设备的产品
	AreaIDPath   string    `json:"areaIDPath,optional"`             //过滤区域id路径下有设备的产品
	CategoryIDs  []int64   `json:"categoryIDs,optional"`            //产品品类
}

type ProductInfoIndexResp struct {
	List []*ProductInfo `json:"list"` //产品信息
	PageResp
}

type ProductInfoReadReq struct {
	ProductID    string `json:"productID"`             //产品id
	WithProtocol bool   `json:"withProtocol,optional"` //同时返回协议详情
	WithCategory bool   `json:"withCategory,optional"` //同时返回品类详情
}

type ProductInitReq struct {
	ProductIDs []string `json:"productIDs,optional"` //产品id 只读
}

type ProductRemoteConfig struct {
	ID         int64  `json:"id"`         //配置编号
	Content    string `json:"content"`    //配置内容
	CreateTime string `json:"createTime"` //创建时间
}

type ProductRemoteConfigCreateReq struct {
	ProductID string `json:"productID"` //产品id
	Content   string `json:"content"`   //配置内容
}

type ProductRemoteConfigIndexReq struct {
	ProductID string    `json:"productID"`     //产品id
	Page      *PageInfo `json:"page,optional"` //分页信息
}

type ProductRemoteConfigIndexResp struct {
	List []*ProductRemoteConfig `json:"list"` //产品信息
	PageResp
}

type ProductRemoteConfigLastestReadReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductRemoteConfigLastestReadResp struct {
	ProductRemoteConfig
}

type ProductRemoteConfigPushAllReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductSchemaCreateReq struct {
	*ProductSchemaInfo
}

type ProductSchemaDeleteReq struct {
	ProductID  string `json:"productID"`  //产品id
	Identifier string `json:"identifier"` //标识符
}

type ProductSchemaIndexReq struct {
	Page              *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
	ProductID         string    `json:"productID"`     //产品id
	Type              int64     `json:"type,optional"` //物模型类型 1:property属性 2:event事件 3:action行为
	Types             []int64   `json:"types,optional"`
	Tag               int64     `json:"tag,optional"`         //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
	Identifiers       []string  `json:"identifiers,optional"` //过滤标识符列表
	Name              string    `json:"name,optional"`
	IsCanSceneLinkage int64     `json:"isCanSceneLinkage,optional"` //是否可以场景联动
	FuncGroup         int64     `json:"funcGroup,optional"`         // 功能分类: 1:普通功能 2:系统功能
	UserPerm          int64     `json:"userPerm,optional"`          //用户权限操作: 1:r(只读) 3:rw(可读可写)
	PropertyMode      string    `json:"propertyMode,optional"`      //属性类型可用 读写类型: 1:r(只读) 2:rw(可读可写)
	ControlMode       int64     `json:"controlMode,optional"`       //控制模式: 1: 可以群控,可以单控  2:只能单控
}

type ProductSchemaIndexResp struct {
	List []*ProductSchemaInfo `json:"list"` //分页信息,只获取一个则不填
	PageResp
}

type ProductSchemaInfo struct {
	ProductID         string  `json:"productID,optional"`         //产品id 只读
	Type              int64   `json:"type"`                       //物模型类型 1:property属性 2:event事件 3:action行为
	Tag               int64   `json:"tag"`                        //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
	Identifier        string  `json:"identifier"`                 //标识符
	ExtendConfig      string  `json:"extendConfig,optional"`      //拓展参数
	Name              *string `json:"name,optional"`              //功能名称
	Desc              *string `json:"desc,optional"`              //描述
	Required          int64   `json:"required,optional"`          //是否必须 1:是 2:否
	Affordance        *string `json:"affordance,optional"`        //各功能类型的详细参数定义
	IsCanSceneLinkage int64   `json:"isCanSceneLinkage,optional"` //是否可以场景联动
	FuncGroup         int64   `json:"funcGroup,optional"`         // 功能分类: 1:普通功能 2:系统功能
	UserPerm          int64   `json:"userPerm,optional"`          //用户权限操作: 1:r(只读) 3:rw(可读可写)
	IsHistory         int64   `json:"isHistory,optional"`         // 是否存储历史记录
	IsPassword        int64   `json:"isPassword,optional"`        //是否是密码类型,密码类型需要加掩码
	Order             int64   `json:"order,optional"`             // 排序
	ControlMode       int64   `json:"controlMode,optional"`       //控制模式: 1: 可以群控,可以单控  2:只能单控
}

type ProductSchemaMultiCreateReq struct {
	ProductID string               `json:"productID"` //产品id
	List      []*ProductSchemaInfo `json:"list"`      //分页信息,只获取一个则不填
}

type ProductSchemaTslImportReq struct {
	ProductID string `json:"productID"` //产品id 只读
	Tsl       string `json:"tsl"`       //物模型tsl
}

type ProductSchemaTslReadReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductSchemaTslReadResp struct {
	Tsl string `json:"tsl"` //物模型tsl
}

type ProductSchemaUpdateReq struct {
	*ProductSchemaInfo
}

type ProtocolConfigField struct {
	ID         int64  `json:"id"`
	Group      string `json:"group"`
	Key        string `json:"key"`
	Label      string `json:"label"`
	IsRequired bool   `json:"isRequired"`
	Sort       int64  `json:"sort"`
}

type ProtocolConfigInfo struct {
	ID     int64             `json:"id"`
	Config map[string]string `json:"config"`
	Desc   string            `json:"desc"`
}

type ProtocolInfo struct {
	ID                  int64                  `json:"id,optional"`
	Name                string                 `json:"name,optional"`
	Code                string                 `json:"code,optional"`          //  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
	Type                string                 `json:"type,optional"`          //协议类型: 普通设备(默认):normal  音视频:media
	TransProtocol       string                 `json:"transProtocol,optional"` // 传输协议: mqtt,tcp,udp
	Desc                string                 `json:"desc,optional"`
	Endpoints           []string               `json:"endpoints,optional"`
	EtcdKey             string                 `json:"etcdKey,optional"`
	IsEnableSyncProduct int64                  `json:"isEnableSyncProduct"`    //是否支持主动同步产品信息
	IsEnableSyncDevice  int64                  `json:"isEnableSyncDevice"`     //是否支持主动同步设备信息
	ConfigFields        []*ProtocolConfigField `json:"configFields,optional"`  //配置字段列表,没有可以不传
	ConfigInfos         []*ProtocolConfigInfo  `json:"configInfos,optional"`   //配置列表
	ProductFields       []*ProtocolConfigField `json:"productFields,optional"` //产品级的配置字段列表,没有可以不传
	DeviceFields        []*ProtocolConfigField `json:"deviceFields,optional"`  //设备级的配置字段列表,没有可以不传
}

type ProtocolInfoIndexReq struct {
	Page          *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
	Name          string    `json:"name,optional"` //
	Code          string    `json:"code,optional"` //
	Codes         []string  `json:"codes,optional"`
	Type          string    `json:"type,optional"`          //协议类型: 普通设备(默认):normal  音视频:media
	TransProtocol string    `json:"transProtocol,optional"` // 传输协议: mqtt,tcp,udp
}

type ProtocolInfoIndexResp struct {
	List  []*ProtocolInfo `json:"list"`           //自定义协议信息
	Total int64           `json:"total,optional"` //拥有的总数
}

type ProtocolScript struct {
	ID            int64   `json:"id,string,optional"`
	Name          string  `json:"name,optional"`
	Desc          *string `json:"desc,optional"`
	TriggerDir    int64   `json:"triggerDir,optional"`    //1:up 2:down
	TriggerTimer  int64   `json:"triggerTimer,optional"`  //收到前处理1:before 2:after
	TriggerHandle string  `json:"triggerHandle,optional"` //对应 mqtt topic的第一个 thing ota config 等等
	TriggerType   string  `json:"triggerType,optional"`   // 操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
	Script        string  `json:"script,optional"`        //脚本内容
	Status        int64   `json:"status,optional"`        //状态:是否启用
	CreatedTime   int64   `json:"createdTime,optional"`   //创建时间
}

type ProtocolScriptDebugReq struct {
	TriggerDir   int64       `json:"triggerDir"`    //1:up 2:down
	TriggerTimer int64       `json:"triggerTimer"`  //收到前处理1:before 2:after
	Script       string      `json:"script"`        //脚本内容
	Req          *PublishMsg `json:"req"`           //请求
	Resp         *PublishMsg `json:"resp,optional"` //回复
}

type ProtocolScriptDebugResp struct {
	Out  *PublishMsg `json:"out"`
	Logs []string    `json:"logs"`
}

type ProtocolScriptDevice struct {
	ID          int64           `json:"id,string,optional"`
	TriggerSrc  int64           `json:"triggerSrc,optional"` //product:1 device:2
	ProductID   string          `json:"productID,optional"`
	DeviceName  string          `json:"deviceName,optional"`
	ScriptID    int64           `json:"scriptID,optional"`
	Priority    int64           `json:"priority,optional"`    //执行优先级
	Status      int64           `json:"status,optional"`      //状态:是否启用
	CreatedTime int64           `json:"createdTime,optional"` //创建时间
	Script      *ProtocolScript `json:"script,optional"`      //只读 脚本信息 withScript传true返回
	Product     *ProductInfo    `json:"product,optional"`     //withDevice时,绑定的是产品返回
	Device      *DeviceInfo     `json:"device,optional"`      //withDevice时,绑定的是设备返回
}

type ProtocolScriptDeviceIndexReq struct {
	Page       *PageInfo `json:"page,optional"`       //分页信息,只获取一个则不填
	TriggerSrc int64     `json:"triggerSrc,optional"` //product:1 device:2
	ProductID  string    `json:"productID,optional"`
	DeviceName string    `json:"deviceName,optional"`
	Status     int64     `json:"status,optional"` //状态:是否启用
	ScriptID   int64     `json:"scriptID,string,optional"`
	WithScript bool      `json:"withScript,optional"`
	WithDevice bool      `json:"withDevice,optional"`
}

type ProtocolScriptDeviceIndexResp struct {
	List  []*ProtocolScriptDevice `json:"list"`           //自定义协议信息
	Total int64                   `json:"total,optional"` //拥有的总数
}

type ProtocolScriptIndexReq struct {
	Page          *PageInfo `json:"page,optional"`          //分页信息,只获取一个则不填
	Name          string    `json:"name,optional"`          //
	TriggerDir    int64     `json:"triggerDir,optional"`    //1:up 2:down
	TriggerTimer  int64     `json:"triggerTimer,optional"`  //收到前处理1:before 2:after
	TriggerHandle string    `json:"triggerHandle,optional"` //对应 mqtt topic的第一个 thing ota config 等等
	TriggerType   string    `json:"triggerType,optional"`   // 操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
	Status        int64     `json:"status,optional"`        //状态:是否启用
}

type ProtocolScriptIndexResp struct {
	List  []*ProtocolScript `json:"list"`           //自定义协议信息
	Total int64             `json:"total,optional"` //拥有的总数
}

type ProtocolService struct {
	ID          int64  `json:"id"`
	Code        string `json:"code"`        //协议code
	IP          string `json:"ip"`          // 协议服务的ip地址
	Port        int64  `json:"port"`        //监听的端口,如果没有填0即可
	Status      int64  `json:"status"`      //服务状态
	UpdatedTime int64  `json:"updatedTime"` //更新时间
	CreatedTime int64  `json:"createdTime"` //首次加入时间
}

type ProtocolServiceIndexReq struct {
	Page *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
	Code string    `json:"code"`          //
}

type ProtocolServiceIndexResp struct {
	List  []*ProtocolService `json:"list"`           //自定义协议信息
	Total int64              `json:"total,optional"` //拥有的总数
}

type ProtocolSyncDeviceReq struct {
	Code      string `json:"code"` //  协议code
	ProductID string `json:"productID"`
}

type ProtocolSyncDeviceResp struct {
	DeviceNames []string `json:"deviceNames"` //同步新增的设备ID列表
}

type PublishMsg struct {
	Handle       string `json:"handle,optional"` //对应 mqtt topic的第一个 thing ota config 等等
	Type         string `json:"type,optional"`   //操作类型 从topic中提取 物模型下就是   property属性 event事件 action行为
	Payload      []byte `json:"payload,optional"`
	Timestamp    int64  `json:"timestamp,string,optional"` //毫秒时间戳
	ProductID    string `json:"productID,optional"`
	DeviceName   string `json:"deviceName,optional"`
	Explain      string `json:"explain,optional"`      //内部使用的拓展字段
	ProtocolCode string `json:"protocolCode,optional"` //如果有该字段则回复的时候也会带上该字段
}

type SchemaAction struct {
	Input  []*SchemaParam `json:"input,optional"`  //调用参数
	Output []*SchemaParam `json:"output,optional"` //返回参数
}

type SchemaDefine struct {
	Type      string            `json:"type"`                //参数类型: bool int string  float timestamp array enum
	Mapping   map[string]string `json:"mapping,omitempty"`   //枚举及bool类型:bool enum
	Min       string            `json:"min,omitempty"`       //数值最小值:int  float
	Max       string            `json:"max,omitempty"`       //数值最大值:int string float
	Start     string            `json:"start,omitempty"`     //初始值:int float
	Step      string            `json:"step,omitempty"`      //步长:int float
	Unit      string            `json:"unit,omitempty"`      //单位:int float
	Specs     []*SchemaSpec     `json:"specs,omitempty"`     //结构体:
	ArrayInfo *SchemaDefine     `json:"arrayInfo,omitempty"` //数组:array
}

type SchemaEvent struct {
	Type   string         `json:"type"`            //事件类型: 信息:info  告警alert  故障:fault
	Params []*SchemaParam `json:"params,optional"` //事件参数
}

type SchemaParam struct {
	Identifier string        `json:"identifier"`       //参数标识符
	Name       string        `json:"name"`             //参数名称
	Define     *SchemaDefine `json:"define,omitempty"` //参数定义
}

type SchemaProperty struct {
	Mode   string        `json:"mode,optional"` //读写类型: r(只读) rw(可读可写)
	Define *SchemaDefine `json:"define"`        //参数定义
}

type SchemaSpec struct {
	Identifier string        `json:"identifier"` //参数标识符
	Name       string        `json:"name"`       //参数名称
	DataType   *SchemaDefine `json:"dataType"`   //参数定义
}

type SendOption struct {
	TimeoutToFail  int64 `json:"timeoutToFail,optional"`  //超时失败时间
	RequestTimeout int64 `json:"requestTimeout,optional"` //请求超时,超时后会进行重试
	RetryInterval  int64 `json:"retryInterval,optional"`  //重试间隔
}

type SharePerm struct {
	Perm int64 `json:"perm,optional,default=3"` //2:读写权限 3读权限
}

type SlotAreaSaveReq struct {
	ProjectID    int64 `json:"projectID,string,optional"`    //项目id（只读）
	AreaID       int64 `json:"areaID,string,optional"`       //项目区域id（只读）
	ParentAreaID int64 `json:"parentAreaID,string,optional"` //上级项目区域id（只读）
}

type SlotUserSubscribe struct {
	Code   string                 `json:"code"`
	Params map[string]interface{} `json:"params"`
}

type SlotUserSubscribeResp struct {
	List []map[string]interface{} `json:"list"`
}

type Tag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type TimeRange struct {
	Start int64 `json:"start,optional"` //开始时间 unix时间戳
	End   int64 `json:"end,optional"`   //结束时间 unix时间戳
}

type UserCollectDeviceInfo struct {
	Devices []*DeviceInfo `json:"devices"`
}

type UserCollectDeviceSave struct {
	Devices []*DeviceCore `json:"devices"`
}

type UserCore struct {
	UserID      int64  `json:"userID,string,optional"`      // 用户id
	UserName    string `json:"userName,optional"`           // 用户名(唯一)
	Email       string `json:"email,optional"`              // 邮箱
	Phone       string `json:"phone,optional"`              // 手机号
	LastIP      string `json:"lastIP,optional"`             // 最后登录ip
	RegIP       string `json:"regIP,optional"`              // 注册ip
	NickName    string `json:"nickName,optional"`           // 用户的昵称
	HeadImg     string `json:"headImg,optional"`            // 用户头像
	CreatedTime int64  `json:"createdTime,string,optional"` // 创建时间
}

type UserDeviceShareIndexReq struct {
	Page     *PageInfo   `json:"page,optional"`
	Device   *DeviceCore `json:"device,optional"`   //设备信息
	WithUser bool        `json:"withUser,optional"` //同时返回用户信息
}

type UserDeviceShareIndexResp struct {
	List  []*UserDeviceShareInfo `json:"list,optional"`
	Total int64                  `json:"total,optional"`
}

type UserDeviceShareInfo struct {
	ID                int64                 `json:"id,optional"`
	ProjectID         int64                 `json:"projectID,string,optional"`
	Device            DeviceCore            `json:"device,optional"`              //设备信息
	SharedUserID      int64                 `json:"sharedUserID,string,optional"` //分享的对象
	SharedUserAccount string                `json:"sharedUserAccount,optional"`
	AuthType          int64                 `json:"authType,optional"`       //授权类型:1:全部授权 2:部分授权
	SchemaPerm        map[string]*SharePerm `json:"schemaPerm,optional"`     //普通功能权限 2:读写权限 3读权限
	AccessPerm        map[string]*SharePerm `json:"accessPerm,optional"`     //系统功能权限 2:读写权限 3读权限
	ExpTime           *int64                `json:"expTime,optional,string"` //到期时间
	User              *UserCore             `json:"user,optional"`           //只读,传withUser会赋值
	CreatedTime       int64                 `json:"createdTime,optional"`
}

type UserDeviceShareMultiAcceptInfo struct {
	ShareToken string        `json:"shareToken,optional"` //分享后的用于生成二维码的字符串
	Devices    []*DeviceCore `json:"devices,optional"`    //批量设备信息
}

type UserDeviceShareMultiDeleteReq struct {
	IDs       []int64 `json:"ids,optional"`
	ProjectID int64   `json:"projectID,string,optional"`
}

type UserDeviceShareMultiIndexResp struct {
	Devices     []*DeviceShareInfo    `json:"devices,optional"`    //批量设备信息
	AuthType    int64                 `json:"authType,optional"`   //授权类型:1:全部授权 2:部分授权
	SchemaPerm  map[string]*SharePerm `json:"schemaPerm,optional"` //普通功能权限 2:读写权限 3读权限
	AccessPerm  map[string]*SharePerm `json:"accessPerm,optional"` //系统功能权限 2:读写权限 3读权限
	ExpTime     int64                 `json:"expTime,optional"`    //到期时间
	CreatedTime int64                 `json:"createdTime,optional"`
}

type UserDeviceShareMultiInfo struct {
	Devices     []*DeviceCore         `json:"devices,optional"`    //批量设备信息
	AuthType    int64                 `json:"authType,optional"`   //授权类型:1:全部授权 2:部分授权
	SchemaPerm  map[string]*SharePerm `json:"schemaPerm,optional"` //普通功能权限 2:读写权限 3读权限
	AccessPerm  map[string]*SharePerm `json:"accessPerm,optional"` //系统功能权限 2:读写权限 3读权限
	ExpTime     int64                 `json:"expTime,optional"`    //到期时间
	CreatedTime int64                 `json:"createdTime,optional"`
}

type UserDeviceShareMultiToken struct {
	ShareToken string `json:"shareToken,optional"`
}

type UserDeviceShareReadReq struct {
	ID     int64       `json:"id,optional"`
	Device *DeviceCore `json:"device,optional"` //设备信息
}

type WithID struct {
	ID int64 `json:"id,optional"` // id
}

type WithIDChildren struct {
	ID           int64 `json:"id,optional"` // id
	WithChildren bool  `json:"withChildren,optional"`
}

type WithIDOrCode struct {
	ID   int64  `json:"id,optional"` // id
	Code string `json:"code,optional"`
}

type WithIDStr struct {
	ID int64 `json:"id,string,optional"` // id
}

type WithProfile struct {
	Code   string `json:"code"`
	Params string `json:"params"`
}
