// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.1

package handler

import (
	"net/http"

	thingsdeviceauth "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/auth"
	thingsdeviceauth5 "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/auth5"
	thingsdeviceedge "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/edge"
	thingsdevicegateway "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/gateway"
	thingsdevicegroup "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/group"
	thingsdeviceinfo "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/info"
	thingsdeviceinteract "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/interact"
	thingsdevicemoduleversion "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/module/version"
	thingsdevicemsg "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/msg"
	thingsdeviceprofile "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/profile"
	thingsdeviceschema "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/device/schema"
	thingsgroupdevice "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/group/device"
	thingsgroupinfo "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/group/info"
	thingsotafirmwaredevice "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/ota/firmware/device"
	thingsotafirmwareinfo "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/ota/firmware/info"
	thingsotafirmwarejob "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/ota/firmware/job"
	thingsotamoduleinfo "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/ota/module/info"
	thingsproductcategory "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/product/category"
	thingsproductconfig "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/product/config"
	thingsproductcustom "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/product/custom"
	thingsproductinfo "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/product/info"
	thingsproductremoteConfig "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/product/remoteConfig"
	thingsproductschema "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/product/schema"
	thingsprotocolinfo "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/protocol/info"
	thingsprotocolscript "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/protocol/script"
	thingsprotocolscriptdevice "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/protocol/script/device"
	thingsprotocolservice "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/protocol/service"
	thingsprotocolsync "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/protocol/sync"
	thingsrulealarminfo "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/rule/alarm/info"
	thingsrulealarmrecord "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/rule/alarm/record"
	thingsrulealarmscene "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/rule/alarm/scene"
	thingsrulesceneinfo "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/rule/scene/info"
	thingsrulescenelog "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/rule/scene/log"
	thingsschemacommon "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/schema/common"
	thingsslotarea "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/slot/area"
	thingsslotuser "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/slot/user"
	thingsuserdevicecollect "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/user/device/collect"
	thingsuserdeviceshare "gitee.com/unitedrhino/things/service/apisvr/internal/handler/things/user/device/share"
	"gitee.com/unitedrhino/things/service/apisvr/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 设备操作认证
					Method:  http.MethodPost,
					Path:    "/access",
					Handler: thingsdeviceauth.AccessHandler(serverCtx),
				},
				{
					// 设备登录认证
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: thingsdeviceauth.LoginHandler(serverCtx),
				},
				{
					// 设备自动注册
					Method:  http.MethodPost,
					Path:    "/register",
					Handler: thingsdeviceauth.RegisterHandler(serverCtx),
				},
				{
					// 鉴定是否是root账号
					Method:  http.MethodPost,
					Path:    "/root-check",
					Handler: thingsdeviceauth.RootCheckHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 设备操作认证
					Method:  http.MethodPost,
					Path:    "/access",
					Handler: thingsdeviceauth5.AccessHandler(serverCtx),
				},
				{
					// 设备登录认证
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: thingsdeviceauth5.LoginHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/auth5"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 设备使用http协议用云端交互,需要在http头中带上mqtt的账号密码(basic auth)
					Method:  http.MethodPost,
					Path:    "/send/:handle/:type",
					Handler: thingsdeviceedge.SendHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/edge"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取子设备列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsdevicegateway.IndexHandler(serverCtx),
				},
				{
					// 添加网关子设备
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: thingsdevicegateway.MultiCreateHandler(serverCtx),
				},
				{
					// 解绑子设备
					Method:  http.MethodPost,
					Path:    "/multi-delete",
					Handler: thingsdevicegateway.MultiDeleteHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/gateway"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 将设备加到多个分组中
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: thingsdevicegroup.MultiCreateHandler(serverCtx),
				},
				{
					// 删除设备所在分组
					Method:  http.MethodPost,
					Path:    "/multi-delete",
					Handler: thingsdevicegroup.MultiDeleteHandler(serverCtx),
				},
				{
					// 更新设备所在分组
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: thingsdevicegroup.MultiUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/group"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 绑定
					Method:  http.MethodPost,
					Path:    "/bind",
					Handler: thingsdeviceinfo.BindHandler(serverCtx),
				},
				{
					// 创建绑定token
					Method:  http.MethodPost,
					Path:    "/bind/token/create",
					Handler: thingsdeviceinfo.BindTokenCreateHandler(serverCtx),
				},
				{
					// 绑定token状态查询
					Method:  http.MethodPost,
					Path:    "/bind/token/read",
					Handler: thingsdeviceinfo.BindTokenReadHandler(serverCtx),
				},
				{
					// 是否可以绑定设备
					Method:  http.MethodPost,
					Path:    "/can-bind",
					Handler: thingsdeviceinfo.CanBindHandler(serverCtx),
				},
				{
					// 设备统计详情
					Method:  http.MethodPost,
					Path:    "/count",
					Handler: thingsdeviceinfo.CountHandler(serverCtx),
				},
				{
					// 新增设备
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsdeviceinfo.CreateHandler(serverCtx),
				},
				{
					// 删除设备
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsdeviceinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取设备列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsdeviceinfo.IndexHandler(serverCtx),
				},
				{
					// 转移设备到新设备上
					Method:  http.MethodPost,
					Path:    "/move",
					Handler: thingsdeviceinfo.MoveHandler(serverCtx),
				},
				{
					// 批量绑定
					Method:  http.MethodPost,
					Path:    "/multi-bind",
					Handler: thingsdeviceinfo.MultiBindHandler(serverCtx),
				},
				{
					// 批量导入设备
					Method:  http.MethodPost,
					Path:    "/multi-import",
					Handler: thingsdeviceinfo.MultiImportHandler(serverCtx),
				},
				{
					// 批量更新设备
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: thingsdeviceinfo.MultiUpdateHandler(serverCtx),
				},
				{
					// 导入批量更新设备
					Method:  http.MethodPost,
					Path:    "/multi-update-import",
					Handler: thingsdeviceinfo.MultiUpdateImportHandler(serverCtx),
				},
				{
					// 获取设备详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsdeviceinfo.ReadHandler(serverCtx),
				},
				{
					// 转让设备
					Method:  http.MethodPost,
					Path:    "/transfer",
					Handler: thingsdeviceinfo.TransferHandler(serverCtx),
				},
				{
					// 解绑设备
					Method:  http.MethodPost,
					Path:    "/unbind",
					Handler: thingsdeviceinfo.UnbindHandler(serverCtx),
				},
				{
					// 更新设备
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsdeviceinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取调用设备行为的结果
					Method:  http.MethodPost,
					Path:    "/action-read",
					Handler: thingsdeviceinteract.ActionReadHandler(serverCtx),
				},
				{
					// 调用设备行为
					Method:  http.MethodPost,
					Path:    "/action-send",
					Handler: thingsdeviceinteract.ActionSendHandler(serverCtx),
				},
				{
					// 请求网关上报拓扑关系
					Method:  http.MethodPost,
					Path:    "/gateway-get-found-send",
					Handler: thingsdeviceinteract.GatewayGetFoundSendHandler(serverCtx),
				},
				{
					// 通知网关绑定子设备
					Method:  http.MethodPost,
					Path:    "/gateway-notify-bind-send",
					Handler: thingsdeviceinteract.GatewayNotifyBindSendHandler(serverCtx),
				},
				{
					// 批量调用设备属性
					Method:  http.MethodPost,
					Path:    "/property-control-multi-send",
					Handler: thingsdeviceinteract.PropertyControlMultiSendHandler(serverCtx),
				},
				{
					// 获取调用设备属性的结果
					Method:  http.MethodPost,
					Path:    "/property-control-read",
					Handler: thingsdeviceinteract.PropertyControlReadHandler(serverCtx),
				},
				{
					// 调用设备属性
					Method:  http.MethodPost,
					Path:    "/property-control-send",
					Handler: thingsdeviceinteract.PropertyControlSendHandler(serverCtx),
				},
				{
					// 批量请求设备获取设备最新属性
					Method:  http.MethodPost,
					Path:    "/property-get-report-multi-send",
					Handler: thingsdeviceinteract.PropertyGetReportMultiSendHandler(serverCtx),
				},
				{
					// 请求设备获取设备最新属性
					Method:  http.MethodPost,
					Path:    "/property-get-report-send",
					Handler: thingsdeviceinteract.PropertyGetReportSendHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/interact"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取设备模块版本详情
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsdevicemoduleversion.IndexHandler(serverCtx),
				},
				{
					// 获取设备模块版本列表
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsdevicemoduleversion.ReadHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/version"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取设备异常日志
					Method:  http.MethodPost,
					Path:    "/abnormal-log/index",
					Handler: thingsdevicemsg.AbnormalLogIndexHandler(serverCtx),
				},
				{
					// 获取事件历史记录
					Method:  http.MethodPost,
					Path:    "/event-log/index",
					Handler: thingsdevicemsg.EventLogIndexHandler(serverCtx),
				},
				{
					// 获取网关可以绑定的子设备列表
					Method:  http.MethodPost,
					Path:    "/gateway-can-bind-index",
					Handler: thingsdevicemsg.GatewayCanBindIndexHandler(serverCtx),
				},
				{
					// 获取云端诊断日志
					Method:  http.MethodPost,
					Path:    "/hub-log/index",
					Handler: thingsdevicemsg.HubLogIndexHandler(serverCtx),
				},
				{
					// 获取最新属性记录
					Method:  http.MethodPost,
					Path:    "/property-log-latest/index",
					Handler: thingsdevicemsg.PropertyLatestIndexHandler(serverCtx),
				},
				{
					// 获取单个id属性历史记录
					Method:  http.MethodPost,
					Path:    "/property-log/index",
					Handler: thingsdevicemsg.PropertyLogIndexHandler(serverCtx),
				},
				{
					// 获取设备sdk日志
					Method:  http.MethodPost,
					Path:    "/sdk-log/index",
					Handler: thingsdevicemsg.SdkLogIndexHandler(serverCtx),
				},
				{
					// 获取设备命令日志
					Method:  http.MethodPost,
					Path:    "/send-log/index",
					Handler: thingsdevicemsg.SendLogIndexHandler(serverCtx),
				},
				{
					// 获取设备影子列表
					Method:  http.MethodPost,
					Path:    "/shadow/index",
					Handler: thingsdevicemsg.ShadowIndexHandler(serverCtx),
				},
				{
					// 获取设备状态日志
					Method:  http.MethodPost,
					Path:    "/status-log/index",
					Handler: thingsdevicemsg.StatusLogIndexHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/msg"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 删除设备配置
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsdeviceprofile.DeleteHandler(serverCtx),
				},
				{
					// 获取设备配置列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsdeviceprofile.IndexHandler(serverCtx),
				},
				{
					// 获取设备配置详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsdeviceprofile.ReadHandler(serverCtx),
				},
				{
					// 更新设备配置
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsdeviceprofile.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/profile"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 创建设备物模型
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsdeviceschema.CreateHandler(serverCtx),
				},
				{
					// 获取设备物模型列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsdeviceschema.IndexHandler(serverCtx),
				},
				{
					// 批量创建设备物模型
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: thingsdeviceschema.MultiCreateHandler(serverCtx),
				},
				{
					// 批量删除设备物模型
					Method:  http.MethodPost,
					Path:    "/multi-delete",
					Handler: thingsdeviceschema.MultiDeleteHandler(serverCtx),
				},
				{
					// 获取设备物模型tsl
					Method:  http.MethodPost,
					Path:    "/tsl-read",
					Handler: thingsdeviceschema.TslReadHandler(serverCtx),
				},
				{
					// 更新设备物模型
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsdeviceschema.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/device/schema"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加分组设备
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: thingsgroupdevice.MultiCreateHandler(serverCtx),
				},
				{
					// 删除分组设备
					Method:  http.MethodPost,
					Path:    "/multi-delete",
					Handler: thingsgroupdevice.MultiDeleteHandler(serverCtx),
				},
				{
					// 更新分组设备
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: thingsgroupdevice.MultiUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/group/device"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 创建分组
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsgroupinfo.CreateHandler(serverCtx),
				},
				{
					// 删除分组
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsgroupinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取分组列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsgroupinfo.IndexHandler(serverCtx),
				},
				{
					// 获取分组详情信息
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsgroupinfo.ReadHandler(serverCtx),
				},
				{
					// 更新分组信息
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsgroupinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/group/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 取消指定任务下的升级
					Method:  http.MethodPost,
					Path:    "/cancel",
					Handler: thingsotafirmwaredevice.CancelHandler(serverCtx),
				},
				{
					// 确认升级设备
					Method:  http.MethodPost,
					Path:    "/confirm",
					Handler: thingsotafirmwaredevice.ConfirmHandler(serverCtx),
				},
				{
					// 查询升级设备列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsotafirmwaredevice.IndexHandler(serverCtx),
				},
				{
					// 重试设备升级
					Method:  http.MethodPost,
					Path:    "/retry",
					Handler: thingsotafirmwaredevice.RetryHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/ota/firmware/device"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加升级包
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsotafirmwareinfo.CreateHandler(serverCtx),
				},
				{
					// 删除升级包
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsotafirmwareinfo.DeleteHandler(serverCtx),
				},
				{
					// 升级包列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsotafirmwareinfo.IndexHandler(serverCtx),
				},
				{
					// 查询升级包
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsotafirmwareinfo.ReadHandler(serverCtx),
				},
				{
					// 修改升级包
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsotafirmwareinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/ota/firmware/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 创建升级任务
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsotafirmwarejob.CreateHandler(serverCtx),
				},
				{
					// 获取升级包下的升级任务批次列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsotafirmwarejob.IndexHandler(serverCtx),
				},
				{
					// 查询指定升级批次的详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsotafirmwarejob.ReadHandler(serverCtx),
				},
				{
					// 更新升级批次
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsotafirmwarejob.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/ota/firmware/job"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 创建模块
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsotamoduleinfo.CreateHandler(serverCtx),
				},
				{
					// 删除模块
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsotamoduleinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取模块列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsotamoduleinfo.IndexHandler(serverCtx),
				},
				{
					// 查询模块详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsotamoduleinfo.ReadHandler(serverCtx),
				},
				{
					// 更新模块
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsotamoduleinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/ota/module/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增产品品类
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsproductcategory.CreateHandler(serverCtx),
				},
				{
					// 删除产品品类
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsproductcategory.DeleteHandler(serverCtx),
				},
				{
					// 获取产品品类列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsproductcategory.IndexHandler(serverCtx),
				},
				{
					// 获取产品品类详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsproductcategory.ReadHandler(serverCtx),
				},
				{
					// 获取产品品类物模型列表
					Method:  http.MethodPost,
					Path:    "/schema/index",
					Handler: thingsproductcategory.SchemaIndexHandler(serverCtx),
				},
				{
					// 批量新增产品品类物模型
					Method:  http.MethodPost,
					Path:    "/schema/multi-create",
					Handler: thingsproductcategory.SchemaMultiCreateHandler(serverCtx),
				},
				{
					// 批量删除产品品类物模型
					Method:  http.MethodPost,
					Path:    "/schema/multi-delete",
					Handler: thingsproductcategory.SchemaMultiDeleteHandler(serverCtx),
				},
				{
					// 批量更新产品品类物模型
					Method:  http.MethodPost,
					Path:    "/schema/multi-update",
					Handler: thingsproductcategory.SchemaMultiUpdateHandler(serverCtx),
				},
				{
					// 更新产品品类
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsproductcategory.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/product/category"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 更新配置
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsproductconfig.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/product/config"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取产品自定义信息详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsproductcustom.ReadHandler(serverCtx),
				},
				{
					// 更新产品自定义信息
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsproductcustom.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/product/custom"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增产品
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsproductinfo.CreateHandler(serverCtx),
				},
				{
					// 删除产品
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsproductinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取产品信息列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsproductinfo.IndexHandler(serverCtx),
				},
				{
					// 初始化产品
					Method:  http.MethodPost,
					Path:    "/init",
					Handler: thingsproductinfo.InitHandler(serverCtx),
				},
				{
					// 获取产品详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsproductinfo.ReadHandler(serverCtx),
				},
				{
					// 更新产品
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsproductinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/product/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 创建配置
					Method:  http.MethodPost,
					Path:    "/remote-config/create",
					Handler: thingsproductremoteConfig.CreateHandler(serverCtx),
				},
				{
					// 获取配置列表
					Method:  http.MethodPost,
					Path:    "/remote-config/index",
					Handler: thingsproductremoteConfig.IndexHandler(serverCtx),
				},
				{
					// 获取最新配置
					Method:  http.MethodPost,
					Path:    "/remote-config/lastest-read",
					Handler: thingsproductremoteConfig.LastestReadHandler(serverCtx),
				},
				{
					// 推送配置
					Method:  http.MethodPost,
					Path:    "/remote-config/push-all",
					Handler: thingsproductremoteConfig.PushAllHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/product"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 创建产品物模型
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsproductschema.CreateHandler(serverCtx),
				},
				{
					// 删除产品物模型
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsproductschema.DeleteHandler(serverCtx),
				},
				{
					// 获取产品物模型
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsproductschema.IndexHandler(serverCtx),
				},
				{
					// 批量创建产品物模型
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: thingsproductschema.MultiCreateHandler(serverCtx),
				},
				{
					// 导入产品物模型tsl
					Method:  http.MethodPost,
					Path:    "/tsl-import",
					Handler: thingsproductschema.TslImportHandler(serverCtx),
				},
				{
					// 获取产品物模型tsl
					Method:  http.MethodPost,
					Path:    "/tsl-read",
					Handler: thingsproductschema.TslReadHandler(serverCtx),
				},
				{
					// 更新产品物模型
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsproductschema.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/product/schema"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增自定义协议
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsprotocolinfo.CreateHandler(serverCtx),
				},
				{
					// 删除自定义协议
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsprotocolinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取自定义协议信息列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsprotocolinfo.IndexHandler(serverCtx),
				},
				{
					// 获取自定义协议详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsprotocolinfo.ReadHandler(serverCtx),
				},
				{
					// 更新自定义协议
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsprotocolinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/protocol/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增协议脚本
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsprotocolscript.CreateHandler(serverCtx),
				},
				{
					// 协议脚本调试
					Method:  http.MethodPost,
					Path:    "/debug",
					Handler: thingsprotocolscript.DebugHandler(serverCtx),
				},
				{
					// 删除协议脚本
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsprotocolscript.DeleteHandler(serverCtx),
				},
				{
					// 获取协议脚本列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsprotocolscript.IndexHandler(serverCtx),
				},
				{
					// 获取协议脚本详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsprotocolscript.ReadHandler(serverCtx),
				},
				{
					// 更新协议脚本
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsprotocolscript.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/protocol/script"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增协议脚本设备
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsprotocolscriptdevice.CreateHandler(serverCtx),
				},
				{
					// 删除协议脚本设备
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsprotocolscriptdevice.DeleteHandler(serverCtx),
				},
				{
					// 获取协议脚本设备列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsprotocolscriptdevice.IndexHandler(serverCtx),
				},
				{
					// 获取协议脚本设备详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsprotocolscriptdevice.ReadHandler(serverCtx),
				},
				{
					// 更新协议脚本设备
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsprotocolscriptdevice.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/protocol/script/device"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 删除自定义协议服务器
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsprotocolservice.DeleteHandler(serverCtx),
				},
				{
					// 获取自定义协议服务器信息列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsprotocolservice.IndexHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/protocol/service"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 设备同步(如果该协议不支持会返回不支持)
					Method:  http.MethodPost,
					Path:    "/device",
					Handler: thingsprotocolsync.DeviceHandler(serverCtx),
				},
				{
					// 产品同步(如果该协议不支持会返回不支持)
					Method:  http.MethodPost,
					Path:    "/product",
					Handler: thingsprotocolsync.ProductHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/protocol/sync"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增告警
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsrulealarminfo.CreateHandler(serverCtx),
				},
				{
					// 删除告警
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsrulealarminfo.DeleteHandler(serverCtx),
				},
				{
					// 获取告警信息列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsrulealarminfo.IndexHandler(serverCtx),
				},
				{
					// 获取告警信息
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsrulealarminfo.ReadHandler(serverCtx),
				},
				{
					// 更新告警
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsrulealarminfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/rule/alarm/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 处理告警
					Method:  http.MethodPost,
					Path:    "/deal",
					Handler: thingsrulealarmrecord.DealHandler(serverCtx),
				},
				{
					// 获取告警记录列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsrulealarmrecord.IndexHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/rule/alarm/record"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 删除告警和场景的关联
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsrulealarmscene.DeleteHandler(serverCtx),
				},
				{
					// 获取告警和场景的关联列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsrulealarmscene.IndexHandler(serverCtx),
				},
				{
					// 更新告警和场景的关联
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: thingsrulealarmscene.MultiCreateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/rule/alarm/scene"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增场景
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsrulesceneinfo.CreateHandler(serverCtx),
				},
				{
					// 删除场景
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsrulesceneinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取场景信息列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsrulesceneinfo.IndexHandler(serverCtx),
				},
				{
					// 手动触发场景
					Method:  http.MethodPost,
					Path:    "/manually-trigger",
					Handler: thingsrulesceneinfo.ManuallyTriggerHandler(serverCtx),
				},
				{
					// 获取场景信息详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsrulesceneinfo.ReadHandler(serverCtx),
				},
				{
					// 更新场景
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsrulesceneinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/rule/scene/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取场景日志列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsrulescenelog.IndexHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/rule/scene/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增通用物模型
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsschemacommon.CreateHandler(serverCtx),
				},
				{
					// 删除通用物模型
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsschemacommon.DeleteHandler(serverCtx),
				},
				{
					// 获取通用物模型列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsschemacommon.IndexHandler(serverCtx),
				},
				{
					// 初始化通用物模型
					Method:  http.MethodPost,
					Path:    "/init",
					Handler: thingsschemacommon.InitHandler(serverCtx),
				},
				{
					// 更新通用物模型
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsschemacommon.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/schema/common"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 插槽区域创建
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsslotarea.CreateHandler(serverCtx),
				},
				{
					// 插槽区域更新
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsslotarea.DeleteHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/slot/area"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 插槽用户订阅
					Method:  http.MethodPost,
					Path:    "/subscribe",
					Handler: thingsslotuser.SubscribeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/slot/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取收藏设备列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsuserdevicecollect.IndexHandler(serverCtx),
				},
				{
					// 批量收藏设备
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: thingsuserdevicecollect.MultiCreateHandler(serverCtx),
				},
				{
					// 批量取消收藏设备
					Method:  http.MethodPost,
					Path:    "/multi-delete",
					Handler: thingsuserdevicecollect.MultiDeleteHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/user/device/collect"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 分享设备
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: thingsuserdeviceshare.CreateHandler(serverCtx),
				},
				{
					// 取消分享设备
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: thingsuserdeviceshare.DeleteHandler(serverCtx),
				},
				{
					// 获取分享设备列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: thingsuserdeviceshare.IndexHandler(serverCtx),
				},
				{
					// 接受批量分享设备
					Method:  http.MethodPost,
					Path:    "/multi-accept",
					Handler: thingsuserdeviceshare.MultiAcceptHandler(serverCtx),
				},
				{
					// 生成批量分享设备二维码
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: thingsuserdeviceshare.MultiCreateHandler(serverCtx),
				},
				{
					// 批量取消分享设备
					Method:  http.MethodPost,
					Path:    "/multi-delete",
					Handler: thingsuserdeviceshare.MultiDeleteHandler(serverCtx),
				},
				{
					// 获取批量分享的设备列表
					Method:  http.MethodPost,
					Path:    "/multi-index",
					Handler: thingsuserdeviceshare.MultiIndexHandler(serverCtx),
				},
				{
					// 获取分享设备详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: thingsuserdeviceshare.ReadHandler(serverCtx),
				},
				{
					// 更新分享设备信息
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: thingsuserdeviceshare.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/things/user/device/share"),
	)
}
