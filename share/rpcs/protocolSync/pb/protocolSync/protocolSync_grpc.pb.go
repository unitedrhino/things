// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/protocolSync.proto

package protocolSync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProtocolSync_SyncProduct_FullMethodName = "/protocolSync.protocolSync/SyncProduct"
	ProtocolSync_SyncDevice_FullMethodName  = "/protocolSync.protocolSync/SyncDevice"
)

// ProtocolSyncClient is the client API for ProtocolSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtocolSyncClient interface {
	SyncProduct(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	SyncDevice(ctx context.Context, in *SyncDeviceReq, opts ...grpc.CallOption) (*SyncDeviceResp, error)
}

type protocolSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocolSyncClient(cc grpc.ClientConnInterface) ProtocolSyncClient {
	return &protocolSyncClient{cc}
}

func (c *protocolSyncClient) SyncProduct(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProtocolSync_SyncProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolSyncClient) SyncDevice(ctx context.Context, in *SyncDeviceReq, opts ...grpc.CallOption) (*SyncDeviceResp, error) {
	out := new(SyncDeviceResp)
	err := c.cc.Invoke(ctx, ProtocolSync_SyncDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolSyncServer is the server API for ProtocolSync service.
// All implementations must embed UnimplementedProtocolSyncServer
// for forward compatibility
type ProtocolSyncServer interface {
	SyncProduct(context.Context, *Empty) (*Empty, error)
	SyncDevice(context.Context, *SyncDeviceReq) (*SyncDeviceResp, error)
	mustEmbedUnimplementedProtocolSyncServer()
}

// UnimplementedProtocolSyncServer must be embedded to have forward compatible implementations.
type UnimplementedProtocolSyncServer struct {
}

func (UnimplementedProtocolSyncServer) SyncProduct(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncProduct not implemented")
}
func (UnimplementedProtocolSyncServer) SyncDevice(context.Context, *SyncDeviceReq) (*SyncDeviceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDevice not implemented")
}
func (UnimplementedProtocolSyncServer) mustEmbedUnimplementedProtocolSyncServer() {}

// UnsafeProtocolSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtocolSyncServer will
// result in compilation errors.
type UnsafeProtocolSyncServer interface {
	mustEmbedUnimplementedProtocolSyncServer()
}

func RegisterProtocolSyncServer(s grpc.ServiceRegistrar, srv ProtocolSyncServer) {
	s.RegisterService(&ProtocolSync_ServiceDesc, srv)
}

func _ProtocolSync_SyncProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolSyncServer).SyncProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtocolSync_SyncProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolSyncServer).SyncProduct(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolSync_SyncDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolSyncServer).SyncDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtocolSync_SyncDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolSyncServer).SyncDevice(ctx, req.(*SyncDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtocolSync_ServiceDesc is the grpc.ServiceDesc for ProtocolSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtocolSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocolSync.protocolSync",
	HandlerType: (*ProtocolSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncProduct",
			Handler:    _ProtocolSync_SyncProduct_Handler,
		},
		{
			MethodName: "SyncDevice",
			Handler:    _ProtocolSync_SyncDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/protocolSync.proto",
}
