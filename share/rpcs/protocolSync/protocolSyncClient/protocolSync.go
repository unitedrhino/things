// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.1
// Source: protocolSync.proto

package protocolSyncClient

import (
	"context"

	"gitee.com/unitedrhino/things/share/rpcs/protocolSync/internal/svc"
	"gitee.com/unitedrhino/things/share/rpcs/protocolSync/pb/protocolSync"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty          = protocolSync.Empty
	SyncDeviceReq  = protocolSync.SyncDeviceReq
	SyncDeviceResp = protocolSync.SyncDeviceResp

	ProtocolSync interface {
		SyncProduct(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
		SyncDevice(ctx context.Context, in *SyncDeviceReq, opts ...grpc.CallOption) (*SyncDeviceResp, error)
	}

	defaultProtocolSync struct {
		cli zrpc.Client
	}

	directProtocolSync struct {
		svcCtx *svc.ServiceContext
		svr    protocolSync.ProtocolSyncServer
	}
)

func NewProtocolSync(cli zrpc.Client) ProtocolSync {
	return &defaultProtocolSync{
		cli: cli,
	}
}

func NewDirectProtocolSync(svcCtx *svc.ServiceContext, svr protocolSync.ProtocolSyncServer) ProtocolSync {
	return &directProtocolSync{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

func (m *defaultProtocolSync) SyncProduct(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	client := protocolSync.NewProtocolSyncClient(m.cli.Conn())
	return client.SyncProduct(ctx, in, opts...)
}

func (d *directProtocolSync) SyncProduct(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	return d.svr.SyncProduct(ctx, in)
}

func (m *defaultProtocolSync) SyncDevice(ctx context.Context, in *SyncDeviceReq, opts ...grpc.CallOption) (*SyncDeviceResp, error) {
	client := protocolSync.NewProtocolSyncClient(m.cli.Conn())
	return client.SyncDevice(ctx, in, opts...)
}

func (d *directProtocolSync) SyncDevice(ctx context.Context, in *SyncDeviceReq, opts ...grpc.CallOption) (*SyncDeviceResp, error) {
	return d.svr.SyncDevice(ctx, in)
}
